continuous: '{{$.common.purpose.ci.continuous}}'
learnMore: Learn more about Continuous Integration
prSymbol: '#'
moreCommitsLabel: 'More commits'
ciTrialHomePage:
  startTrial:
    description: '{{ $.ci.dashboard.subHeading }}'
    startBtn:
      description: Start 14 day CI Enterprise trial
dashboard:
  subHeading: Take your software build processes to the next level using our Harness Continuous Integration
  createProject: '{{$.createProject}}'
commitsOn: 'Commits on'
committed: 'committed'
clipboardCopySuccess: '{{ $.clipboardCopySuccess }}'
clipboardCopyFail: '{{ $.clipboardCopyFail }}'
infraLabel: '{{ $.infrastructureText }}'
executionLabel: '{{ $.executionText }}'
advancedLabel: '{{ $.advancedTitle }}'
previous: '{{ $.previous }}'
next: '{{ $.next }}'
save: '{{ $.save }}'
titleResources: '{{ $.resourcePage.title }}'
newConnectorButton: '{{ $.newConnector }}'
connectors: '{{ $.connectorsLabel }}'
secrets: '{{ $.common.secrets }}'
delegates: '{{ $.delegate.delegates }}'
templates: '{{ $.common.templates }}'
fileStore: '{{ $.resourcePage.fileStore }}'
titleSettings: 'GENERAL SETTINGS'
titleGovernance: 'GOVERNANCE'
newItem: '+ new item'
noData: 'No data found. Click the button below to create a new item.'
welcome: 'Welcome to Continuous Integration'
description: Build, test and push artifacts to repositories.
createPipeline: '{{ $.common.createPipeline }}'
annotations: Annotations
labels: '{{ $.pipelineSteps.labelsLabel }}'
optimize: Optimize
remoteCacheImage:
  label: Remote Cache Image
  dockerInfo: The remote cache repository needs to be created in the same account and organization as the build image. The repository must already exist for caching to work
remoteCacheRepository:
  label: Remote Cache Repository
runTestsMavenSetupTitle: Maven setup
runTestsMavenSetupText1: Does your pom.xml contain <argLine>? Or do you attach Jacoco or any agent while running unit tests?
runTestsMavenSetupText2: Update pom.xml by adding the following plugin with <harnessArgLine>
runTestsMavenSetupSample: |
  Sample:
  <properties>
          <harnessArgLine></harnessArgLine>
  </properties>

  <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-surefire-plugin</artifactId>
      <version>2.22.2</version>
      <configuration>
          <argLine>${harnessArgLine}  @{argLine} </argLine>
      </configuration>
  </plugin>
commitMessage: Commit Message
prTitle: PR Title
gradleNotesTitle: 'The following needs to be added to a build.gradle to make it compatible with test intelligence:'
gradleNote1: |
  // This adds HARNESS_JAVA_AGENT to the testing command if it's
  // provided through the command line.
  // Local builds will still remain same as it only adds if the
  // parameter is provided.
  tasks.withType(Test) {
    if(System.getProperty("HARNESS_JAVA_AGENT")) {
      jvmArgs += [System.getProperty("HARNESS_JAVA_AGENT")]
    }
  }

  // This makes sure that any test tasks for subprojects don't
  // fail in case the test filter does not match.
  gradle.projectsEvaluated {
          tasks.withType(Test) {
              filter {
                  setFailOnNoMatchingTests(false)
              }
          }
  }
gradleNote2: Test intelligence assumes ./gradlew is present in the root of the project. If not, it falls back to the gradle tool to run the tests. As long as the gradle version has test filtering support, it will be able to run test intelligence
testSummary: Test Summary
successful: Successful
commitsTab:
  youHaveNoCommits: You have no commits
  youWillSeeYourCommitsHere: You will see your commits here
artifactoryConnectorLabel: Artifactory Connector
buildInfra:
  label: Build Infrastructure is required
  awsVMs: AWS VMs
  selectInfra: Select the infrastructure where you want your builds to run
  infrastructureTypesLabel: Infrastructure Types
  kubernetesHelpText: Use to run your builds on a Kubernetes Cluster, where each CI stage runs on an ephemeral Kubernetes pod.
  awsHelpText: Use to run your builds on VMs with Windows or Linux based operating systems.
  useNewInfra: Use a New Infrastructure
  k8sLabel: Kubernetes (K8s)
  vmLabel: Virtual Machines (VMs)
  awsVM:
    os: Operating System
    architecture: Achitecture
    isRequiredWhen: '{{field1}} is required in case {{field2}} is provided'
preCommandLabel: Pre-Command
postCommandLabel: Post-Command
portBindings: Port Bindings
hostPort: Host Port
containerPort: Container Port
getStartedWithCI:
  firstPipeline: 'Let’s get you started with your first Pipeline!'
  chooseAnOption: Choose an option below to get started with your first Pipeline.
  tryASamplePipeline: Try a Sample Pipeline
  buildyourOwnPipeline: Build your own Pipeline
  quicklyCreate: Quickly create a Pipeline using your own codebase and our intuitive visual editor.
  startSamplePipeline: Start with a sample Pipeline that builds an open source project.
  configInfra: Configure Infrastructure
  connectSCM: Connect your SCM
  selectRepo: Select Repository
  buildPipeline: Build Pipeline
  codebaseRepoLabel: Codebase Repo
  javaLabel: Java
  hostedByHarness: Hosted by Harness
  takeToTheNextLevel: Take your software build process to the next level using our Harness Continuous Integration.
  ti: Test Intelligence
  languageAgnostic: Language Agnostic
  parameterization: Flexible Parametrization & Template Library
  parallelization: Parallel execution and Automatic failure strategy
  flexibleInfra: Flexible infrastructure support
  devFriendly: Developer Friendly Experience
  security: Governance and Security
  integratedCICD: Integrated CI and CD pipelines
  tiHelpText: Reduce test cycle time without compromising on quality. Using our ML model, test cycles can be up to 98% faster, by eliminating irrelevant test execution. This will help you to innovate faster, with the same confidence that your changes are tested thoroughly.
  languageAgnosticHelpText: Harness CI can work with any language of your choice - Java, C++, .NET. This gives you the flexibility to use one CI solution for any language and framework, so you don’t need to change anything in your build process when adopting a new technology.
  parameterizationHelpText: Enforce best practices and reuse pipelines between different teams and projects. Creating generic pipelines and templates make it easy for different teams to onboard and spend less time on configuration (and more on development)
  parallelizationHelpText: Build the pipeline anyway you’d like, to make sure it is working for you - run steps in parallel to speed up execution, or in sequential, when there are dependencies. Group steps together for better visibility and management, add conditional execution at any level, and define failure strategy to automate remediation.
  flexibleInfraHelpText: Developers can choose which infrastructure to use to run their build in the most efficient way, according to their technology of choice - from k8s to VMs and macstadium.
  devFriendlyHelpText: Manage your pipelines the same way you manage your code - stored in git, located with your codebase, written in YAML (using built-in YAML editor, with auto-complete and schema validation), and handle changes using pull requests.
  securityHelpText: Avoid security issues and make sure your code and processes are always within compliance. CI Enterprise comes with full Audit capabilities, flexible and granular RBAC, allowing your team to create custom roles and OPA-backed policies that make sure all your pipelines are safe and secured.
  integratedCICDHelpText: Using one platform for both CI and CD streamline the delivery process, reduce manual steps and friction and help teams to move forward faster without learning and onboarding on multiple products.
  provisionSecureEnv: Provisioning a secure environment for your Builds
  duration: 'This can take up to {{count}} {{unit}}'
  infraProvisioningFailed: Infrastructure Provisioning failed
  troubleShootFailedProvisioning: We were unable to set up the hosted infrastructure. Click <b>Choose a different infrastructure</b> to use your own infrastructure or click <b>Contact Support</b> and we will resolve the issue.
  chooseDiffInfra: Choose a different Infrastructure
  buildLocation: Where would you like to run your Builds?
  hostedByHarnessBuildLocation: Run builds for free during trial on Linux based infrastructure provided by Harness.
  k8sBuildLocation: Run your builds in an existing Kubernetes cluster. Each Pipeline Stage runs on an ephemeral pod.
  awsBuildLocation: Run your builds on Linux or Windows VMs.
  dockerRunnerBuildLocation: Execute your Pipelines inside Docker containers.
  dockerRunner: Docker Runner
  selectInfra: Select your Infrastructure
  hosting: 'My Repo is {{hosting}}'
  onCloudLabel: on Cloud
  onPremLabel: On-prem
  codeRepo: Which Code repository do you use?
  authMethod: Select your Authentication method
  oAuthLabel: OAuth
  accessTokenLabel: Access Token
  codeRepoLabel: Code repository
  authMethodLabel: Authentication method
  selectYourRepo: Select your Repository
  createPipeline: Create Pipeline
  codebaseHelptext: Harness will clone your codebase to your build infrastructure at Pipeline runtime.
  searchRepo: Search Repository
  learnMoreAboutPermissions: Learn more about the required permissions
  verifyConnection: Verify connection before you can continue
  appPassword: Application Password
  apiUrlLabel: API URL
  carousel:
    labels:
      harnessCIFeatures: Harness CI
      complexPipelines: Complex Pipelines
      containerizedSteps: Containerized Steps
      useCaching: Caching
      usePlugins: Plugins
      integration: Seamlessly Integrate
    helptext:
      connectToRepo: After we provision your build infrastructure, we’ll connect to your repo and codebase.
      harnessCIFeatures: While you’re waiting, let’s talk about Harness CI features.
      ti: Test Intelligence reduces test time significantly. It runs only the tests needed for the code changes that triggered the build.
      pipelineStudio: Rapidly build your Pipeline and test your code using a visual editor or YAML. You can even sync your Pipeline with your Git provider and work entirely from Git.
      complexPipelines: Create complex Pipelines by using Stages that include Steps for building, pushing, and testing your code.
      containerizedSteps: Containerized Steps follow a Docker-based approach with dependency management in the ephemeral build node/runner container.
      useCaching: Use Caching to ensure faster Step execution by reusing data from fetch operations in previous Steps.
      usePlugins: Use Plugins to perform predefined tasks like building and publishing artifacts, sending events and metrics, and more.
      seamlessIntegration: Harness CI seamlessly integrates with other Harness modules like Continuous Delivery, Cloud Cost Management, and Feature Flags.
