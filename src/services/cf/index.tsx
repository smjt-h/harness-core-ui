/*
 * Copyright 2022 Harness Inc. All rights reserved.
 * Use of this source code is governed by the PolyForm Shield 1.0.0 license
 * that can be found in the licenses directory at the root of this repository, also available at
 * https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt.
 */

/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react'

import { getConfig, getUsingFetch, mutateUsingFetch, GetUsingFetchProps, MutateUsingFetchProps } from '../config'
export const SPEC_VERSION = '1.0.0'
/**
 * The API key is used by SDKs to connect to Harness Feature Flags
 */
export interface ApiKey {
  /**
   * The Key will be shown only on create. On subsequent GET calls, only the masked APIKeys will be returned
   */
  apiKey: string
  /**
   * The environment that this key was created in
   */
  identifier: string
  /**
   * A hash of API key
   */
  key?: string
  /**
   * The user friendly identifier for the API Key
   */
  name: string
  /**
   * The type of key depending on the SDK that is being used.
   */
  type: 'server' | 'client'
}

/**
 * A list of API Keys
 */
export type ApiKeys = Pagination & {
  apiKeys?: ApiKey[]
}

/**
 * The audit trail shows events that have occured for a given object
 */
export interface AuditTrail {
  /**
   * The action which triggered the event such as Created or Patched
   */
  action: string
  /**
   * The user that performed the event
   */
  actor: string
  /**
   * A user specified comment when performing the action
   */
  comment: string
  /**
   * The environment identifier
   */
  environment: string
  /**
   * The date in milliseconds the event was performed
   */
  executedOn: number
  /**
   * JSON payload representing the instruction that triggered the audit event
   */
  instructionSet: { [key: string]: any }[]
  objectAfter: string
  objectBefore: string
  /**
   * The objects identifier
   */
  objectIdentifier: string
  /**
   * The type of the object such as Target, FeatureConfig
   */
  objectType: string
  /**
   * The project identifier
   */
  project: string
  /**
   * The status of the event indicating if it was successful or not
   */
  status: string
}

/**
 * A list of Audit Trail events
 */
export type AuditTrails = Pagination & {
  auditTrails?: AuditTrail[]
}

/**
 * License Usage details for the feature flag account
 */
export interface CFLicenseUsageDTO {
  /**
   * The account ID to get usage details for
   */
  accountIdnetifier?: string
  activeClientMAUs?: UsageDataDTO
  activeFeatureFlagUsers?: UsageDataDTO
  /**
   * The module type
   */
  module?: string
  /**
   * The time that this data was generated
   */
  timestamp?: number
}

/**
 * A clause describes what conditions are used to evaluate a flag
 */
export interface Clause {
  /**
   * The attribute to use in the clause.  This can be any target attribute
   */
  attribute: string
  /**
   * The unique ID for the clause
   */
  id?: string
  /**
   * Is the operation negated?
   */
  negate: boolean
  /**
   * The type of operation such as equals, starts_with, contains
   */
  op: string
  /**
   * The values that are compared against the operator
   */
  values: string[]
}

/**
 * Describes a distribution rule
 */
export interface Distribution {
  /**
   * The attribute to use when distributing targets across buckets
   */
  bucketBy: string
  /**
   * A list of variations and the weight that should be given to each
   */
  variations: WeightedVariation[]
}

/**
 * Environment Response
 */
export interface Environment {
  apiKeys: ApiKeys
  /**
   * A description for this Environment
   */
  description?: string
  /**
   * The Environment internal ID
   */
  id?: string
  /**
   * The Environment identifier
   */
  identifier: string
  /**
   * The user friendly name of the Environment
   */
  name: string
  /**
   * The project for this Environment
   */
  project: string
  tags?: Tag[]
}

/**
 * A list of Environments
 */
export interface Environments {
  environments?: Environment[]
}

export interface Error {
  /**
   * The http error code
   */
  code: string
  /**
   * Additional details about the error
   */
  details?: { [key: string]: any }
  /**
   * The reason the request failed
   */
  message: string
}

/**
 * A Feature Flag response
 */
export interface Feature {
  /**
   * Indicates if the flag has been archived and is no longer used
   */
  archived?: boolean
  /**
   * The date the flag was created in milliseconds
   */
  createdAt: number
  /**
   * The default value returned when a flag is off
   */
  defaultOffVariation: string
  /**
   * The default value returned when a flag is on
   */
  defaultOnVariation: string
  /**
   * A description for this flag
   */
  description?: string
  /**
   * The Feature Flag rules for a given environment
   */
  envProperties?: {
    defaultServe: Serve
    /**
     * The environment identifier
     */
    environment: string
    /**
     * The last time the flag was modified in this environment
     */
    modifiedAt?: number
    /**
     * The variation to serve for this flag in this environment when the flag is off
     */
    offVariation: string
    /**
     * A list of rules to use when evaluating this flag in this environment
     */
    rules?: ServingRule[]
    state: FeatureState
    /**
     * A list of the variations that will be served to specific targets or target groups in an environment.
     */
    variationMap?: VariationMap[]
    /**
     * The version of the flag.  This is incremented each time it is changed
     */
    version?: number
  }
  /**
   * The value that the flag will return for the current user
   */
  evaluation?: string
  /**
   * The identifier for the returned evaluation
   */
  evaluationIdentifier?: string
  /**
   * The Feature Flag identifier
   */
  identifier: string
  /**
   * The type of Feature flag
   */
  kind: 'boolean' | 'int' | 'string' | 'json'
  /**
   * The date the flag was last modified in milliseconds
   */
  modifiedAt?: number
  /**
   * The name of the Feature Flag
   */
  name: string
  /**
   * The user who created the flag
   */
  owner?: string[]
  /**
   * Indicates if this is a permanent flag, or one that should expire
   */
  permanent?: boolean
  prerequisites?: Prerequisite[]
  /**
   * The project this Feature belongs to
   */
  project: string
  /**
   * The results shows which variations have been evaluated, and how many times each of these have been evaluated.
   */
  results?: Results[]
  status?: FeatureStatus
  /**
   * A list of tags for this Feature Flag
   */
  tags?: Tag[]
  /**
   * The variations that can be returned for this flag
   */
  variations: Variation[]
}

/**
 * A Feature Flag evaluation describes a variation for the flag and the number of times it was evaluated
 */
export interface FeatureEvaluation {
  /**
   * The number of times this variation has been evaluated
   */
  count?: number
  /**
   * The date in milliseconds
   */
  date?: number
  /**
   * The variation identifier
   */
  variationIdentifier?: string
  /**
   * The user friendly name for this variation
   */
  variationName?: string
}

/**
 * A list of Feature Evaluations
 */
export interface FeatureEvaluations {
  evaluations?: FeatureEvaluation[]
}

/**
 * Feature flags yaml for a project
 */
export interface FeatureFlagsYaml {
  /**
   * The yaml payload describing the feature flags configuration
   */
  yaml: string
}

export interface FeatureMetric {
  /**
   * The feature flag identifier
   */
  identifier?: string
  /**
   * The name of the feature flag
   */
  name?: string
  results?: Results[]
  status?: FeatureStatus
}

/**
 * A list of FeatureMetrics
 */
export interface FeatureMetrics {
  metrics?: FeatureMetric[]
}

export interface FeatureResponseMetadata {
  /**
   * Additional metadata about the request
   */
  details?: {
    /**
     * Summary of governance checks including any warnings
     */
    governanceMetadata?: { [key: string]: any }
  }
}

/**
 * The state of a flag either off or on
 */
export type FeatureState = 'on' | 'off'

/**
 * Indicates when the flag was last evaluated
 */
export interface FeatureStatus {
  lastAccess: number
  status: 'active' | 'inactive' | 'never-requested'
}

/**
 * A list of Feature Flags
 */
export type Features = Pagination & {
  features?: Feature[]
}

/**
 * A flag Identifier and name
 */
export interface FlagBasicInfo {
  /**
   * The flag identifier
   */
  identifier: string
  /**
   * The user friendly flag name
   */
  name: string
}

/**
 * A list of Flags
 */
export type FlagBasicInfos = Pagination & {
  featureFlags?: FlagBasicInfo[]
}

/**
 * The commit message to use as part of a gitsync operation
 */
export interface GitDetails {
  /**
   * A description of the change or action
   */
  commitMsg: string
}

/**
 * The git repository that has been configured for the feature flag project
 */
export interface GitRepo {
  /**
   * Should all flag changes be automatically committed
   */
  autoCommit?: boolean
  /**
   * The branch where feature flag commits will be pushed
   */
  branch: string
  /**
   * Indicates if feature flag changes will be saved to the repository
   */
  enabled?: boolean
  /**
   * The path within the rootFolder to store the flags
   */
  filePath: string
  /**
   * The last date and time that the feature flags were synced to git in milliseconds
   */
  lastSync?: number
  /**
   * The objectId
   */
  objectId: string
  /**
   * The identifier for the git repository
   */
  repoIdentifier: string
  /**
   * The root folder in the repository where the feature flag yaml will be written
   */
  rootFolder: string
  /**
   * An error message describing any problems with the generated yaml
   */
  yamlError?: string
}

export interface GitRepoResp {
  repoDetails?: GitRepo
  repoSet: boolean
}

export interface GitSyncPatchOperation {
  /**
   * A comment explaining the reason for this patch operation
   */
  comment?: string
  /**
   * Time of execution in unix epoch milliseconds when the scheduled changes will be applied
   */
  executionTime?: number
  gitDetails?: GitDetails
  instructions: PatchInstruction
}

/**
 * An object id and object body generated from an audit event
 */
export interface ObjectSnapshot {
  /**
   * The identifier of the object e.g. the feature flag identifier or the target identifier
   */
  id: string
  /**
   * A JSON representative of the object that was modified
   */
  value?: { [key: string]: any }
}

/**
 * A list of Object Snapshots
 */
export interface ObjectSnapshots {
  objectsnapshots?: ObjectSnapshot[]
}

export interface Pagination {
  /**
   * The total number of items
   */
  itemCount: number
  /**
   * The total number of pages
   */
  pageCount: number
  /**
   * The current page
   */
  pageIndex: number
  /**
   * The number of items per page
   */
  pageSize: number
  /**
   * The version of this object.  The version will be incremented each time the object is modified
   */
  version?: number
}

/**
 * A list of Patch Instructions
 */
export type PatchInstruction = {
  /**
   * The name of the modification you would like to perform on a resource.
   */
  kind: string
  parameters: { [key: string]: any }
}[]

export interface PatchOperation {
  /**
   * A comment explaining the reason for this patch operation
   */
  comment?: string
  /**
   * Time of execution in unix epoch milliseconds when the scheduled changes will be applied
   */
  executionTime?: number
  instructions: PatchInstruction
}

/**
 * Feature Flag pre-requisites
 */
export interface Prerequisite {
  /**
   * The feature identifier that is the prerequisite
   */
  feature: string
  /**
   * A list of variations that must be met
   */
  variations: string[]
}

/**
 * A project response
 */
export interface Project {
  /**
   * The project description
   */
  description?: string
  /**
   * The unique identifier for this project
   */
  identifier: string
  /**
   * The user friendly name for the project
   */
  name: string
  /**
   * A list of tags for this project
   */
  tags?: Tag[]
}

/**
 * A list of projects
 */
export interface Projects {
  /**
   * The total number of items
   */
  itemCount?: number
  /**
   * The total number of pages
   */
  pageCount?: number
  /**
   * The current page
   */
  pageIndex?: number
  /**
   * The number of items per page
   */
  pageSize?: number
  /**
   * A list of projects
   */
  projects?: Project[]
}

export interface ReferenceDTO {
  /**
   * The account which this reference belongs to
   */
  accountIdentifier?: string
  /**
   * The unique identifier for this reference
   */
  identifier?: string
  /**
   * The name of the reference
   */
  name?: string
  /**
   * The organization which this reference belongs to
   */
  orgIdentifier?: string
  /**
   * The project which this reference belongs to
   */
  projectIdentifier?: string
}

/**
 * This result object shows details of how many times a variation has been evaluated
 */
export interface Results {
  /**
   * The number of times this variation has been returned in a evaluation
   */
  count: number
  /**
   * The unique variation identifier
   */
  variationIdentifier: string
  /**
   * The user friendly variation name
   */
  variationName: string
}

/**
 * A Target Group (Segment) response
 */
export interface Segment {
  /**
   * The data and time in milliseconds when the group was created
   */
  createdAt?: number
  /**
   * The environment this target group belongs to
   */
  environment?: string
  /**
   * A list of Targets who are excluded from this target group
   */
  excluded?: Target[]
  /**
   * Unique identifier for the target group.
   */
  identifier: string
  /**
   * A list of Targets who belong to this target group
   */
  included?: Target[]
  /**
   * The data and time in milliseconds when the group was last modified
   */
  modifiedAt?: number
  /**
   * Name of the target group.
   */
  name: string
  /**
   * An array of rules that can cause a user to be included in this segment.
   */
  rules?: Clause[]
  /**
   * Tags for this target group
   */
  tags?: Tag[]
  /**
   * The version of this group.  Each time it is modified the version is incremented
   */
  version?: number
}

/**
 * Details of a Feature Flag that has been included in a Target Group (Segment)
 */
export interface SegmentFlag {
  /**
   * A description of the feature flag
   */
  description?: string
  /**
   * The environment identifier for the feature flag
   */
  environment: string
  /**
   * The identifier of the feature flag
   */
  identifier: string
  /**
   * The name of the feature flag
   */
  name: string
  /**
   * The project identifier for the feature flag
   */
  project: string
  /**
   * The unique identifier for this rule
   */
  ruleId?: string
  /**
   * How the the flag has been included, either directly or via a custom rule
   */
  type: 'DIRECT' | 'CONDITION'
  /**
   * The identifier for the variation of the flag that should be served to members of the group
   */
  variation: string
}

/**
 * A list of Target Groups (Segments)
 */
export type Segments = Pagination & {
  segments?: Segment[]
}

/**
 * Describe the distribution rule and the variation that should be served to the target
 */
export interface Serve {
  distribution?: Distribution
  variation?: string
}

/**
 * The rule used to determine what variation to serve to a target
 */
export interface ServingRule {
  /**
   * A list of clauses to use in the rule
   */
  clauses: Clause[]
  /**
   * The rules priority relative to other rules.  The rules are evaluated in order with 1 being the highest
   */
  priority: number
  /**
   * The unique identifier for this rule
   */
  ruleId?: string
  serve: Serve
}

/**
 * Indicates if the request was successful or not
 */
export type Status = 'SUCCESS' | 'FAILURE' | 'ERROR'

/**
 * A tag has a name and value
 */
export interface Tag {
  /**
   * The name of the tag
   */
  name: string
  /**
   * The value of the tag
   */
  value?: string
}

/**
 * A Target object
 */
export interface Target {
  /**
   * The account ID that the target belongs to
   */
  account: string
  /**
   * Indicates if this target is anonymous
   */
  anonymous?: boolean
  /**
   * a JSON representation of the attributes for this target
   */
  attributes?: { [key: string]: any }
  /**
   * The date and time in milliseconds when this Target was created
   */
  createdAt?: number
  /**
   * The identifier for the environment that the target belongs to
   */
  environment: string
  /**
   * The unique identifier for this target
   */
  identifier: string
  /**
   * The name of this Target
   */
  name: string
  /**
   * The identifier for the organization that the target belongs to
   */
  org: string
  /**
   * The identifier for the project that this target belongs to
   */
  project: string
  /**
   * A list of Target Groups (Segments) that this Target belongs to
   */
  segments?: Segment[]
}

/**
 * A Target or Target Group (Segments)
 */
export interface TargetAndSegment {
  /**
   * The unique identifier for the target or target group
   */
  identifier?: string
  /**
   * The name of the entity
   */
  name?: string
  /**
   * The type either target or segment (target group)
   */
  type: 'target' | 'segment'
}

/**
 * Details of which Target Groups (Segments) a target is included in or excluded from
 */
export interface TargetDetail {
  /**
   * A list of target groups (segments) that the target is excluded from.
   */
  excludedSegments?: TargetDetailSegment[]
  /**
   * The unique identifier for the target
   */
  identifier: string
  /**
   * A list of target groups (segments) that the target is included in.
   */
  includedSegments?: TargetDetailSegment[]
  /**
   * A list of target groups (segments) that the target is included in via group rules.
   */
  ruleSegments?: TargetDetailSegment[]
}

export interface TargetDetailSegment {
  /**
   * The unique identifier
   */
  identifier?: string
  /**
   * The name
   */
  name?: string
}

/**
 * Target map provides the details of a target that belongs to a flag
 */
export interface TargetMap {
  /**
   * The identifier for the target
   */
  identifier: string
  /**
   * The name of the target
   */
  name: string
}

/**
 * A list of Targets
 */
export type Targets = Pagination & {
  targets?: Target[]
}

/**
 * A list of Target and Target Groups (Segments)
 */
export type TargetsAndSegments = Pagination & {
  entities?: TargetAndSegment[]
}

/**
 * A list of Target and Target Groups (Segments)
 */
export type TargetsAndSegmentsInfo = {
  entities?: TargetAndSegment[]
}

export interface UsageDataDTO {
  /**
   * The number of times the resource has been used
   */
  count?: number
  /**
   * The name of the resource
   */
  displayName?: string
  /**
   * References to who used the resource
   */
  references?: ReferenceDTO[]
}

/**
 * A variation of a flag that can be returned to a target
 */
export interface Variation {
  /**
   * A description of the variation
   */
  description?: string
  /**
   * The unique identifier for the variation
   */
  identifier: string
  /**
   * The user friendly name of the variation
   */
  name?: string
  /**
   * The variation value to serve such as true or false for a boolean flag
   */
  value: string
}

/**
 * A mapping of variations to targets and target groups (segments).  The targets listed here should receive this variation.
 */
export interface VariationMap {
  /**
   * A list of target groups (segments)
   */
  targetSegments?: string[]
  /**
   * A list of target mappings
   */
  targets?: TargetMap[]
  /**
   * The variation identifier
   */
  variation: string
}

/**
 * A variation and the weighting it should receive as part of a percentage rollout
 */
export interface WeightedVariation {
  /**
   * The variation identifier
   */
  variation: string
  /**
   * The weight to be given to the variation in percent
   */
  weight: number
}

export type APIKeyRequestRequestBody = {
  description?: string
  expiredAt?: number
  identifier: string
  name: string
  type: 'Server' | 'Client'
}

export interface APIKeyUpdateRequestRequestBody {
  description?: string
  expiredAt?: number
  name?: string
}

export interface EnvironmentRequestRequestBody {
  description?: string
  identifier: string
  name: string
  project: string
  tags?: Tag[]
}

export type FeatureFlagRequestRequestBody = {
  archived?: boolean
  defaultOffVariation: string
  defaultOnVariation: string
  description?: string
  gitDetails?: GitDetails
  identifier: string
  kind: 'boolean' | 'int' | 'string' | 'json'
  name: string
  owner?: string
  permanent: boolean
  prerequisites?: Prerequisite[]
  project: string
  tags?: Tag[]
  variations: Variation[]
}

export type FeaturePatchRequestRequestBody = GitSyncPatchOperation

export type FeatureYamlRequestRequestBody = FeatureFlagsYaml

export type GitRepoPatchRequestRequestBody = PatchOperation

export interface GitRepoRequestRequestBody {
  autoCommit?: boolean
  branch: string
  filePath: string
  objectId?: string
  repoIdentifier: string
  rootFolder: string
}

export interface ProjectRequestRequestBody {
  description?: string
  identifier: string
  name: string
  tags?: Tag[]
}

export type SegmentPatchRequestRequestBody = GitSyncPatchOperation

export interface SegmentRequestRequestBody {
  environment: string
  excluded?: string[]
  identifier?: string
  included?: string[]
  /**
   * Name of the target segment.
   */
  name: string
  project: string
  /**
   * An array of rules that can cause a user to be included in this segment.
   */
  rules?: Clause[]
  tags?: Tag[]
}

export type TargetPatchRequestRequestBody = PatchOperation

export type TargetRequestRequestBody = Target

/**
 * Created
 */
export type APIKeyResponseResponse = ApiKey

/**
 * OK
 */
export type APIKeysResponseResponse = ApiKeys

/**
 * OK
 */
export interface AuditTrailResponseResponse {
  correlationId?: string
  data?: AuditTrails
  metaData?: { [key: string]: any }
  status?: Status
}

/**
 * OK
 */
export type AvailableFlagResponseResponse = FlagBasicInfos

/**
 * Bad request
 */
export type BadRequestResponse = Error

/**
 * The specified resource already exists
 */
export type ConflictResponse = Error

/**
 * OK
 */
export interface EnvironmentResponseResponse {
  correlationId?: string
  data?: Environment
  metaData?: { [key: string]: any }
  status?: Status
}

/**
 * OK
 */
export interface EnvironmentsResponseResponse {
  correlationId: string
  data: Environments
  metaData?: { [key: string]: any }
  status: Status
}

/**
 * OK
 */
export type FeatureEditResponseResponse = FeatureResponseMetadata

/**
 * OK
 */
export type FeatureEvaluationsResponseResponse = FeatureEvaluations

/**
 * OK
 */
export type FeatureMetricsResponseResponse = FeatureMetrics

/**
 * OK
 */
export type FeatureResponseResponse = Feature

/**
 * OK
 */
export type FeatureYamlResponseResponse = FeatureFlagsYaml

/**
 * OK
 */
export type FeaturesResponseResponse = Features

/**
 * OK
 */
export type GitRepoResponseResponse = GitRepoResp

/**
 * An error with git syncing
 */
export type GitSyncErrorResponse = Error

/**
 * Internal server error
 */
export type InternalServerErrorResponse = Error

/**
 * The specified resource was not found
 */
export type NotFoundResponse = Error

/**
 * OK
 */
export interface ObjectSnapshotResponseResponse {
  correlationId?: string
  data?: ObjectSnapshots
  metaData?: { [key: string]: any }
  status?: Status
}

/**
 * OK
 */
export interface ProjectResponseResponse {
  correlationId?: string
  data?: Project
  metaData?: { [key: string]: any }
  status?: Status
}

/**
 * OK
 */
export interface ProjectsResponseResponse {
  correlationId?: string
  data?: Projects
  metaData?: { [key: string]: any }
  status?: Status
}

/**
 * OK
 */
export type SegmentFlagsResponseResponse = SegmentFlag[]

/**
 * OK
 */
export type SegmentResponseResponse = Segment

/**
 * OK
 */
export type SegmentsResponseResponse = Segments

/**
 * OK
 */
export type TargetAttributesResponse = string[]

/**
 * OK
 */
export type TargetDetailResponseResponse = TargetDetail

/**
 * OK
 */
export type TargetResponseResponse = Target

/**
 * OK
 */
export type TargetSegmentResponseResponse = TargetsAndSegments

/**
 * OK
 */
export type TargetSegmentsInfoResponseResponse = TargetsAndSegmentsInfo

/**
 * OK
 */
export type TargetsResponseResponse = Targets

/**
 * Unauthenticated
 */
export type UnauthenticatedResponse = Error

/**
 * Unauthorized
 */
export type UnauthorizedResponse = Error

export interface GetAllAPIKeysQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Environment Identifier
   */
  environmentIdentifier: string
  /**
   * PageNumber
   */
  pageNumber?: number
  /**
   * PageSize
   */
  pageSize?: number
}

export type GetAllAPIKeysProps = Omit<
  GetProps<
    APIKeysResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllAPIKeysQueryParams,
    void
  >,
  'path'
>

/**
 * Returns API Keys for an Environment
 *
 * Returns all the API Keys for an Environment
 */
export const GetAllAPIKeys = (props: GetAllAPIKeysProps) => (
  <Get<
    APIKeysResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllAPIKeysQueryParams,
    void
  >
    path={`/admin/apikey`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetAllAPIKeysProps = Omit<
  UseGetProps<
    APIKeysResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllAPIKeysQueryParams,
    void
  >,
  'path'
>

/**
 * Returns API Keys for an Environment
 *
 * Returns all the API Keys for an Environment
 */
export const useGetAllAPIKeys = (props: UseGetAllAPIKeysProps) =>
  useGet<
    APIKeysResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllAPIKeysQueryParams,
    void
  >(`/admin/apikey`, { base: getConfig('cf'), ...props })

/**
 * Returns API Keys for an Environment
 *
 * Returns all the API Keys for an Environment
 */
export const getAllAPIKeysPromise = (
  props: GetUsingFetchProps<
    APIKeysResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllAPIKeysQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    APIKeysResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllAPIKeysQueryParams,
    void
  >(getConfig('cf'), `/admin/apikey`, props, signal)

export interface AddAPIKeyQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * Environment Identifier
   */
  environmentIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
}

export type AddAPIKeyProps = Omit<
  MutateProps<
    APIKeyResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    AddAPIKeyQueryParams,
    APIKeyRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Creates an API key for the given Environment
 *
 * Creates an API key for the given Environment
 */
export const AddAPIKey = (props: AddAPIKeyProps) => (
  <Mutate<
    APIKeyResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    AddAPIKeyQueryParams,
    APIKeyRequestRequestBody,
    void
  >
    verb="POST"
    path={`/admin/apikey`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseAddAPIKeyProps = Omit<
  UseMutateProps<
    APIKeyResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    AddAPIKeyQueryParams,
    APIKeyRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Creates an API key for the given Environment
 *
 * Creates an API key for the given Environment
 */
export const useAddAPIKey = (props: UseAddAPIKeyProps) =>
  useMutate<
    APIKeyResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    AddAPIKeyQueryParams,
    APIKeyRequestRequestBody,
    void
  >('POST', `/admin/apikey`, { base: getConfig('cf'), ...props })

/**
 * Creates an API key for the given Environment
 *
 * Creates an API key for the given Environment
 */
export const addAPIKeyPromise = (
  props: MutateUsingFetchProps<
    APIKeyResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    AddAPIKeyQueryParams,
    APIKeyRequestRequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    APIKeyResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    AddAPIKeyQueryParams,
    APIKeyRequestRequestBody,
    void
  >('POST', getConfig('cf'), `/admin/apikey`, props, signal)

export interface DeleteAPIKeyQueryParams {
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Environment Identifier
   */
  environmentIdentifier: string
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
}

export type DeleteAPIKeyProps = Omit<
  MutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteAPIKeyQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Deletes an API Key
 *
 * Deletes an API key for the given identifier
 */
export const DeleteAPIKey = (props: DeleteAPIKeyProps) => (
  <Mutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteAPIKeyQueryParams,
    string,
    void
  >
    verb="DELETE"
    path={`/admin/apikey`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseDeleteAPIKeyProps = Omit<
  UseMutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteAPIKeyQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Deletes an API Key
 *
 * Deletes an API key for the given identifier
 */
export const useDeleteAPIKey = (props: UseDeleteAPIKeyProps) =>
  useMutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteAPIKeyQueryParams,
    string,
    void
  >('DELETE', `/admin/apikey`, { base: getConfig('cf'), ...props })

/**
 * Deletes an API Key
 *
 * Deletes an API key for the given identifier
 */
export const deleteAPIKeyPromise = (
  props: MutateUsingFetchProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteAPIKeyQueryParams,
    string,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteAPIKeyQueryParams,
    string,
    void
  >('DELETE', getConfig('cf'), `/admin/apikey`, props, signal)

export interface GetAPIKeyQueryParams {
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Environment Identifier
   */
  environmentIdentifier: string
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
}

export interface GetAPIKeyPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type GetAPIKeyProps = Omit<
  GetProps<
    APIKeyResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAPIKeyQueryParams,
    GetAPIKeyPathParams
  >,
  'path'
> &
  GetAPIKeyPathParams

/**
 * Returns API keys
 *
 * Returns all the API Keys for the given identifier
 */
export const GetAPIKey = ({ identifier, ...props }: GetAPIKeyProps) => (
  <Get<
    APIKeyResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAPIKeyQueryParams,
    GetAPIKeyPathParams
  >
    path={`/admin/apikey/${identifier}`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetAPIKeyProps = Omit<
  UseGetProps<
    APIKeyResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAPIKeyQueryParams,
    GetAPIKeyPathParams
  >,
  'path'
> &
  GetAPIKeyPathParams

/**
 * Returns API keys
 *
 * Returns all the API Keys for the given identifier
 */
export const useGetAPIKey = ({ identifier, ...props }: UseGetAPIKeyProps) =>
  useGet<
    APIKeyResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAPIKeyQueryParams,
    GetAPIKeyPathParams
  >((paramsInPath: GetAPIKeyPathParams) => `/admin/apikey/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

/**
 * Returns API keys
 *
 * Returns all the API Keys for the given identifier
 */
export const getAPIKeyPromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<
    APIKeyResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAPIKeyQueryParams,
    GetAPIKeyPathParams
  > & {
    /**
     * Unique identifier for the object in the API.
     */
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    APIKeyResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAPIKeyQueryParams,
    GetAPIKeyPathParams
  >(getConfig('cf'), `/admin/apikey/${identifier}`, props, signal)

export interface UpdateAPIKeyQueryParams {
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Environment Identifier
   */
  environmentIdentifier: string
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
}

export interface UpdateAPIKeyPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type UpdateAPIKeyProps = Omit<
  MutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    UpdateAPIKeyQueryParams,
    APIKeyUpdateRequestRequestBody,
    UpdateAPIKeyPathParams
  >,
  'path' | 'verb'
> &
  UpdateAPIKeyPathParams

/**
 * Updates an API Key
 *
 * Updates an API key for the given identifier
 */
export const UpdateAPIKey = ({ identifier, ...props }: UpdateAPIKeyProps) => (
  <Mutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    UpdateAPIKeyQueryParams,
    APIKeyUpdateRequestRequestBody,
    UpdateAPIKeyPathParams
  >
    verb="PUT"
    path={`/admin/apikey/${identifier}`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseUpdateAPIKeyProps = Omit<
  UseMutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    UpdateAPIKeyQueryParams,
    APIKeyUpdateRequestRequestBody,
    UpdateAPIKeyPathParams
  >,
  'path' | 'verb'
> &
  UpdateAPIKeyPathParams

/**
 * Updates an API Key
 *
 * Updates an API key for the given identifier
 */
export const useUpdateAPIKey = ({ identifier, ...props }: UseUpdateAPIKeyProps) =>
  useMutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    UpdateAPIKeyQueryParams,
    APIKeyUpdateRequestRequestBody,
    UpdateAPIKeyPathParams
  >('PUT', (paramsInPath: UpdateAPIKeyPathParams) => `/admin/apikey/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

/**
 * Updates an API Key
 *
 * Updates an API key for the given identifier
 */
export const updateAPIKeyPromise = (
  {
    identifier,
    ...props
  }: MutateUsingFetchProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    UpdateAPIKeyQueryParams,
    APIKeyUpdateRequestRequestBody,
    UpdateAPIKeyPathParams
  > & {
    /**
     * Unique identifier for the object in the API.
     */
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    UpdateAPIKeyQueryParams,
    APIKeyUpdateRequestRequestBody,
    UpdateAPIKeyPathParams
  >('PUT', getConfig('cf'), `/admin/apikey/${identifier}`, props, signal)

export interface GetAuditByParamsQueryParams {
  /**
   * Environment
   */
  environmentIdentifier?: string
  /**
   * Project
   */
  projectIdentifier?: string
  /**
   * Object Type (FeatureActivation Or Segment)
   */
  objectType: 'FeatureActivation' | 'Segment'
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Start Time
   */
  startTime?: number
  /**
   * End Time
   */
  endTime?: number
  /**
   * PageNumber
   */
  pageNumber?: number
  /**
   * PageSize
   */
  pageSize?: number
  /**
   * Actor
   */
  actor?: string
  /**
   * Action
   */
  action?: ('FeatureActivationCreated' | 'SegmentCreated' | 'FeatureActivationPatched')[]
  /**
   * Identifier of the entity
   */
  identifier?: string
  /**
   * SortOrder
   */
  sortOrder?: 'ASC' | 'DESC'
  /**
   * SortByField
   */
  sortByField?: 'executed_on' | 'actor' | 'action'
}

export type GetAuditByParamsProps = Omit<
  GetProps<
    AuditTrailResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | InternalServerErrorResponse,
    GetAuditByParamsQueryParams,
    void
  >,
  'path'
>

/**
 * Returns audit details
 *
 * Returns audit details for the given environment, project, type organization and account
 */
export const GetAuditByParams = (props: GetAuditByParamsProps) => (
  <Get<
    AuditTrailResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | InternalServerErrorResponse,
    GetAuditByParamsQueryParams,
    void
  >
    path={`/admin/audit`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetAuditByParamsProps = Omit<
  UseGetProps<
    AuditTrailResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | InternalServerErrorResponse,
    GetAuditByParamsQueryParams,
    void
  >,
  'path'
>

/**
 * Returns audit details
 *
 * Returns audit details for the given environment, project, type organization and account
 */
export const useGetAuditByParams = (props: UseGetAuditByParamsProps) =>
  useGet<
    AuditTrailResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | InternalServerErrorResponse,
    GetAuditByParamsQueryParams,
    void
  >(`/admin/audit`, { base: getConfig('cf'), ...props })

/**
 * Returns audit details
 *
 * Returns audit details for the given environment, project, type organization and account
 */
export const getAuditByParamsPromise = (
  props: GetUsingFetchProps<
    AuditTrailResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | InternalServerErrorResponse,
    GetAuditByParamsQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    AuditTrailResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | InternalServerErrorResponse,
    GetAuditByParamsQueryParams,
    void
  >(getConfig('cf'), `/admin/audit`, props, signal)

export interface GetAllEnvironmentsQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * PageNumber
   */
  pageNumber?: number
  /**
   * PageSize
   */
  pageSize?: number
  /**
   * SortOrder
   */
  sortOrder?: 'ASCENDING' | 'DESCENDING'
  /**
   * SortByField
   */
  sortByField?: 'name' | 'identifier' | 'archived' | 'kind' | 'modifiedAt'
}

export type GetAllEnvironmentsProps = Omit<
  GetProps<
    EnvironmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllEnvironmentsQueryParams,
    void
  >,
  'path'
>

/**
 * Returns Environment details
 *
 * Returns Environment details for the given Account, Organization and Project
 */
export const GetAllEnvironments = (props: GetAllEnvironmentsProps) => (
  <Get<
    EnvironmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllEnvironmentsQueryParams,
    void
  >
    path={`/admin/environments`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetAllEnvironmentsProps = Omit<
  UseGetProps<
    EnvironmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllEnvironmentsQueryParams,
    void
  >,
  'path'
>

/**
 * Returns Environment details
 *
 * Returns Environment details for the given Account, Organization and Project
 */
export const useGetAllEnvironments = (props: UseGetAllEnvironmentsProps) =>
  useGet<
    EnvironmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllEnvironmentsQueryParams,
    void
  >(`/admin/environments`, { base: getConfig('cf'), ...props })

/**
 * Returns Environment details
 *
 * Returns Environment details for the given Account, Organization and Project
 */
export const getAllEnvironmentsPromise = (
  props: GetUsingFetchProps<
    EnvironmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllEnvironmentsQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    EnvironmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllEnvironmentsQueryParams,
    void
  >(getConfig('cf'), `/admin/environments`, props, signal)

export interface CreateEnvironmentQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
}

export type CreateEnvironmentProps = Omit<
  MutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateEnvironmentQueryParams,
    EnvironmentRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create an Environment.
 *
 * Creates an Environment in the Organization
 */
export const CreateEnvironment = (props: CreateEnvironmentProps) => (
  <Mutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateEnvironmentQueryParams,
    EnvironmentRequestRequestBody,
    void
  >
    verb="POST"
    path={`/admin/environments`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseCreateEnvironmentProps = Omit<
  UseMutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateEnvironmentQueryParams,
    EnvironmentRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create an Environment.
 *
 * Creates an Environment in the Organization
 */
export const useCreateEnvironment = (props: UseCreateEnvironmentProps) =>
  useMutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateEnvironmentQueryParams,
    EnvironmentRequestRequestBody,
    void
  >('POST', `/admin/environments`, { base: getConfig('cf'), ...props })

/**
 * Create an Environment.
 *
 * Creates an Environment in the Organization
 */
export const createEnvironmentPromise = (
  props: MutateUsingFetchProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateEnvironmentQueryParams,
    EnvironmentRequestRequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateEnvironmentQueryParams,
    EnvironmentRequestRequestBody,
    void
  >('POST', getConfig('cf'), `/admin/environments`, props, signal)

export interface DeleteEnvironmentQueryParams {
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
}

export type DeleteEnvironmentProps = Omit<
  MutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteEnvironmentQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete an Environment
 *
 * Delete an Environment in the PRoject
 */
export const DeleteEnvironment = (props: DeleteEnvironmentProps) => (
  <Mutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteEnvironmentQueryParams,
    string,
    void
  >
    verb="DELETE"
    path={`/admin/environments`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseDeleteEnvironmentProps = Omit<
  UseMutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteEnvironmentQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete an Environment
 *
 * Delete an Environment in the PRoject
 */
export const useDeleteEnvironment = (props: UseDeleteEnvironmentProps) =>
  useMutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteEnvironmentQueryParams,
    string,
    void
  >('DELETE', `/admin/environments`, { base: getConfig('cf'), ...props })

/**
 * Delete an Environment
 *
 * Delete an Environment in the PRoject
 */
export const deleteEnvironmentPromise = (
  props: MutateUsingFetchProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteEnvironmentQueryParams,
    string,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteEnvironmentQueryParams,
    string,
    void
  >('DELETE', getConfig('cf'), `/admin/environments`, props, signal)

export interface GetEnvironmentQueryParams {
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
}

export interface GetEnvironmentPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type GetEnvironmentProps = Omit<
  GetProps<
    EnvironmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetEnvironmentQueryParams,
    GetEnvironmentPathParams
  >,
  'path'
> &
  GetEnvironmentPathParams

/**
 * Returns Environment details for the given identifier
 *
 * Returns Environment details for the given Environment Identifier
 */
export const GetEnvironment = ({ identifier, ...props }: GetEnvironmentProps) => (
  <Get<
    EnvironmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetEnvironmentQueryParams,
    GetEnvironmentPathParams
  >
    path={`/admin/environments/${identifier}`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetEnvironmentProps = Omit<
  UseGetProps<
    EnvironmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetEnvironmentQueryParams,
    GetEnvironmentPathParams
  >,
  'path'
> &
  GetEnvironmentPathParams

/**
 * Returns Environment details for the given identifier
 *
 * Returns Environment details for the given Environment Identifier
 */
export const useGetEnvironment = ({ identifier, ...props }: UseGetEnvironmentProps) =>
  useGet<
    EnvironmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetEnvironmentQueryParams,
    GetEnvironmentPathParams
  >((paramsInPath: GetEnvironmentPathParams) => `/admin/environments/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

/**
 * Returns Environment details for the given identifier
 *
 * Returns Environment details for the given Environment Identifier
 */
export const getEnvironmentPromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<
    EnvironmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetEnvironmentQueryParams,
    GetEnvironmentPathParams
  > & {
    /**
     * Unique identifier for the object in the API.
     */
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    EnvironmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetEnvironmentQueryParams,
    GetEnvironmentPathParams
  >(getConfig('cf'), `/admin/environments/${identifier}`, props, signal)

export interface ModifyEnvironmentQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
}

export interface ModifyEnvironmentPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type ModifyEnvironmentProps = Omit<
  MutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyEnvironmentQueryParams,
    EnvironmentRequestRequestBody,
    ModifyEnvironmentPathParams
  >,
  'path' | 'verb'
> &
  ModifyEnvironmentPathParams

/**
 * Updates an Environment
 *
 * Updates an Environment for the given identifier
 */
export const ModifyEnvironment = ({ identifier, ...props }: ModifyEnvironmentProps) => (
  <Mutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyEnvironmentQueryParams,
    EnvironmentRequestRequestBody,
    ModifyEnvironmentPathParams
  >
    verb="PUT"
    path={`/admin/environments/${identifier}`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseModifyEnvironmentProps = Omit<
  UseMutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyEnvironmentQueryParams,
    EnvironmentRequestRequestBody,
    ModifyEnvironmentPathParams
  >,
  'path' | 'verb'
> &
  ModifyEnvironmentPathParams

/**
 * Updates an Environment
 *
 * Updates an Environment for the given identifier
 */
export const useModifyEnvironment = ({ identifier, ...props }: UseModifyEnvironmentProps) =>
  useMutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyEnvironmentQueryParams,
    EnvironmentRequestRequestBody,
    ModifyEnvironmentPathParams
  >('PUT', (paramsInPath: ModifyEnvironmentPathParams) => `/admin/environments/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

/**
 * Updates an Environment
 *
 * Updates an Environment for the given identifier
 */
export const modifyEnvironmentPromise = (
  {
    identifier,
    ...props
  }: MutateUsingFetchProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyEnvironmentQueryParams,
    EnvironmentRequestRequestBody,
    ModifyEnvironmentPathParams
  > & {
    /**
     * Unique identifier for the object in the API.
     */
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyEnvironmentQueryParams,
    EnvironmentRequestRequestBody,
    ModifyEnvironmentPathParams
  >('PUT', getConfig('cf'), `/admin/environments/${identifier}`, props, signal)

export interface GetAllFeaturesQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Environment
   */
  environmentIdentifier?: string
  /**
   * PageNumber
   */
  pageNumber?: number
  /**
   * PageSize
   */
  pageSize?: number
  /**
   * SortOrder
   */
  sortOrder?: 'ASCENDING' | 'DESCENDING'
  /**
   * SortByField
   */
  sortByField?: 'name' | 'identifier' | 'archived' | 'kind' | 'modifiedAt'
  /**
   * Name of the field
   */
  name?: string
  /**
   * Identifier of the field
   */
  identifier?: string
  /**
   * Status of the feature flag
   */
  archived?: boolean
  /**
   * Kind of the feature flag
   */
  kind?: 'json' | 'string' | 'int' | 'boolean'
  /**
   * Identifier of a target
   */
  targetIdentifier?: string
  /**
   * Parameter to indicate if metrics data is requested in response
   */
  metrics?: boolean
  /**
   * Comma separated identifiers for multiple Features
   */
  featureIdentifiers?: string
  /**
   * Comma separated identifiers to exclude from the response
   */
  excludedFeatures?: string
}

export type GetAllFeaturesProps = Omit<
  GetProps<
    FeaturesResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllFeaturesQueryParams,
    void
  >,
  'path'
>

/**
 * Returns all Feature Flags for the project
 *
 * Returns all the Feature Flag details for the given project
 */
export const GetAllFeatures = (props: GetAllFeaturesProps) => (
  <Get<
    FeaturesResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllFeaturesQueryParams,
    void
  >
    path={`/admin/features`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetAllFeaturesProps = Omit<
  UseGetProps<
    FeaturesResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllFeaturesQueryParams,
    void
  >,
  'path'
>

/**
 * Returns all Feature Flags for the project
 *
 * Returns all the Feature Flag details for the given project
 */
export const useGetAllFeatures = (props: UseGetAllFeaturesProps) =>
  useGet<
    FeaturesResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllFeaturesQueryParams,
    void
  >(`/admin/features`, { base: getConfig('cf'), ...props })

/**
 * Returns all Feature Flags for the project
 *
 * Returns all the Feature Flag details for the given project
 */
export const getAllFeaturesPromise = (
  props: GetUsingFetchProps<
    FeaturesResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllFeaturesQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    FeaturesResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllFeaturesQueryParams,
    void
  >(getConfig('cf'), `/admin/features`, props, signal)

export interface CreateFeatureFlagQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
}

export type CreateFeatureFlagProps = Omit<
  MutateProps<
    FeatureEditResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | GitSyncErrorResponse
    | InternalServerErrorResponse,
    CreateFeatureFlagQueryParams,
    FeatureFlagRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Creates a Feature Flag
 *
 * Creates a Feature Flag in the Project
 */
export const CreateFeatureFlag = (props: CreateFeatureFlagProps) => (
  <Mutate<
    FeatureEditResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | GitSyncErrorResponse
    | InternalServerErrorResponse,
    CreateFeatureFlagQueryParams,
    FeatureFlagRequestRequestBody,
    void
  >
    verb="POST"
    path={`/admin/features`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseCreateFeatureFlagProps = Omit<
  UseMutateProps<
    FeatureEditResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | GitSyncErrorResponse
    | InternalServerErrorResponse,
    CreateFeatureFlagQueryParams,
    FeatureFlagRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Creates a Feature Flag
 *
 * Creates a Feature Flag in the Project
 */
export const useCreateFeatureFlag = (props: UseCreateFeatureFlagProps) =>
  useMutate<
    FeatureEditResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | GitSyncErrorResponse
    | InternalServerErrorResponse,
    CreateFeatureFlagQueryParams,
    FeatureFlagRequestRequestBody,
    void
  >('POST', `/admin/features`, { base: getConfig('cf'), ...props })

/**
 * Creates a Feature Flag
 *
 * Creates a Feature Flag in the Project
 */
export const createFeatureFlagPromise = (
  props: MutateUsingFetchProps<
    FeatureEditResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | GitSyncErrorResponse
    | InternalServerErrorResponse,
    CreateFeatureFlagQueryParams,
    FeatureFlagRequestRequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    FeatureEditResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | GitSyncErrorResponse
    | InternalServerErrorResponse,
    CreateFeatureFlagQueryParams,
    FeatureFlagRequestRequestBody,
    void
  >('POST', getConfig('cf'), `/admin/features`, props, signal)

export interface GetFeatureMetricsQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Environment Identifier
   */
  environmentIdentifier: string
  /**
   * Unique feature identifiers
   */
  featureIDs: string[]
}

export type GetFeatureMetricsProps = Omit<
  GetProps<
    FeatureMetricsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureMetricsQueryParams,
    void
  >,
  'path'
>

/**
 * Returns metrics for for a group of Feature Flags
 *
 * Returns metrics such as the variations status for a group of Feature Flags
 */
export const GetFeatureMetrics = (props: GetFeatureMetricsProps) => (
  <Get<
    FeatureMetricsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureMetricsQueryParams,
    void
  >
    path={`/admin/features/metrics`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetFeatureMetricsProps = Omit<
  UseGetProps<
    FeatureMetricsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureMetricsQueryParams,
    void
  >,
  'path'
>

/**
 * Returns metrics for for a group of Feature Flags
 *
 * Returns metrics such as the variations status for a group of Feature Flags
 */
export const useGetFeatureMetrics = (props: UseGetFeatureMetricsProps) =>
  useGet<
    FeatureMetricsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureMetricsQueryParams,
    void
  >(`/admin/features/metrics`, { base: getConfig('cf'), ...props })

/**
 * Returns metrics for for a group of Feature Flags
 *
 * Returns metrics such as the variations status for a group of Feature Flags
 */
export const getFeatureMetricsPromise = (
  props: GetUsingFetchProps<
    FeatureMetricsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureMetricsQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    FeatureMetricsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureMetricsQueryParams,
    void
  >(getConfig('cf'), `/admin/features/metrics`, props, signal)

export interface GetFlagsYamlQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
}

export type GetFlagsYamlProps = Omit<
  GetProps<
    FeatureYamlResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFlagsYamlQueryParams,
    void
  >,
  'path'
>

/**
 * Return Feature Flag details in a YAML format
 *
 * Returns all the Feature Flag details in a YAML format in the Project.
 */
export const GetFlagsYaml = (props: GetFlagsYamlProps) => (
  <Get<
    FeatureYamlResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFlagsYamlQueryParams,
    void
  >
    path={`/admin/features/yaml`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetFlagsYamlProps = Omit<
  UseGetProps<
    FeatureYamlResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFlagsYamlQueryParams,
    void
  >,
  'path'
>

/**
 * Return Feature Flag details in a YAML format
 *
 * Returns all the Feature Flag details in a YAML format in the Project.
 */
export const useGetFlagsYaml = (props: UseGetFlagsYamlProps) =>
  useGet<
    FeatureYamlResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFlagsYamlQueryParams,
    void
  >(`/admin/features/yaml`, { base: getConfig('cf'), ...props })

/**
 * Return Feature Flag details in a YAML format
 *
 * Returns all the Feature Flag details in a YAML format in the Project.
 */
export const getFlagsYamlPromise = (
  props: GetUsingFetchProps<
    FeatureYamlResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFlagsYamlQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    FeatureYamlResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFlagsYamlQueryParams,
    void
  >(getConfig('cf'), `/admin/features/yaml`, props, signal)

export interface UpdateFlagsYamlQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
}

export type UpdateFlagsYamlProps = Omit<
  MutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    UpdateFlagsYamlQueryParams,
    FeatureYamlRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Update YAML file for Feature Flags
 *
 * Update YAML file for the Feature Flags in the project.
 */
export const UpdateFlagsYaml = (props: UpdateFlagsYamlProps) => (
  <Mutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    UpdateFlagsYamlQueryParams,
    FeatureYamlRequestRequestBody,
    void
  >
    verb="PUT"
    path={`/admin/features/yaml`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseUpdateFlagsYamlProps = Omit<
  UseMutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    UpdateFlagsYamlQueryParams,
    FeatureYamlRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Update YAML file for Feature Flags
 *
 * Update YAML file for the Feature Flags in the project.
 */
export const useUpdateFlagsYaml = (props: UseUpdateFlagsYamlProps) =>
  useMutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    UpdateFlagsYamlQueryParams,
    FeatureYamlRequestRequestBody,
    void
  >('PUT', `/admin/features/yaml`, { base: getConfig('cf'), ...props })

/**
 * Update YAML file for Feature Flags
 *
 * Update YAML file for the Feature Flags in the project.
 */
export const updateFlagsYamlPromise = (
  props: MutateUsingFetchProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    UpdateFlagsYamlQueryParams,
    FeatureYamlRequestRequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    UpdateFlagsYamlQueryParams,
    FeatureYamlRequestRequestBody,
    void
  >('PUT', getConfig('cf'), `/admin/features/yaml`, props, signal)

export interface DeleteFeatureFlagQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Git commit message
   */
  commitMsg?: string
}

export type DeleteFeatureFlagProps = Omit<
  MutateProps<
    void,
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | GitSyncErrorResponse
    | InternalServerErrorResponse,
    DeleteFeatureFlagQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete a Feature Flag
 *
 * Delete Feature Flag for the given identifier and account ID
 */
export const DeleteFeatureFlag = (props: DeleteFeatureFlagProps) => (
  <Mutate<
    void,
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | GitSyncErrorResponse
    | InternalServerErrorResponse,
    DeleteFeatureFlagQueryParams,
    string,
    void
  >
    verb="DELETE"
    path={`/admin/features`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseDeleteFeatureFlagProps = Omit<
  UseMutateProps<
    void,
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | GitSyncErrorResponse
    | InternalServerErrorResponse,
    DeleteFeatureFlagQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete a Feature Flag
 *
 * Delete Feature Flag for the given identifier and account ID
 */
export const useDeleteFeatureFlag = (props: UseDeleteFeatureFlagProps) =>
  useMutate<
    void,
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | GitSyncErrorResponse
    | InternalServerErrorResponse,
    DeleteFeatureFlagQueryParams,
    string,
    void
  >('DELETE', `/admin/features`, { base: getConfig('cf'), ...props })

/**
 * Delete a Feature Flag
 *
 * Delete Feature Flag for the given identifier and account ID
 */
export const deleteFeatureFlagPromise = (
  props: MutateUsingFetchProps<
    void,
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | GitSyncErrorResponse
    | InternalServerErrorResponse,
    DeleteFeatureFlagQueryParams,
    string,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    void,
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | GitSyncErrorResponse
    | InternalServerErrorResponse,
    DeleteFeatureFlagQueryParams,
    string,
    void
  >('DELETE', getConfig('cf'), `/admin/features`, props, signal)

export interface GetFeatureFlagQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Environment
   */
  environmentIdentifier?: string
}

export interface GetFeatureFlagPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type GetFeatureFlagProps = Omit<
  GetProps<
    FeatureResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureFlagQueryParams,
    GetFeatureFlagPathParams
  >,
  'path'
> &
  GetFeatureFlagPathParams

/**
 * Returns a Feature Flag
 *
 * Returns details such as Variation name, identifier etc for the given Feature Flag
 */
export const GetFeatureFlag = ({ identifier, ...props }: GetFeatureFlagProps) => (
  <Get<
    FeatureResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureFlagQueryParams,
    GetFeatureFlagPathParams
  >
    path={`/admin/features/${identifier}`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetFeatureFlagProps = Omit<
  UseGetProps<
    FeatureResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureFlagQueryParams,
    GetFeatureFlagPathParams
  >,
  'path'
> &
  GetFeatureFlagPathParams

/**
 * Returns a Feature Flag
 *
 * Returns details such as Variation name, identifier etc for the given Feature Flag
 */
export const useGetFeatureFlag = ({ identifier, ...props }: UseGetFeatureFlagProps) =>
  useGet<
    FeatureResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureFlagQueryParams,
    GetFeatureFlagPathParams
  >((paramsInPath: GetFeatureFlagPathParams) => `/admin/features/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

/**
 * Returns a Feature Flag
 *
 * Returns details such as Variation name, identifier etc for the given Feature Flag
 */
export const getFeatureFlagPromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<
    FeatureResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureFlagQueryParams,
    GetFeatureFlagPathParams
  > & {
    /**
     * Unique identifier for the object in the API.
     */
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    FeatureResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureFlagQueryParams,
    GetFeatureFlagPathParams
  >(getConfig('cf'), `/admin/features/${identifier}`, props, signal)

export interface PatchFeatureQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Environment
   */
  environmentIdentifier?: string
}

export interface PatchFeaturePathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type PatchFeatureProps = Omit<
  MutateProps<
    FeatureEditResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | GitSyncErrorResponse
    | InternalServerErrorResponse,
    PatchFeatureQueryParams,
    FeaturePatchRequestRequestBody,
    PatchFeaturePathParams
  >,
  'path' | 'verb'
> &
  PatchFeaturePathParams

/**
 * Updates a Feature Flag
 *
 * This operation is used to modify a Feature Flag.  The request body can include one or more instructions that can modify
 * flag attributes such as the state (off|on), the variations that are returned and serving rules.
 * For example if you want to turn a flag off you can use this opeartion and send the setFeatureFlagState
 *
 * {
 *   "kind": "setFeatureFlagState",
 *   "parameters": {
 *     "state": "off"
 *   }
 * }
 *
 */
export const PatchFeature = ({ identifier, ...props }: PatchFeatureProps) => (
  <Mutate<
    FeatureEditResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | GitSyncErrorResponse
    | InternalServerErrorResponse,
    PatchFeatureQueryParams,
    FeaturePatchRequestRequestBody,
    PatchFeaturePathParams
  >
    verb="PATCH"
    path={`/admin/features/${identifier}`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UsePatchFeatureProps = Omit<
  UseMutateProps<
    FeatureEditResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | GitSyncErrorResponse
    | InternalServerErrorResponse,
    PatchFeatureQueryParams,
    FeaturePatchRequestRequestBody,
    PatchFeaturePathParams
  >,
  'path' | 'verb'
> &
  PatchFeaturePathParams

/**
 * Updates a Feature Flag
 *
 * This operation is used to modify a Feature Flag.  The request body can include one or more instructions that can modify
 * flag attributes such as the state (off|on), the variations that are returned and serving rules.
 * For example if you want to turn a flag off you can use this opeartion and send the setFeatureFlagState
 *
 * {
 *   "kind": "setFeatureFlagState",
 *   "parameters": {
 *     "state": "off"
 *   }
 * }
 *
 */
export const usePatchFeature = ({ identifier, ...props }: UsePatchFeatureProps) =>
  useMutate<
    FeatureEditResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | GitSyncErrorResponse
    | InternalServerErrorResponse,
    PatchFeatureQueryParams,
    FeaturePatchRequestRequestBody,
    PatchFeaturePathParams
  >('PATCH', (paramsInPath: PatchFeaturePathParams) => `/admin/features/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

/**
 * Updates a Feature Flag
 *
 * This operation is used to modify a Feature Flag.  The request body can include one or more instructions that can modify
 * flag attributes such as the state (off|on), the variations that are returned and serving rules.
 * For example if you want to turn a flag off you can use this opeartion and send the setFeatureFlagState
 *
 * {
 *   "kind": "setFeatureFlagState",
 *   "parameters": {
 *     "state": "off"
 *   }
 * }
 *
 */
export const patchFeaturePromise = (
  {
    identifier,
    ...props
  }: MutateUsingFetchProps<
    FeatureEditResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | GitSyncErrorResponse
    | InternalServerErrorResponse,
    PatchFeatureQueryParams,
    FeaturePatchRequestRequestBody,
    PatchFeaturePathParams
  > & {
    /**
     * Unique identifier for the object in the API.
     */
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    FeatureEditResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | GitSyncErrorResponse
    | InternalServerErrorResponse,
    PatchFeatureQueryParams,
    FeaturePatchRequestRequestBody,
    PatchFeaturePathParams
  >('PATCH', getConfig('cf'), `/admin/features/${identifier}`, props, signal)

export interface GetFeatureEvaluationsQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Environment
   */
  environmentIdentifier?: string
  /**
   * Start Time
   */
  startTime?: number
  /**
   * End Time
   */
  endTime?: number
}

export interface GetFeatureEvaluationsPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type GetFeatureEvaluationsProps = Omit<
  GetProps<
    FeatureEvaluationsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureEvaluationsQueryParams,
    GetFeatureEvaluationsPathParams
  >,
  'path'
> &
  GetFeatureEvaluationsPathParams

/**
 * Retrieve all feature evaluations.
 *
 * Used to retrieve metrics on how often a feature has been evaluated
 */
export const GetFeatureEvaluations = ({ identifier, ...props }: GetFeatureEvaluationsProps) => (
  <Get<
    FeatureEvaluationsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureEvaluationsQueryParams,
    GetFeatureEvaluationsPathParams
  >
    path={`/admin/features/${identifier}/evaluations`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetFeatureEvaluationsProps = Omit<
  UseGetProps<
    FeatureEvaluationsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureEvaluationsQueryParams,
    GetFeatureEvaluationsPathParams
  >,
  'path'
> &
  GetFeatureEvaluationsPathParams

/**
 * Retrieve all feature evaluations.
 *
 * Used to retrieve metrics on how often a feature has been evaluated
 */
export const useGetFeatureEvaluations = ({ identifier, ...props }: UseGetFeatureEvaluationsProps) =>
  useGet<
    FeatureEvaluationsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureEvaluationsQueryParams,
    GetFeatureEvaluationsPathParams
  >((paramsInPath: GetFeatureEvaluationsPathParams) => `/admin/features/${paramsInPath.identifier}/evaluations`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

/**
 * Retrieve all feature evaluations.
 *
 * Used to retrieve metrics on how often a feature has been evaluated
 */
export const getFeatureEvaluationsPromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<
    FeatureEvaluationsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureEvaluationsQueryParams,
    GetFeatureEvaluationsPathParams
  > & {
    /**
     * Unique identifier for the object in the API.
     */
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    FeatureEvaluationsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetFeatureEvaluationsQueryParams,
    GetFeatureEvaluationsPathParams
  >(getConfig('cf'), `/admin/features/${identifier}/evaluations`, props, signal)

export interface GetOSByIDPathParams {
  /**
   * Unique identifiers for the object in the API.
   */
  identifiers: string[]
}

export type GetOSByIDProps = Omit<
  GetProps<
    ObjectSnapshotResponseResponse | void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    void,
    GetOSByIDPathParams
  >,
  'path'
> &
  GetOSByIDPathParams

/**
 * Retrieves snapshot of an object
 *
 * Used to retrieve the JSON body of the object from the object snapshot table
 */
export const GetOSByID = ({ identifiers, ...props }: GetOSByIDProps) => (
  <Get<
    ObjectSnapshotResponseResponse | void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    void,
    GetOSByIDPathParams
  >
    path={`/admin/objects/${identifiers}`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetOSByIDProps = Omit<
  UseGetProps<
    ObjectSnapshotResponseResponse | void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    void,
    GetOSByIDPathParams
  >,
  'path'
> &
  GetOSByIDPathParams

/**
 * Retrieves snapshot of an object
 *
 * Used to retrieve the JSON body of the object from the object snapshot table
 */
export const useGetOSByID = ({ identifiers, ...props }: UseGetOSByIDProps) =>
  useGet<
    ObjectSnapshotResponseResponse | void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    void,
    GetOSByIDPathParams
  >((paramsInPath: GetOSByIDPathParams) => `/admin/objects/${paramsInPath.identifiers}`, {
    base: getConfig('cf'),
    pathParams: { identifiers },
    ...props
  })

/**
 * Retrieves snapshot of an object
 *
 * Used to retrieve the JSON body of the object from the object snapshot table
 */
export const getOSByIDPromise = (
  {
    identifiers,
    ...props
  }: GetUsingFetchProps<
    ObjectSnapshotResponseResponse | void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    void,
    GetOSByIDPathParams
  > & {
    /**
     * Unique identifiers for the object in the API.
     */
    identifiers: string[]
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    ObjectSnapshotResponseResponse | void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    void,
    GetOSByIDPathParams
  >(getConfig('cf'), `/admin/objects/${identifiers}`, props, signal)

export interface GetAllProjectsQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * PageNumber
   */
  pageNumber?: number
  /**
   * PageSize
   */
  pageSize?: number
  /**
   * SortOrder
   */
  sortOrder?: 'ASCENDING' | 'DESCENDING'
  /**
   * SortByField
   */
  sortByField?: 'name' | 'identifier' | 'archived' | 'kind' | 'modifiedAt'
}

export type GetAllProjectsProps = Omit<
  GetProps<
    ProjectsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllProjectsQueryParams,
    void
  >,
  'path'
>

/**
 * List Projects
 *
 * Lists all the Projects in the given Organization
 */
export const GetAllProjects = (props: GetAllProjectsProps) => (
  <Get<
    ProjectsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllProjectsQueryParams,
    void
  >
    path={`/admin/projects`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetAllProjectsProps = Omit<
  UseGetProps<
    ProjectsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllProjectsQueryParams,
    void
  >,
  'path'
>

/**
 * List Projects
 *
 * Lists all the Projects in the given Organization
 */
export const useGetAllProjects = (props: UseGetAllProjectsProps) =>
  useGet<
    ProjectsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllProjectsQueryParams,
    void
  >(`/admin/projects`, { base: getConfig('cf'), ...props })

/**
 * List Projects
 *
 * Lists all the Projects in the given Organization
 */
export const getAllProjectsPromise = (
  props: GetUsingFetchProps<
    ProjectsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllProjectsQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    ProjectsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllProjectsQueryParams,
    void
  >(getConfig('cf'), `/admin/projects`, props, signal)

export interface CreateProjectQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
}

export type CreateProjectProps = Omit<
  MutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateProjectQueryParams,
    ProjectRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create Project.
 *
 * Create a Project in the given Organization
 */
export const CreateProject = (props: CreateProjectProps) => (
  <Mutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateProjectQueryParams,
    ProjectRequestRequestBody,
    void
  >
    verb="POST"
    path={`/admin/projects`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseCreateProjectProps = Omit<
  UseMutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateProjectQueryParams,
    ProjectRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Create Project.
 *
 * Create a Project in the given Organization
 */
export const useCreateProject = (props: UseCreateProjectProps) =>
  useMutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateProjectQueryParams,
    ProjectRequestRequestBody,
    void
  >('POST', `/admin/projects`, { base: getConfig('cf'), ...props })

/**
 * Create Project.
 *
 * Create a Project in the given Organization
 */
export const createProjectPromise = (
  props: MutateUsingFetchProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateProjectQueryParams,
    ProjectRequestRequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateProjectQueryParams,
    ProjectRequestRequestBody,
    void
  >('POST', getConfig('cf'), `/admin/projects`, props, signal)

export interface DeleteProjectQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
}

export type DeleteProjectProps = Omit<
  MutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteProjectQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete a Project
 *
 * Delete a Project in the Organization for the given identifier
 */
export const DeleteProject = (props: DeleteProjectProps) => (
  <Mutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteProjectQueryParams,
    string,
    void
  >
    verb="DELETE"
    path={`/admin/projects`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseDeleteProjectProps = Omit<
  UseMutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteProjectQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Delete a Project
 *
 * Delete a Project in the Organization for the given identifier
 */
export const useDeleteProject = (props: UseDeleteProjectProps) =>
  useMutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteProjectQueryParams,
    string,
    void
  >('DELETE', `/admin/projects`, { base: getConfig('cf'), ...props })

/**
 * Delete a Project
 *
 * Delete a Project in the Organization for the given identifier
 */
export const deleteProjectPromise = (
  props: MutateUsingFetchProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteProjectQueryParams,
    string,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteProjectQueryParams,
    string,
    void
  >('DELETE', getConfig('cf'), `/admin/projects`, props, signal)

export interface GetProjectQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
}

export interface GetProjectPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type GetProjectProps = Omit<
  GetProps<
    ProjectResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetProjectQueryParams,
    GetProjectPathParams
  >,
  'path'
> &
  GetProjectPathParams

/**
 * Returns Project details
 *
 * Returns Project details for the given identifier
 */
export const GetProject = ({ identifier, ...props }: GetProjectProps) => (
  <Get<
    ProjectResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetProjectQueryParams,
    GetProjectPathParams
  >
    path={`/admin/projects/${identifier}`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetProjectProps = Omit<
  UseGetProps<
    ProjectResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetProjectQueryParams,
    GetProjectPathParams
  >,
  'path'
> &
  GetProjectPathParams

/**
 * Returns Project details
 *
 * Returns Project details for the given identifier
 */
export const useGetProject = ({ identifier, ...props }: UseGetProjectProps) =>
  useGet<
    ProjectResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetProjectQueryParams,
    GetProjectPathParams
  >((paramsInPath: GetProjectPathParams) => `/admin/projects/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

/**
 * Returns Project details
 *
 * Returns Project details for the given identifier
 */
export const getProjectPromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<
    ProjectResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetProjectQueryParams,
    GetProjectPathParams
  > & {
    /**
     * Unique identifier for the object in the API.
     */
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    ProjectResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetProjectQueryParams,
    GetProjectPathParams
  >(getConfig('cf'), `/admin/projects/${identifier}`, props, signal)

export interface ModifyProjectQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
}

export interface ModifyProjectPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type ModifyProjectProps = Omit<
  MutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyProjectQueryParams,
    ProjectRequestRequestBody,
    ModifyProjectPathParams
  >,
  'path' | 'verb'
> &
  ModifyProjectPathParams

/**
 * Updates a Project
 *
 * Updates a Project in the Organization for the given identifier
 */
export const ModifyProject = ({ identifier, ...props }: ModifyProjectProps) => (
  <Mutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyProjectQueryParams,
    ProjectRequestRequestBody,
    ModifyProjectPathParams
  >
    verb="PUT"
    path={`/admin/projects/${identifier}`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseModifyProjectProps = Omit<
  UseMutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyProjectQueryParams,
    ProjectRequestRequestBody,
    ModifyProjectPathParams
  >,
  'path' | 'verb'
> &
  ModifyProjectPathParams

/**
 * Updates a Project
 *
 * Updates a Project in the Organization for the given identifier
 */
export const useModifyProject = ({ identifier, ...props }: UseModifyProjectProps) =>
  useMutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyProjectQueryParams,
    ProjectRequestRequestBody,
    ModifyProjectPathParams
  >('PUT', (paramsInPath: ModifyProjectPathParams) => `/admin/projects/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

/**
 * Updates a Project
 *
 * Updates a Project in the Organization for the given identifier
 */
export const modifyProjectPromise = (
  {
    identifier,
    ...props
  }: MutateUsingFetchProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyProjectQueryParams,
    ProjectRequestRequestBody,
    ModifyProjectPathParams
  > & {
    /**
     * Unique identifier for the object in the API.
     */
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyProjectQueryParams,
    ProjectRequestRequestBody,
    ModifyProjectPathParams
  >('PUT', getConfig('cf'), `/admin/projects/${identifier}`, props, signal)

export interface DeleteGitRepoQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
}

export interface DeleteGitRepoPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type DeleteGitRepoProps = Omit<
  MutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteGitRepoQueryParams,
    void,
    DeleteGitRepoPathParams
  >,
  'path' | 'verb'
> &
  DeleteGitRepoPathParams

/**
 * Delete a Git Repo
 *
 * Deletes a Git repo in the Project
 */
export const DeleteGitRepo = ({ identifier, ...props }: DeleteGitRepoProps) => (
  <Mutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteGitRepoQueryParams,
    void,
    DeleteGitRepoPathParams
  >
    verb="DELETE"
    path={`/admin/projects/${identifier}/git_repo`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseDeleteGitRepoProps = Omit<
  UseMutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteGitRepoQueryParams,
    void,
    DeleteGitRepoPathParams
  >,
  'path' | 'verb'
> &
  DeleteGitRepoPathParams

/**
 * Delete a Git Repo
 *
 * Deletes a Git repo in the Project
 */
export const useDeleteGitRepo = ({ identifier, ...props }: UseDeleteGitRepoProps) =>
  useMutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteGitRepoQueryParams,
    void,
    DeleteGitRepoPathParams
  >('DELETE', (paramsInPath: DeleteGitRepoPathParams) => `/admin/projects/${paramsInPath.identifier}/git_repo`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

/**
 * Delete a Git Repo
 *
 * Deletes a Git repo in the Project
 */
export const deleteGitRepoPromise = (
  {
    identifier,
    ...props
  }: MutateUsingFetchProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteGitRepoQueryParams,
    void,
    DeleteGitRepoPathParams
  > & {
    /**
     * Unique identifier for the object in the API.
     */
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteGitRepoQueryParams,
    void,
    DeleteGitRepoPathParams
  >('DELETE', getConfig('cf'), `/admin/projects/${identifier}/git_repo`, props, signal)

export interface GetGitRepoQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
}

export interface GetGitRepoPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type GetGitRepoProps = Omit<
  GetProps<
    GitRepoResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetGitRepoQueryParams,
    GetGitRepoPathParams
  >,
  'path'
> &
  GetGitRepoPathParams

/**
 * Returns Git repo Details
 *
 * Returns Git repo details in a Project
 */
export const GetGitRepo = ({ identifier, ...props }: GetGitRepoProps) => (
  <Get<
    GitRepoResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetGitRepoQueryParams,
    GetGitRepoPathParams
  >
    path={`/admin/projects/${identifier}/git_repo`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetGitRepoProps = Omit<
  UseGetProps<
    GitRepoResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetGitRepoQueryParams,
    GetGitRepoPathParams
  >,
  'path'
> &
  GetGitRepoPathParams

/**
 * Returns Git repo Details
 *
 * Returns Git repo details in a Project
 */
export const useGetGitRepo = ({ identifier, ...props }: UseGetGitRepoProps) =>
  useGet<
    GitRepoResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetGitRepoQueryParams,
    GetGitRepoPathParams
  >((paramsInPath: GetGitRepoPathParams) => `/admin/projects/${paramsInPath.identifier}/git_repo`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

/**
 * Returns Git repo Details
 *
 * Returns Git repo details in a Project
 */
export const getGitRepoPromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<
    GitRepoResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetGitRepoQueryParams,
    GetGitRepoPathParams
  > & {
    /**
     * Unique identifier for the object in the API.
     */
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    GitRepoResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetGitRepoQueryParams,
    GetGitRepoPathParams
  >(getConfig('cf'), `/admin/projects/${identifier}/git_repo`, props, signal)

export interface PatchGitRepoQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
}

export interface PatchGitRepoPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type PatchGitRepoProps = Omit<
  MutateProps<
    GitRepoResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | InternalServerErrorResponse,
    PatchGitRepoQueryParams,
    GitRepoPatchRequestRequestBody,
    PatchGitRepoPathParams
  >,
  'path' | 'verb'
> &
  PatchGitRepoPathParams

/**
 * Updates a Git repo details
 *
 * Updates a Git repo details for the given PRoject identifier and Account ID
 */
export const PatchGitRepo = ({ identifier, ...props }: PatchGitRepoProps) => (
  <Mutate<
    GitRepoResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | InternalServerErrorResponse,
    PatchGitRepoQueryParams,
    GitRepoPatchRequestRequestBody,
    PatchGitRepoPathParams
  >
    verb="PATCH"
    path={`/admin/projects/${identifier}/git_repo`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UsePatchGitRepoProps = Omit<
  UseMutateProps<
    GitRepoResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | InternalServerErrorResponse,
    PatchGitRepoQueryParams,
    GitRepoPatchRequestRequestBody,
    PatchGitRepoPathParams
  >,
  'path' | 'verb'
> &
  PatchGitRepoPathParams

/**
 * Updates a Git repo details
 *
 * Updates a Git repo details for the given PRoject identifier and Account ID
 */
export const usePatchGitRepo = ({ identifier, ...props }: UsePatchGitRepoProps) =>
  useMutate<
    GitRepoResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | InternalServerErrorResponse,
    PatchGitRepoQueryParams,
    GitRepoPatchRequestRequestBody,
    PatchGitRepoPathParams
  >('PATCH', (paramsInPath: PatchGitRepoPathParams) => `/admin/projects/${paramsInPath.identifier}/git_repo`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

/**
 * Updates a Git repo details
 *
 * Updates a Git repo details for the given PRoject identifier and Account ID
 */
export const patchGitRepoPromise = (
  {
    identifier,
    ...props
  }: MutateUsingFetchProps<
    GitRepoResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | InternalServerErrorResponse,
    PatchGitRepoQueryParams,
    GitRepoPatchRequestRequestBody,
    PatchGitRepoPathParams
  > & {
    /**
     * Unique identifier for the object in the API.
     */
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    GitRepoResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | InternalServerErrorResponse,
    PatchGitRepoQueryParams,
    GitRepoPatchRequestRequestBody,
    PatchGitRepoPathParams
  >('PATCH', getConfig('cf'), `/admin/projects/${identifier}/git_repo`, props, signal)

export interface CreateGitRepoQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
}

export interface CreateGitRepoPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type CreateGitRepoProps = Omit<
  MutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateGitRepoQueryParams,
    GitRepoRequestRequestBody,
    CreateGitRepoPathParams
  >,
  'path' | 'verb'
> &
  CreateGitRepoPathParams

/**
 * Adds Git repo details
 *
 * Adds Git repo details to a Project
 */
export const CreateGitRepo = ({ identifier, ...props }: CreateGitRepoProps) => (
  <Mutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateGitRepoQueryParams,
    GitRepoRequestRequestBody,
    CreateGitRepoPathParams
  >
    verb="POST"
    path={`/admin/projects/${identifier}/git_repo`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseCreateGitRepoProps = Omit<
  UseMutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateGitRepoQueryParams,
    GitRepoRequestRequestBody,
    CreateGitRepoPathParams
  >,
  'path' | 'verb'
> &
  CreateGitRepoPathParams

/**
 * Adds Git repo details
 *
 * Adds Git repo details to a Project
 */
export const useCreateGitRepo = ({ identifier, ...props }: UseCreateGitRepoProps) =>
  useMutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateGitRepoQueryParams,
    GitRepoRequestRequestBody,
    CreateGitRepoPathParams
  >('POST', (paramsInPath: CreateGitRepoPathParams) => `/admin/projects/${paramsInPath.identifier}/git_repo`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

/**
 * Adds Git repo details
 *
 * Adds Git repo details to a Project
 */
export const createGitRepoPromise = (
  {
    identifier,
    ...props
  }: MutateUsingFetchProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateGitRepoQueryParams,
    GitRepoRequestRequestBody,
    CreateGitRepoPathParams
  > & {
    /**
     * Unique identifier for the object in the API.
     */
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateGitRepoQueryParams,
    GitRepoRequestRequestBody,
    CreateGitRepoPathParams
  >('POST', getConfig('cf'), `/admin/projects/${identifier}/git_repo`, props, signal)

export interface GetAllSegmentsQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * Environment Identifier
   */
  environmentIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * PageNumber
   */
  pageNumber?: number
  /**
   * PageSize
   */
  pageSize?: number
  /**
   * SortOrder
   */
  sortOrder?: 'ASCENDING' | 'DESCENDING'
  /**
   * SortByField
   */
  sortByField?: 'name' | 'identifier' | 'archived' | 'kind' | 'modifiedAt'
  /**
   * Name of the field
   */
  name?: string
  /**
   * Identifier of the field
   */
  identifier?: string
}

export type GetAllSegmentsProps = Omit<
  GetProps<
    SegmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | InternalServerErrorResponse,
    GetAllSegmentsQueryParams,
    void
  >,
  'path'
>

/**
 * Returns all Target Groups
 *
 * Returns Target Group details for the given account
 */
export const GetAllSegments = (props: GetAllSegmentsProps) => (
  <Get<
    SegmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | InternalServerErrorResponse,
    GetAllSegmentsQueryParams,
    void
  >
    path={`/admin/segments`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetAllSegmentsProps = Omit<
  UseGetProps<
    SegmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | InternalServerErrorResponse,
    GetAllSegmentsQueryParams,
    void
  >,
  'path'
>

/**
 * Returns all Target Groups
 *
 * Returns Target Group details for the given account
 */
export const useGetAllSegments = (props: UseGetAllSegmentsProps) =>
  useGet<
    SegmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | InternalServerErrorResponse,
    GetAllSegmentsQueryParams,
    void
  >(`/admin/segments`, { base: getConfig('cf'), ...props })

/**
 * Returns all Target Groups
 *
 * Returns Target Group details for the given account
 */
export const getAllSegmentsPromise = (
  props: GetUsingFetchProps<
    SegmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | InternalServerErrorResponse,
    GetAllSegmentsQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    SegmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | InternalServerErrorResponse,
    GetAllSegmentsQueryParams,
    void
  >(getConfig('cf'), `/admin/segments`, props, signal)

export interface CreateSegmentQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
}

export type CreateSegmentProps = Omit<
  MutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateSegmentQueryParams,
    SegmentRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Creates a Target Group
 *
 * Creates a Target Group in the given Project
 */
export const CreateSegment = (props: CreateSegmentProps) => (
  <Mutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateSegmentQueryParams,
    SegmentRequestRequestBody,
    void
  >
    verb="POST"
    path={`/admin/segments`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseCreateSegmentProps = Omit<
  UseMutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateSegmentQueryParams,
    SegmentRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Creates a Target Group
 *
 * Creates a Target Group in the given Project
 */
export const useCreateSegment = (props: UseCreateSegmentProps) =>
  useMutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateSegmentQueryParams,
    SegmentRequestRequestBody,
    void
  >('POST', `/admin/segments`, { base: getConfig('cf'), ...props })

/**
 * Creates a Target Group
 *
 * Creates a Target Group in the given Project
 */
export const createSegmentPromise = (
  props: MutateUsingFetchProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateSegmentQueryParams,
    SegmentRequestRequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateSegmentQueryParams,
    SegmentRequestRequestBody,
    void
  >('POST', getConfig('cf'), `/admin/segments`, props, signal)

export interface DeleteSegmentQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Environment Identifier
   */
  environmentIdentifier: string
}

export type DeleteSegmentProps = Omit<
  MutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteSegmentQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Deletes a Target Group
 *
 * Deletes a Target Group for the given ID
 */
export const DeleteSegment = (props: DeleteSegmentProps) => (
  <Mutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteSegmentQueryParams,
    string,
    void
  >
    verb="DELETE"
    path={`/admin/segments`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseDeleteSegmentProps = Omit<
  UseMutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteSegmentQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Deletes a Target Group
 *
 * Deletes a Target Group for the given ID
 */
export const useDeleteSegment = (props: UseDeleteSegmentProps) =>
  useMutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteSegmentQueryParams,
    string,
    void
  >('DELETE', `/admin/segments`, { base: getConfig('cf'), ...props })

/**
 * Deletes a Target Group
 *
 * Deletes a Target Group for the given ID
 */
export const deleteSegmentPromise = (
  props: MutateUsingFetchProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteSegmentQueryParams,
    string,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteSegmentQueryParams,
    string,
    void
  >('DELETE', getConfig('cf'), `/admin/segments`, props, signal)

export interface GetSegmentQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Environment Identifier
   */
  environmentIdentifier: string
}

export interface GetSegmentPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type GetSegmentProps = Omit<
  GetProps<
    SegmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetSegmentQueryParams,
    GetSegmentPathParams
  >,
  'path'
> &
  GetSegmentPathParams

/**
 * Returns Target Group details for the given identifier
 *
 * Returns Target Group details for the given ID
 */
export const GetSegment = ({ identifier, ...props }: GetSegmentProps) => (
  <Get<
    SegmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetSegmentQueryParams,
    GetSegmentPathParams
  >
    path={`/admin/segments/${identifier}`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetSegmentProps = Omit<
  UseGetProps<
    SegmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetSegmentQueryParams,
    GetSegmentPathParams
  >,
  'path'
> &
  GetSegmentPathParams

/**
 * Returns Target Group details for the given identifier
 *
 * Returns Target Group details for the given ID
 */
export const useGetSegment = ({ identifier, ...props }: UseGetSegmentProps) =>
  useGet<
    SegmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetSegmentQueryParams,
    GetSegmentPathParams
  >((paramsInPath: GetSegmentPathParams) => `/admin/segments/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

/**
 * Returns Target Group details for the given identifier
 *
 * Returns Target Group details for the given ID
 */
export const getSegmentPromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<
    SegmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetSegmentQueryParams,
    GetSegmentPathParams
  > & {
    /**
     * Unique identifier for the object in the API.
     */
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    SegmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetSegmentQueryParams,
    GetSegmentPathParams
  >(getConfig('cf'), `/admin/segments/${identifier}`, props, signal)

export interface PatchSegmentQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Environment Identifier
   */
  environmentIdentifier: string
}

export interface PatchSegmentPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type PatchSegmentProps = Omit<
  MutateProps<
    SegmentResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    PatchSegmentQueryParams,
    SegmentPatchRequestRequestBody,
    PatchSegmentPathParams
  >,
  'path' | 'verb'
> &
  PatchSegmentPathParams

/**
 * Updates a Target Group
 *
 * Updates a Target Group for the given identifier
 */
export const PatchSegment = ({ identifier, ...props }: PatchSegmentProps) => (
  <Mutate<
    SegmentResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    PatchSegmentQueryParams,
    SegmentPatchRequestRequestBody,
    PatchSegmentPathParams
  >
    verb="PATCH"
    path={`/admin/segments/${identifier}`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UsePatchSegmentProps = Omit<
  UseMutateProps<
    SegmentResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    PatchSegmentQueryParams,
    SegmentPatchRequestRequestBody,
    PatchSegmentPathParams
  >,
  'path' | 'verb'
> &
  PatchSegmentPathParams

/**
 * Updates a Target Group
 *
 * Updates a Target Group for the given identifier
 */
export const usePatchSegment = ({ identifier, ...props }: UsePatchSegmentProps) =>
  useMutate<
    SegmentResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    PatchSegmentQueryParams,
    SegmentPatchRequestRequestBody,
    PatchSegmentPathParams
  >('PATCH', (paramsInPath: PatchSegmentPathParams) => `/admin/segments/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

/**
 * Updates a Target Group
 *
 * Updates a Target Group for the given identifier
 */
export const patchSegmentPromise = (
  {
    identifier,
    ...props
  }: MutateUsingFetchProps<
    SegmentResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    PatchSegmentQueryParams,
    SegmentPatchRequestRequestBody,
    PatchSegmentPathParams
  > & {
    /**
     * Unique identifier for the object in the API.
     */
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    SegmentResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    PatchSegmentQueryParams,
    SegmentPatchRequestRequestBody,
    PatchSegmentPathParams
  >('PATCH', getConfig('cf'), `/admin/segments/${identifier}`, props, signal)

export interface GetAvailableFlagsForSegmentQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Environment Identifier
   */
  environmentIdentifier: string
  /**
   * PageNumber
   */
  pageNumber?: number
  /**
   * PageSize
   */
  pageSize?: number
  /**
   * SortOrder
   */
  sortOrder?: 'ASCENDING' | 'DESCENDING'
  /**
   * SortByField
   */
  sortByField?: 'name'
  /**
   * Identifier of the feature flag
   */
  flagNameIdentifier?: string
}

export interface GetAvailableFlagsForSegmentPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type GetAvailableFlagsForSegmentProps = Omit<
  GetProps<
    AvailableFlagResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAvailableFlagsForSegmentQueryParams,
    GetAvailableFlagsForSegmentPathParams
  >,
  'path'
> &
  GetAvailableFlagsForSegmentPathParams

/**
 * Returns Feature Flags that are available to be added to the given Target Group
 *
 * Returns the list of Feature Flags that the Target Group can be added to.  This list will exclude any Feature Flag that the Target Group is already part of.
 */
export const GetAvailableFlagsForSegment = ({ identifier, ...props }: GetAvailableFlagsForSegmentProps) => (
  <Get<
    AvailableFlagResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAvailableFlagsForSegmentQueryParams,
    GetAvailableFlagsForSegmentPathParams
  >
    path={`/admin/segments/${identifier}/available_flags`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetAvailableFlagsForSegmentProps = Omit<
  UseGetProps<
    AvailableFlagResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAvailableFlagsForSegmentQueryParams,
    GetAvailableFlagsForSegmentPathParams
  >,
  'path'
> &
  GetAvailableFlagsForSegmentPathParams

/**
 * Returns Feature Flags that are available to be added to the given Target Group
 *
 * Returns the list of Feature Flags that the Target Group can be added to.  This list will exclude any Feature Flag that the Target Group is already part of.
 */
export const useGetAvailableFlagsForSegment = ({ identifier, ...props }: UseGetAvailableFlagsForSegmentProps) =>
  useGet<
    AvailableFlagResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAvailableFlagsForSegmentQueryParams,
    GetAvailableFlagsForSegmentPathParams
  >(
    (paramsInPath: GetAvailableFlagsForSegmentPathParams) =>
      `/admin/segments/${paramsInPath.identifier}/available_flags`,
    { base: getConfig('cf'), pathParams: { identifier }, ...props }
  )

/**
 * Returns Feature Flags that are available to be added to the given Target Group
 *
 * Returns the list of Feature Flags that the Target Group can be added to.  This list will exclude any Feature Flag that the Target Group is already part of.
 */
export const getAvailableFlagsForSegmentPromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<
    AvailableFlagResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAvailableFlagsForSegmentQueryParams,
    GetAvailableFlagsForSegmentPathParams
  > & {
    /**
     * Unique identifier for the object in the API.
     */
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    AvailableFlagResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAvailableFlagsForSegmentQueryParams,
    GetAvailableFlagsForSegmentPathParams
  >(getConfig('cf'), `/admin/segments/${identifier}/available_flags`, props, signal)

export interface GetSegmentFlagsQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Environment Identifier
   */
  environmentIdentifier: string
}

export interface GetSegmentFlagsPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type GetSegmentFlagsProps = Omit<
  GetProps<
    SegmentFlagsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetSegmentFlagsQueryParams,
    GetSegmentFlagsPathParams
  >,
  'path'
> &
  GetSegmentFlagsPathParams

/**
 * Returns Feature Flags in a Target Group
 *
 * Returns the details of a Feature Flag in a Target Group for the given identifier
 */
export const GetSegmentFlags = ({ identifier, ...props }: GetSegmentFlagsProps) => (
  <Get<
    SegmentFlagsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetSegmentFlagsQueryParams,
    GetSegmentFlagsPathParams
  >
    path={`/admin/segments/${identifier}/flags`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetSegmentFlagsProps = Omit<
  UseGetProps<
    SegmentFlagsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetSegmentFlagsQueryParams,
    GetSegmentFlagsPathParams
  >,
  'path'
> &
  GetSegmentFlagsPathParams

/**
 * Returns Feature Flags in a Target Group
 *
 * Returns the details of a Feature Flag in a Target Group for the given identifier
 */
export const useGetSegmentFlags = ({ identifier, ...props }: UseGetSegmentFlagsProps) =>
  useGet<
    SegmentFlagsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetSegmentFlagsQueryParams,
    GetSegmentFlagsPathParams
  >((paramsInPath: GetSegmentFlagsPathParams) => `/admin/segments/${paramsInPath.identifier}/flags`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

/**
 * Returns Feature Flags in a Target Group
 *
 * Returns the details of a Feature Flag in a Target Group for the given identifier
 */
export const getSegmentFlagsPromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<
    SegmentFlagsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetSegmentFlagsQueryParams,
    GetSegmentFlagsPathParams
  > & {
    /**
     * Unique identifier for the object in the API.
     */
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    SegmentFlagsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetSegmentFlagsQueryParams,
    GetSegmentFlagsPathParams
  >(getConfig('cf'), `/admin/segments/${identifier}/flags`, props, signal)

export interface GetAllTargetsQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Environment Identifier
   */
  environmentIdentifier: string
  /**
   * PageNumber
   */
  pageNumber?: number
  /**
   * PageSize
   */
  pageSize?: number
  /**
   * SortOrder
   */
  sortOrder?: 'ASC' | 'DESC'
  /**
   * SortByField
   */
  sortByField?: 'createdAt' | 'name' | 'identifier'
  /**
   * Name of the target
   */
  targetName?: string
  /**
   * Identifier of the target
   */
  targetIdentifier?: string
}

export type GetAllTargetsProps = Omit<
  GetProps<
    TargetsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllTargetsQueryParams,
    void
  >,
  'path'
>

/**
 * Returns all Targets
 *
 * Returns all the Targets for the given Account ID
 */
export const GetAllTargets = (props: GetAllTargetsProps) => (
  <Get<
    TargetsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllTargetsQueryParams,
    void
  >
    path={`/admin/targets`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetAllTargetsProps = Omit<
  UseGetProps<
    TargetsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllTargetsQueryParams,
    void
  >,
  'path'
>

/**
 * Returns all Targets
 *
 * Returns all the Targets for the given Account ID
 */
export const useGetAllTargets = (props: UseGetAllTargetsProps) =>
  useGet<
    TargetsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllTargetsQueryParams,
    void
  >(`/admin/targets`, { base: getConfig('cf'), ...props })

/**
 * Returns all Targets
 *
 * Returns all the Targets for the given Account ID
 */
export const getAllTargetsPromise = (
  props: GetUsingFetchProps<
    TargetsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllTargetsQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    TargetsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllTargetsQueryParams,
    void
  >(getConfig('cf'), `/admin/targets`, props, signal)

export interface CreateTargetQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
}

export type CreateTargetProps = Omit<
  MutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateTargetQueryParams,
    TargetRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Creates a Target
 *
 * Create Targets for the given identifier
 */
export const CreateTarget = (props: CreateTargetProps) => (
  <Mutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateTargetQueryParams,
    TargetRequestRequestBody,
    void
  >
    verb="POST"
    path={`/admin/targets`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseCreateTargetProps = Omit<
  UseMutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateTargetQueryParams,
    TargetRequestRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * Creates a Target
 *
 * Create Targets for the given identifier
 */
export const useCreateTarget = (props: UseCreateTargetProps) =>
  useMutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateTargetQueryParams,
    TargetRequestRequestBody,
    void
  >('POST', `/admin/targets`, { base: getConfig('cf'), ...props })

/**
 * Creates a Target
 *
 * Create Targets for the given identifier
 */
export const createTargetPromise = (
  props: MutateUsingFetchProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateTargetQueryParams,
    TargetRequestRequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    CreateTargetQueryParams,
    TargetRequestRequestBody,
    void
  >('POST', getConfig('cf'), `/admin/targets`, props, signal)

export interface GetTargetsAndSegmentsInfoQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Environment Identifier
   */
  environmentIdentifier: string
  /**
   * Comma separated identifiers for multiple targets
   */
  targets?: string
  /**
   * Comma separated identifiers for multiple Target Groups
   */
  targetGroups?: string
}

export type GetTargetsAndSegmentsInfoProps = Omit<
  GetProps<
    TargetSegmentsInfoResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetsAndSegmentsInfoQueryParams,
    void
  >,
  'path'
>

/**
 * Returns Targets and Target Group details
 *
 * Returns the name of the specified Targets and Target Group
 */
export const GetTargetsAndSegmentsInfo = (props: GetTargetsAndSegmentsInfoProps) => (
  <Get<
    TargetSegmentsInfoResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetsAndSegmentsInfoQueryParams,
    void
  >
    path={`/admin/targets-segments-info/`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetTargetsAndSegmentsInfoProps = Omit<
  UseGetProps<
    TargetSegmentsInfoResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetsAndSegmentsInfoQueryParams,
    void
  >,
  'path'
>

/**
 * Returns Targets and Target Group details
 *
 * Returns the name of the specified Targets and Target Group
 */
export const useGetTargetsAndSegmentsInfo = (props: UseGetTargetsAndSegmentsInfoProps) =>
  useGet<
    TargetSegmentsInfoResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetsAndSegmentsInfoQueryParams,
    void
  >(`/admin/targets-segments-info/`, { base: getConfig('cf'), ...props })

/**
 * Returns Targets and Target Group details
 *
 * Returns the name of the specified Targets and Target Group
 */
export const getTargetsAndSegmentsInfoPromise = (
  props: GetUsingFetchProps<
    TargetSegmentsInfoResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetsAndSegmentsInfoQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    TargetSegmentsInfoResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetsAndSegmentsInfoQueryParams,
    void
  >(getConfig('cf'), `/admin/targets-segments-info/`, props, signal)

export interface GetTargetsAndSegmentsQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Environment Identifier
   */
  environmentIdentifier: string
  /**
   * Identifier of the target or segment
   */
  tsIdentifier?: string
  /**
   * Name of the target or segment
   */
  tsName?: string
  /**
   * SortByField
   */
  sortByField?: 'name' | 'identifier'
  /**
   * SortOrder
   */
  sortOrder?: 'ASC' | 'DESC'
  /**
   * PageNumber
   */
  pageNumber?: number
  /**
   * PageSize
   */
  pageSize?: number
}

export type GetTargetsAndSegmentsProps = Omit<
  GetProps<
    TargetSegmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetsAndSegmentsQueryParams,
    void
  >,
  'path'
>

/**
 * Returns Targets and Segments details for an Environment
 *
 * Returns Targets and Segments details for an Environment with search and sort features.
 */
export const GetTargetsAndSegments = (props: GetTargetsAndSegmentsProps) => (
  <Get<
    TargetSegmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetsAndSegmentsQueryParams,
    void
  >
    path={`/admin/targets-segments/`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetTargetsAndSegmentsProps = Omit<
  UseGetProps<
    TargetSegmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetsAndSegmentsQueryParams,
    void
  >,
  'path'
>

/**
 * Returns Targets and Segments details for an Environment
 *
 * Returns Targets and Segments details for an Environment with search and sort features.
 */
export const useGetTargetsAndSegments = (props: UseGetTargetsAndSegmentsProps) =>
  useGet<
    TargetSegmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetsAndSegmentsQueryParams,
    void
  >(`/admin/targets-segments/`, { base: getConfig('cf'), ...props })

/**
 * Returns Targets and Segments details for an Environment
 *
 * Returns Targets and Segments details for an Environment with search and sort features.
 */
export const getTargetsAndSegmentsPromise = (
  props: GetUsingFetchProps<
    TargetSegmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetsAndSegmentsQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    TargetSegmentResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetsAndSegmentsQueryParams,
    void
  >(getConfig('cf'), `/admin/targets-segments/`, props, signal)

export interface GetAllTargetAttributesQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Environment Identifier
   */
  environmentIdentifier: string
}

export type GetAllTargetAttributesProps = Omit<
  GetProps<
    TargetAttributesResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllTargetAttributesQueryParams,
    void
  >,
  'path'
>

/**
 * Returns Target attributes for an Environment
 *
 * Returns names of the attributes for all the Targets in the specified Environment
 */
export const GetAllTargetAttributes = (props: GetAllTargetAttributesProps) => (
  <Get<
    TargetAttributesResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllTargetAttributesQueryParams,
    void
  >
    path={`/admin/targets/attributes`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetAllTargetAttributesProps = Omit<
  UseGetProps<
    TargetAttributesResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllTargetAttributesQueryParams,
    void
  >,
  'path'
>

/**
 * Returns Target attributes for an Environment
 *
 * Returns names of the attributes for all the Targets in the specified Environment
 */
export const useGetAllTargetAttributes = (props: UseGetAllTargetAttributesProps) =>
  useGet<
    TargetAttributesResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllTargetAttributesQueryParams,
    void
  >(`/admin/targets/attributes`, { base: getConfig('cf'), ...props })

/**
 * Returns Target attributes for an Environment
 *
 * Returns names of the attributes for all the Targets in the specified Environment
 */
export const getAllTargetAttributesPromise = (
  props: GetUsingFetchProps<
    TargetAttributesResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllTargetAttributesQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    TargetAttributesResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetAllTargetAttributesQueryParams,
    void
  >(getConfig('cf'), `/admin/targets/attributes`, props, signal)

export interface UploadTargetsQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Environment Identifier
   */
  environmentIdentifier: string
}

export type UploadTargetsProps = Omit<
  MutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    UploadTargetsQueryParams,
    void,
    void
  >,
  'path' | 'verb'
>

/**
 * Add Target details
 *
 * Add targets by uploading a CSV file
 */
export const UploadTargets = (props: UploadTargetsProps) => (
  <Mutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    UploadTargetsQueryParams,
    void,
    void
  >
    verb="POST"
    path={`/admin/targets/upload`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseUploadTargetsProps = Omit<
  UseMutateProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    UploadTargetsQueryParams,
    void,
    void
  >,
  'path' | 'verb'
>

/**
 * Add Target details
 *
 * Add targets by uploading a CSV file
 */
export const useUploadTargets = (props: UseUploadTargetsProps) =>
  useMutate<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    UploadTargetsQueryParams,
    void,
    void
  >('POST', `/admin/targets/upload`, { base: getConfig('cf'), ...props })

/**
 * Add Target details
 *
 * Add targets by uploading a CSV file
 */
export const uploadTargetsPromise = (
  props: MutateUsingFetchProps<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    UploadTargetsQueryParams,
    void,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    void,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    UploadTargetsQueryParams,
    void,
    void
  >('POST', getConfig('cf'), `/admin/targets/upload`, props, signal)

export interface DeleteTargetQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Environment Identifier
   */
  environmentIdentifier: string
}

export type DeleteTargetProps = Omit<
  MutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteTargetQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Deletes a Target
 *
 * Deletes a Target for the given identifier
 */
export const DeleteTarget = (props: DeleteTargetProps) => (
  <Mutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteTargetQueryParams,
    string,
    void
  >
    verb="DELETE"
    path={`/admin/targets`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseDeleteTargetProps = Omit<
  UseMutateProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteTargetQueryParams,
    string,
    void
  >,
  'path' | 'verb'
>

/**
 * Deletes a Target
 *
 * Deletes a Target for the given identifier
 */
export const useDeleteTarget = (props: UseDeleteTargetProps) =>
  useMutate<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteTargetQueryParams,
    string,
    void
  >('DELETE', `/admin/targets`, { base: getConfig('cf'), ...props })

/**
 * Deletes a Target
 *
 * Deletes a Target for the given identifier
 */
export const deleteTargetPromise = (
  props: MutateUsingFetchProps<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteTargetQueryParams,
    string,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    void,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    DeleteTargetQueryParams,
    string,
    void
  >('DELETE', getConfig('cf'), `/admin/targets`, props, signal)

export interface GetTargetQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Environment Identifier
   */
  environmentIdentifier: string
}

export interface GetTargetPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type GetTargetProps = Omit<
  GetProps<
    TargetResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetQueryParams,
    GetTargetPathParams
  >,
  'path'
> &
  GetTargetPathParams

/**
 * Returns details of a Target
 *
 * Returns details of a Target for the given identifier
 */
export const GetTarget = ({ identifier, ...props }: GetTargetProps) => (
  <Get<
    TargetResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetQueryParams,
    GetTargetPathParams
  >
    path={`/admin/targets/${identifier}`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetTargetProps = Omit<
  UseGetProps<
    TargetResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetQueryParams,
    GetTargetPathParams
  >,
  'path'
> &
  GetTargetPathParams

/**
 * Returns details of a Target
 *
 * Returns details of a Target for the given identifier
 */
export const useGetTarget = ({ identifier, ...props }: UseGetTargetProps) =>
  useGet<
    TargetResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetQueryParams,
    GetTargetPathParams
  >((paramsInPath: GetTargetPathParams) => `/admin/targets/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

/**
 * Returns details of a Target
 *
 * Returns details of a Target for the given identifier
 */
export const getTargetPromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<
    TargetResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetQueryParams,
    GetTargetPathParams
  > & {
    /**
     * Unique identifier for the object in the API.
     */
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    TargetResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetQueryParams,
    GetTargetPathParams
  >(getConfig('cf'), `/admin/targets/${identifier}`, props, signal)

export interface PatchTargetQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Environment Identifier
   */
  environmentIdentifier: string
}

export interface PatchTargetPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type PatchTargetProps = Omit<
  MutateProps<
    TargetResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    PatchTargetQueryParams,
    TargetPatchRequestRequestBody,
    PatchTargetPathParams
  >,
  'path' | 'verb'
> &
  PatchTargetPathParams

/**
 * Updates a Target
 *
 * Updates a Target for the given identifier
 */
export const PatchTarget = ({ identifier, ...props }: PatchTargetProps) => (
  <Mutate<
    TargetResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    PatchTargetQueryParams,
    TargetPatchRequestRequestBody,
    PatchTargetPathParams
  >
    verb="PATCH"
    path={`/admin/targets/${identifier}`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UsePatchTargetProps = Omit<
  UseMutateProps<
    TargetResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    PatchTargetQueryParams,
    TargetPatchRequestRequestBody,
    PatchTargetPathParams
  >,
  'path' | 'verb'
> &
  PatchTargetPathParams

/**
 * Updates a Target
 *
 * Updates a Target for the given identifier
 */
export const usePatchTarget = ({ identifier, ...props }: UsePatchTargetProps) =>
  useMutate<
    TargetResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    PatchTargetQueryParams,
    TargetPatchRequestRequestBody,
    PatchTargetPathParams
  >('PATCH', (paramsInPath: PatchTargetPathParams) => `/admin/targets/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

/**
 * Updates a Target
 *
 * Updates a Target for the given identifier
 */
export const patchTargetPromise = (
  {
    identifier,
    ...props
  }: MutateUsingFetchProps<
    TargetResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    PatchTargetQueryParams,
    TargetPatchRequestRequestBody,
    PatchTargetPathParams
  > & {
    /**
     * Unique identifier for the object in the API.
     */
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    TargetResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    PatchTargetQueryParams,
    TargetPatchRequestRequestBody,
    PatchTargetPathParams
  >('PATCH', getConfig('cf'), `/admin/targets/${identifier}`, props, signal)

export interface ModifyTargetQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Environment Identifier
   */
  environmentIdentifier: string
}

export interface ModifyTargetPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type ModifyTargetProps = Omit<
  MutateProps<
    TargetResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyTargetQueryParams,
    TargetRequestRequestBody,
    ModifyTargetPathParams
  >,
  'path' | 'verb'
> &
  ModifyTargetPathParams

/**
 * Modifies a Target
 *
 * Modifies a Target for the given account identifier
 */
export const ModifyTarget = ({ identifier, ...props }: ModifyTargetProps) => (
  <Mutate<
    TargetResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyTargetQueryParams,
    TargetRequestRequestBody,
    ModifyTargetPathParams
  >
    verb="PUT"
    path={`/admin/targets/${identifier}`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseModifyTargetProps = Omit<
  UseMutateProps<
    TargetResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyTargetQueryParams,
    TargetRequestRequestBody,
    ModifyTargetPathParams
  >,
  'path' | 'verb'
> &
  ModifyTargetPathParams

/**
 * Modifies a Target
 *
 * Modifies a Target for the given account identifier
 */
export const useModifyTarget = ({ identifier, ...props }: UseModifyTargetProps) =>
  useMutate<
    TargetResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyTargetQueryParams,
    TargetRequestRequestBody,
    ModifyTargetPathParams
  >('PUT', (paramsInPath: ModifyTargetPathParams) => `/admin/targets/${paramsInPath.identifier}`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

/**
 * Modifies a Target
 *
 * Modifies a Target for the given account identifier
 */
export const modifyTargetPromise = (
  {
    identifier,
    ...props
  }: MutateUsingFetchProps<
    TargetResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyTargetQueryParams,
    TargetRequestRequestBody,
    ModifyTargetPathParams
  > & {
    /**
     * Unique identifier for the object in the API.
     */
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    TargetResponseResponse,
    | BadRequestResponse
    | UnauthenticatedResponse
    | UnauthorizedResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse,
    ModifyTargetQueryParams,
    TargetRequestRequestBody,
    ModifyTargetPathParams
  >('PUT', getConfig('cf'), `/admin/targets/${identifier}`, props, signal)

export interface GetTargetAvailableSegmentsQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Environment Identifier
   */
  environmentIdentifier: string
  /**
   * PageNumber
   */
  pageNumber?: number
  /**
   * PageSize
   */
  pageSize?: number
  /**
   * SortOrder
   */
  sortOrder?: 'ASCENDING' | 'DESCENDING'
  /**
   * SortByField
   */
  sortByField?: 'name'
  /**
   * Name of the segment
   */
  segmentName?: string
}

export interface GetTargetAvailableSegmentsPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type GetTargetAvailableSegmentsProps = Omit<
  GetProps<
    SegmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetAvailableSegmentsQueryParams,
    GetTargetAvailableSegmentsPathParams
  >,
  'path'
> &
  GetTargetAvailableSegmentsPathParams

/**
 * Returns available Target Group for the given Target
 *
 * Returns the available Target Group details that the Target can be added to.  This list will exclude any Target Group that the Target is already part of.
 */
export const GetTargetAvailableSegments = ({ identifier, ...props }: GetTargetAvailableSegmentsProps) => (
  <Get<
    SegmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetAvailableSegmentsQueryParams,
    GetTargetAvailableSegmentsPathParams
  >
    path={`/admin/targets/${identifier}/available_segments`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetTargetAvailableSegmentsProps = Omit<
  UseGetProps<
    SegmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetAvailableSegmentsQueryParams,
    GetTargetAvailableSegmentsPathParams
  >,
  'path'
> &
  GetTargetAvailableSegmentsPathParams

/**
 * Returns available Target Group for the given Target
 *
 * Returns the available Target Group details that the Target can be added to.  This list will exclude any Target Group that the Target is already part of.
 */
export const useGetTargetAvailableSegments = ({ identifier, ...props }: UseGetTargetAvailableSegmentsProps) =>
  useGet<
    SegmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetAvailableSegmentsQueryParams,
    GetTargetAvailableSegmentsPathParams
  >(
    (paramsInPath: GetTargetAvailableSegmentsPathParams) =>
      `/admin/targets/${paramsInPath.identifier}/available_segments`,
    { base: getConfig('cf'), pathParams: { identifier }, ...props }
  )

/**
 * Returns available Target Group for the given Target
 *
 * Returns the available Target Group details that the Target can be added to.  This list will exclude any Target Group that the Target is already part of.
 */
export const getTargetAvailableSegmentsPromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<
    SegmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetAvailableSegmentsQueryParams,
    GetTargetAvailableSegmentsPathParams
  > & {
    /**
     * Unique identifier for the object in the API.
     */
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    SegmentsResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetAvailableSegmentsQueryParams,
    GetTargetAvailableSegmentsPathParams
  >(getConfig('cf'), `/admin/targets/${identifier}/available_segments`, props, signal)

export interface GetTargetSegmentsQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * Organization Identifier
   */
  orgIdentifier: string
  /**
   * The Project identifier
   */
  projectIdentifier: string
  /**
   * Environment Identifier
   */
  environmentIdentifier: string
}

export interface GetTargetSegmentsPathParams {
  /**
   * Unique identifier for the object in the API.
   */
  identifier: string
}

export type GetTargetSegmentsProps = Omit<
  GetProps<
    TargetDetailResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetSegmentsQueryParams,
    GetTargetSegmentsPathParams
  >,
  'path'
> &
  GetTargetSegmentsPathParams

/**
 * Returns Target Groups for the given Target
 *
 * Returns the Target Groups that the specified Target belongs to.
 */
export const GetTargetSegments = ({ identifier, ...props }: GetTargetSegmentsProps) => (
  <Get<
    TargetDetailResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetSegmentsQueryParams,
    GetTargetSegmentsPathParams
  >
    path={`/admin/targets/${identifier}/segments`}
    base={getConfig('cf')}
    {...props}
  />
)

export type UseGetTargetSegmentsProps = Omit<
  UseGetProps<
    TargetDetailResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetSegmentsQueryParams,
    GetTargetSegmentsPathParams
  >,
  'path'
> &
  GetTargetSegmentsPathParams

/**
 * Returns Target Groups for the given Target
 *
 * Returns the Target Groups that the specified Target belongs to.
 */
export const useGetTargetSegments = ({ identifier, ...props }: UseGetTargetSegmentsProps) =>
  useGet<
    TargetDetailResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetSegmentsQueryParams,
    GetTargetSegmentsPathParams
  >((paramsInPath: GetTargetSegmentsPathParams) => `/admin/targets/${paramsInPath.identifier}/segments`, {
    base: getConfig('cf'),
    pathParams: { identifier },
    ...props
  })

/**
 * Returns Target Groups for the given Target
 *
 * Returns the Target Groups that the specified Target belongs to.
 */
export const getTargetSegmentsPromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<
    TargetDetailResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetSegmentsQueryParams,
    GetTargetSegmentsPathParams
  > & {
    /**
     * Unique identifier for the object in the API.
     */
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    TargetDetailResponseResponse,
    UnauthenticatedResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    GetTargetSegmentsQueryParams,
    GetTargetSegmentsPathParams
  >(getConfig('cf'), `/admin/targets/${identifier}/segments`, props, signal)

export interface GetLicenseUsageQueryParams {
  /**
   * Account Identifier
   */
  accountIdentifier: string
  /**
   * The timestamp of the result.
   */
  timestamp?: number
}

export type GetLicenseUsageProps = Omit<GetProps<CFLicenseUsageDTO, void, GetLicenseUsageQueryParams, void>, 'path'>

/**
 * Find current license usage data by accountIdentifier
 *
 * Query current CF license usage data for an account.
 */
export const GetLicenseUsage = (props: GetLicenseUsageProps) => (
  <Get<CFLicenseUsageDTO, void, GetLicenseUsageQueryParams, void> path={`/usage`} base={getConfig('cf')} {...props} />
)

export type UseGetLicenseUsageProps = Omit<
  UseGetProps<CFLicenseUsageDTO, void, GetLicenseUsageQueryParams, void>,
  'path'
>

/**
 * Find current license usage data by accountIdentifier
 *
 * Query current CF license usage data for an account.
 */
export const useGetLicenseUsage = (props: UseGetLicenseUsageProps) =>
  useGet<CFLicenseUsageDTO, void, GetLicenseUsageQueryParams, void>(`/usage`, { base: getConfig('cf'), ...props })

/**
 * Find current license usage data by accountIdentifier
 *
 * Query current CF license usage data for an account.
 */
export const getLicenseUsagePromise = (
  props: GetUsingFetchProps<CFLicenseUsageDTO, void, GetLicenseUsageQueryParams, void>,
  signal?: RequestInit['signal']
) => getUsingFetch<CFLicenseUsageDTO, void, GetLicenseUsageQueryParams, void>(getConfig('cf'), `/usage`, props, signal)
