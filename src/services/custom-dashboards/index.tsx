/*
 * Copyright 2022 Harness Inc. All rights reserved.
 * Use of this source code is governed by the PolyForm Shield 1.0.0 license
 * that can be found in the licenses directory at the root of this repository, also available at
 * https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt.
 */

/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react'

import { getConfig, getUsingFetch, GetUsingFetchProps, mutateUsingFetch, MutateUsingFetchProps } from '../config'
export const SPEC_VERSION = '1.0.0'
export interface CreateDashboardRequest {
  dashboardId?: number
  description?: string
  folderId: string
  name: string
}

export interface CreateDashboardResponse {
  resource?: number
}

export interface ErrorResponse {
  error?: string
  responseMessages?: string
}

export interface FolderChildren {
  id: string
  name: string
}

export interface FolderModel {
  Children?: FolderChildren
  id: string
  name: string
}

export interface GetFolderResponse {
  resource?: FolderModel[]
  responseMessages?: string
}

export interface UpdateDashboardResponse {
  resource: UpdateDashboardResponseResource
}

export interface UpdateDashboardResponseResource {
  description: string
  id: number
  resourceIdentifier: string
  title: string
}

export interface UpdateDashboardQueryParams {
  accountId: string
}

export type UpdateDashboardProps = Omit<
  MutateProps<UpdateDashboardResponse, unknown, UpdateDashboardQueryParams, CreateDashboardRequest, void>,
  'path' | 'verb'
>

/**
 * Update a dashboards name, tags or folder.
 */
export const UpdateDashboard = (props: UpdateDashboardProps) => (
  <Mutate<UpdateDashboardResponse, unknown, UpdateDashboardQueryParams, CreateDashboardRequest, void>
    verb="PATCH"
    path={`/`}
    base={getConfig('dashboard/')}
    {...props}
  />
)

export type UseUpdateDashboardProps = Omit<
  UseMutateProps<UpdateDashboardResponse, unknown, UpdateDashboardQueryParams, CreateDashboardRequest, void>,
  'path' | 'verb'
>

/**
 * Update a dashboards name, tags or folder.
 */
export const useUpdateDashboard = (props: UseUpdateDashboardProps) =>
  useMutate<UpdateDashboardResponse, unknown, UpdateDashboardQueryParams, CreateDashboardRequest, void>('PATCH', `/`, {
    base: getConfig('dashboard/'),
    ...props
  })

/**
 * Update a dashboards name, tags or folder.
 */
export const updateDashboardPromise = (
  props: MutateUsingFetchProps<
    UpdateDashboardResponse,
    unknown,
    UpdateDashboardQueryParams,
    CreateDashboardRequest,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<UpdateDashboardResponse, unknown, UpdateDashboardQueryParams, CreateDashboardRequest, void>(
    'PATCH',
    getConfig('dashboard/'),
    `/`,
    props,
    signal
  )

export interface GetFolderQueryParams {
  page?: number
  pageSize?: number
  accountId: string
}

export type GetFolderProps = Omit<GetProps<GetFolderResponse, ErrorResponse, GetFolderQueryParams, void>, 'path'>

/**
 * Get a folders details.
 */
export const GetFolder = (props: GetFolderProps) => (
  <Get<GetFolderResponse, ErrorResponse, GetFolderQueryParams, void>
    path={`/folder`}
    base={getConfig('dashboard/')}
    {...props}
  />
)

export type UseGetFolderProps = Omit<UseGetProps<GetFolderResponse, ErrorResponse, GetFolderQueryParams, void>, 'path'>

/**
 * Get a folders details.
 */
export const useGetFolder = (props: UseGetFolderProps) =>
  useGet<GetFolderResponse, ErrorResponse, GetFolderQueryParams, void>(`/folder`, {
    base: getConfig('dashboard/'),
    ...props
  })

/**
 * Get a folders details.
 */
export const getFolderPromise = (
  props: GetUsingFetchProps<GetFolderResponse, ErrorResponse, GetFolderQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<GetFolderResponse, ErrorResponse, GetFolderQueryParams, void>(
    getConfig('dashboard/'),
    `/folder`,
    props,
    signal
  )

export interface CreateDashboardQueryParams {
  accountId: string
}

export type CreateDashboardProps = Omit<
  MutateProps<CreateDashboardResponse, unknown, CreateDashboardQueryParams, CreateDashboardRequest, void>,
  'path' | 'verb'
>

/**
 * Creates a new looker dashboard which will be empty.
 */
export const CreateDashboard = (props: CreateDashboardProps) => (
  <Mutate<CreateDashboardResponse, unknown, CreateDashboardQueryParams, CreateDashboardRequest, void>
    verb="POST"
    path={`/v2/create`}
    base={getConfig('dashboard/')}
    {...props}
  />
)

export type UseCreateDashboardProps = Omit<
  UseMutateProps<CreateDashboardResponse, unknown, CreateDashboardQueryParams, CreateDashboardRequest, void>,
  'path' | 'verb'
>

/**
 * Creates a new looker dashboard which will be empty.
 */
export const useCreateDashboard = (props: UseCreateDashboardProps) =>
  useMutate<CreateDashboardResponse, unknown, CreateDashboardQueryParams, CreateDashboardRequest, void>(
    'POST',
    `/v2/create`,
    { base: getConfig('dashboard/'), ...props }
  )

/**
 * Creates a new looker dashboard which will be empty.
 */
export const createDashboardPromise = (
  props: MutateUsingFetchProps<
    CreateDashboardResponse,
    unknown,
    CreateDashboardQueryParams,
    CreateDashboardRequest,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<CreateDashboardResponse, unknown, CreateDashboardQueryParams, CreateDashboardRequest, void>(
    'POST',
    getConfig('dashboard/'),
    `/v2/create`,
    props,
    signal
  )
