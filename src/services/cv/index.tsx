/*
 * Copyright 2022 Harness Inc. All rights reserved.
 * Use of this source code is governed by the PolyForm Shield 1.0.0 license
 * that can be found in the licenses directory at the root of this repository, also available at
 * https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt.
 */

/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from 'restful-react'

import { getConfig, getUsingFetch, mutateUsingFetch, GetUsingFetchProps, MutateUsingFetchProps } from '../config'
export const SPEC_VERSION = '1.0'
export interface Activity {
  accountId: string
  activityEndTime?: number
  activityName?: string
  activitySourceId?: string
  activityStartTime: number
  analysisStatus?:
    | 'IGNORED'
    | 'NOT_STARTED'
    | 'VERIFICATION_PASSED'
    | 'VERIFICATION_FAILED'
    | 'ERROR'
    | 'ABORTED'
    | 'IN_PROGRESS'
  changeSourceIdentifier?: string
  createdAt?: number
  eventTime?: number
  lastUpdatedAt?: number
  monitoredServiceIdentifier?: string
  orgIdentifier: string
  projectIdentifier: string
  tags?: string[]
  type: 'DEPLOYMENT' | 'CONFIG' | 'KUBERNETES' | 'HARNESS_CD' | 'PAGER_DUTY' | 'HARNESS_CD_CURRENT_GEN'
  uuid?: string
  validUntil?: string
  verificationIteration?: number
  verificationJobInstanceIds?: string[]
  verificationJobRuntimeDetails?: VerificationJobRuntimeDetails[]
  verificationJobs?: VerificationJob[]
  verificationSummary?: ActivityVerificationSummary
}

export interface ActivityVerificationSummary {
  aborted?: number
  aggregatedStatus?:
    | 'IGNORED'
    | 'NOT_STARTED'
    | 'VERIFICATION_PASSED'
    | 'VERIFICATION_FAILED'
    | 'ERROR'
    | 'ABORTED'
    | 'IN_PROGRESS'
  durationMs?: number
  errors?: number
  failed?: number
  notStarted?: number
  passed?: number
  progress?: number
  progressPercentage?: number
  remainingTimeMs?: number
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'HEALTHY' | 'OBSERVE' | 'NEED_ATTENTION' | 'UNHEALTHY'
  startTime?: number
  total?: number
  verficationStatusMap?: {
    [key: string]:
      | 'IGNORED'
      | 'NOT_STARTED'
      | 'VERIFICATION_PASSED'
      | 'VERIFICATION_FAILED'
      | 'ERROR'
      | 'ABORTED'
      | 'IN_PROGRESS'
  }
}

export interface AdditionalInfo {
  type?: 'TEST' | 'CANARY' | 'BLUE_GREEN' | 'HEALTH'
}

export interface AnalysisDTO {
  deploymentVerification?: DeploymentVerificationDTO
  liveMonitoring?: LiveMonitoringDTO
  riskProfile?: RiskProfile
}

export interface AnalysisInput {
  endTime?: number
  startTime?: number
  timeRange?: TimeRange
  verificationTaskId?: string
}

export interface AnalysisResult {
  count?: number
  label?: number
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'HEALTHY' | 'OBSERVE' | 'NEED_ATTENTION' | 'UNHEALTHY'
  riskScore?: number
  tag?: 'KNOWN' | 'UNEXPECTED' | 'UNKNOWN'
}

export interface AnalysisState {
  inputs?: AnalysisInput
  retryCount?: number
  status?: 'CREATED' | 'RUNNING' | 'SUCCESS' | 'RETRY' | 'TRANSITION' | 'IGNORED' | 'TIMEOUT' | 'FAILED' | 'COMPLETED'
  type?:
    | 'CANARY_TIME_SERIES'
    | 'DEPLOYMENT_LOG_ANALYSIS'
    | 'SERVICE_GUARD_LOG_ANALYSIS'
    | 'ACTIVITY_VERIFICATION'
    | 'SERVICE_GUARD_TIME_SERIES'
    | 'TEST_TIME_SERIES'
    | 'DEPLOYMENT_LOG_CLUSTER'
    | 'PRE_DEPLOYMENT_LOG_CLUSTER'
    | 'SERVICE_GUARD_LOG_CLUSTER'
    | 'SERVICE_GUARD_TREND_ANALYSIS'
    | 'SLI_METRIC_ANALYSIS'
}

export interface AnalysisStateMachine {
  accountId?: string
  analysisEndTime?: number
  analysisStartTime?: number
  completedStates?: AnalysisState[]
  createdAt?: number
  currentState?: AnalysisState
  endTime?: number
  lastUpdatedAt?: number
  logLevel?: 'INFO' | 'WARN' | 'ERROR'
  nextAttemptTime?: number
  startTime?: number
  stateMachineIgnoreMinutes: number
  status?: 'CREATED' | 'RUNNING' | 'SUCCESS' | 'RETRY' | 'TRANSITION' | 'IGNORED' | 'TIMEOUT' | 'FAILED' | 'COMPLETED'
  totalRetryCount?: number
  totalRetryCountToBePropagated?: number
  uuid?: string
  validUntil?: string
  verificationTaskId?: string
}

export interface AnalyzedLogDataDTO {
  environmentIdentifier?: string
  logData?: LogData
  orgIdentifier?: string
  projectIdentifier?: string
  serviceIdentifier?: string
}

export interface AnomaliesSummaryDTO {
  logsAnomalies?: number
  timeSeriesAnomalies?: number
  totalAnomalies?: number
}

export type ApiCallLogDTO = CVNGLogDTO & {
  requestTime?: number
  requests?: ApiCallLogDTOField[]
  responseTime?: number
  responses?: ApiCallLogDTOField[]
}

export interface ApiCallLogDTOField {
  name?: string
  type?: 'JSON' | 'XML' | 'NUMBER' | 'URL' | 'TEXT' | 'TIMESTAMP'
  value?: string
}

export interface AppDMetricDefinitions {
  analysis?: AnalysisDTO
  baseFolder?: string
  groupName?: string
  identifier: string
  metricName: string
  metricPath?: string
  riskProfile?: RiskProfile
  sli?: Slidto
}

export interface AppDynamicsApplication {
  id?: number
  name?: string
}

export type AppDynamicsConnectorDTO = ConnectorConfigDTO & {
  accountname: string
  authType?: 'UsernamePassword' | 'ApiClientToken'
  clientId?: string
  clientSecretRef?: string
  controllerUrl: string
  delegateSelectors?: string[]
  passwordRef?: string
  username?: string
}

export interface AppDynamicsFileDefinition {
  name?: string
  type?: 'leaf' | 'folder'
}

export type AppDynamicsHealthSourceSpec = HealthSourceSpec & {
  applicationName?: string
  feature: string
  metricDefinitions?: AppDMetricDefinitions[]
  metricPacks?: MetricPackDTO[]
  tierName?: string
}

export interface AppDynamicsTier {
  id?: number
  name?: string
}

export interface AppdynamicsMetricDataResponse {
  dataPoints?: DataPoint[]
  endTime?: number
  responseStatus?: 'SUCCESS' | 'NO_DATA' | 'FAILED'
  startTime?: number
}

export interface AppdynamicsMetricValueValidationResponse {
  apiResponseStatus?: 'SUCCESS' | 'NO_DATA' | 'FAILED'
  errorMessage?: string
  metricName?: string
  value?: number
}

export interface AppdynamicsValidationResponse {
  metricPackName?: string
  overallStatus?: 'SUCCESS' | 'NO_DATA' | 'FAILED'
  values?: AppdynamicsMetricValueValidationResponse[]
}

export interface ArtifactoryAuthCredentials {
  [key: string]: any
}

export interface ArtifactoryAuthentication {
  spec?: ArtifactoryAuthCredentials
  type: 'UsernamePassword' | 'Anonymous'
}

export type ArtifactoryConnector = ConnectorConfigDTO & {
  artifactoryServerUrl: string
  auth?: ArtifactoryAuthentication
  delegateSelectors?: string[]
}

export type ArtifactoryUsernamePasswordAuth = ArtifactoryAuthCredentials & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export interface AwsCodeCommitAuthenticationDTO {
  spec: AwsCodeCommitCredentialsDTO
  type: 'HTTPS'
}

export type AwsCodeCommitConnectorDTO = ConnectorConfigDTO & {
  authentication: AwsCodeCommitAuthenticationDTO
  delegateSelectors?: string[]
  type: 'Repo' | 'Region'
  url: string
}

export interface AwsCodeCommitCredentialsDTO {
  [key: string]: any
}

export type AwsCodeCommitHttpsCredentialsDTO = AwsCodeCommitCredentialsDTO & {
  spec: AwsCodeCommitHttpsCredentialsSpecDTO
  type: 'AWSCredentials'
}

export interface AwsCodeCommitHttpsCredentialsSpecDTO {
  [key: string]: any
}

export type AwsCodeCommitSecretKeyAccessKeyDTO = AwsCodeCommitHttpsCredentialsSpecDTO & {
  accessKey?: string
  accessKeyRef?: string
  secretKeyRef: string
}

export type AwsConnector = ConnectorConfigDTO & {
  credential: AwsCredential
  delegateSelectors?: string[]
}

export interface AwsCredential {
  crossAccountAccess?: CrossAccountAccess
  spec?: AwsCredentialSpec
  type: 'InheritFromDelegate' | 'ManualConfig' | 'Irsa'
}

export interface AwsCredentialSpec {
  [key: string]: any
}

export interface AwsCurAttributes {
  region?: string
  reportName: string
  s3BucketName: string
  s3Prefix?: string
}

export interface AwsKmsConnectorCredential {
  spec?: AwsKmsCredentialSpec
  type: 'AssumeIAMRole' | 'AssumeSTSRole' | 'ManualConfig'
}

export type AwsKmsConnectorDTO = ConnectorConfigDTO & {
  credential: AwsKmsConnectorCredential
  default?: boolean
  delegateSelectors?: string[]
  kmsArn: string
  region: string
}

export interface AwsKmsCredentialSpec {
  [key: string]: any
}

export type AwsKmsCredentialSpecAssumeIAM = AwsKmsCredentialSpec & {
  delegateSelectors: string[]
}

export type AwsKmsCredentialSpecAssumeSTS = AwsKmsCredentialSpec & {
  assumeStsRoleDuration?: number
  delegateSelectors: string[]
  externalName?: string
  roleArn: string
}

export type AwsKmsCredentialSpecManualConfig = AwsKmsCredentialSpec & {
  accessKey: string
  secretKey: string
}

export type AwsManualConfigSpec = AwsCredentialSpec & {
  accessKey?: string
  accessKeyRef?: string
  secretKeyRef: string
}

export type AwsSMCredentialSpecAssumeIAM = AwsSecretManagerCredentialSpec & { [key: string]: any }

export type AwsSMCredentialSpecAssumeSTS = AwsSecretManagerCredentialSpec & {
  assumeStsRoleDuration?: number
  externalId?: string
  roleArn: string
}

export type AwsSMCredentialSpecManualConfig = AwsSecretManagerCredentialSpec & {
  accessKey: string
  secretKey: string
}

export interface AwsSecretManagerCredential {
  spec?: AwsSecretManagerCredentialSpec
  type: 'AssumeIAMRole' | 'AssumeSTSRole' | 'ManualConfig'
}

export interface AwsSecretManagerCredentialSpec {
  [key: string]: any
}

export type AwsSecretManagerDTO = ConnectorConfigDTO & {
  credential: AwsSecretManagerCredential
  default?: boolean
  delegateSelectors?: string[]
  region: string
  secretNamePrefix?: string
}

export interface AzureAuthCredentialDTO {
  [key: string]: any
}

export interface AzureAuthDTO {
  spec: AzureAuthCredentialDTO
  type: 'Secret' | 'Certificate'
}

export type AzureClientKeyCertDTO = AzureAuthCredentialDTO & {
  certificateRef: string
}

export type AzureClientSecretKeyDTO = AzureAuthCredentialDTO & {
  secretRef: string
}

export type AzureConnector = ConnectorConfigDTO & {
  azureEnvironmentType: 'AZURE' | 'AZURE_US_GOVERNMENT'
  credential: AzureCredential
  delegateSelectors?: string[]
}

export interface AzureCredential {
  spec?: AzureCredentialSpec
  type: 'InheritFromDelegate' | 'ManualConfig'
}

export interface AzureCredentialSpec {
  [key: string]: any
}

export type AzureInheritFromDelegateDetails = AzureCredentialSpec & {
  auth: AzureMSIAuth
}

export type AzureKeyVaultConnectorDTO = ConnectorConfigDTO & {
  azureEnvironmentType?: 'AZURE' | 'AZURE_US_GOVERNMENT'
  clientId: string
  default?: boolean
  delegateSelectors?: string[]
  secretKey: string
  subscription: string
  tenantId: string
  vaultName: string
}

export interface AzureMSIAuth {
  [key: string]: any
}

export type AzureManualDetails = AzureCredentialSpec & {
  applicationId: string
  auth: AzureAuthDTO
  tenantId: string
}

export interface AzureRepoApiAccess {
  spec?: AzureRepoApiAccessSpecDTO
  type: 'Token'
}

export interface AzureRepoApiAccessSpecDTO {
  [key: string]: any
}

export interface AzureRepoAuthentication {
  spec: AzureRepoCredentialsDTO
  type: 'Http' | 'Ssh'
}

export type AzureRepoConnector = ConnectorConfigDTO & {
  apiAccess?: AzureRepoApiAccess
  authentication: AzureRepoAuthentication
  delegateSelectors?: string[]
  type: 'Organization' | 'Repo'
  url: string
  validationRepo?: string
}

export interface AzureRepoCredentialsDTO {
  [key: string]: any
}

export type AzureRepoHttpCredentials = AzureRepoCredentialsDTO & {
  spec: AzureRepoHttpCredentialsSpecDTO
  type: 'UsernameToken'
}

export interface AzureRepoHttpCredentialsSpecDTO {
  [key: string]: any
}

export type AzureRepoSshCredentials = AzureRepoCredentialsDTO & {
  sshKeyRef: string
}

export type AzureRepoTokenSpec = AzureRepoApiAccessSpecDTO & {
  tokenRef: string
}

export type AzureRepoUsernameToken = AzureRepoHttpCredentialsSpecDTO & {
  tokenRef: string
  username?: string
  usernameRef?: string
}

export type AzureSystemAssignedMSIAuth = AzureAuthCredentialDTO & { [key: string]: any }

export type AzureUserAssignedMSIAuth = AzureAuthCredentialDTO & {
  clientId: string
}

export interface BillingExportSpec {
  containerName: string
  directoryName: string
  reportName: string
  storageAccountName: string
  subscriptionId: string
}

export interface BitbucketApiAccess {
  spec: BitbucketApiAccessSpecDTO
  type: 'UsernameToken'
}

export interface BitbucketApiAccessSpecDTO {
  [key: string]: any
}

export interface BitbucketAuthentication {
  spec: BitbucketCredentialsDTO
  type: 'Http' | 'Ssh'
}

export type BitbucketConnector = ConnectorConfigDTO & {
  apiAccess?: BitbucketApiAccess
  authentication: BitbucketAuthentication
  delegateSelectors?: string[]
  type: 'Account' | 'Repo'
  url: string
  validationRepo?: string
}

export interface BitbucketCredentialsDTO {
  [key: string]: any
}

export type BitbucketHttpCredentials = BitbucketCredentialsDTO & {
  spec: BitbucketHttpCredentialsSpecDTO
  type: 'UsernamePassword'
}

export interface BitbucketHttpCredentialsSpecDTO {
  [key: string]: any
}

export type BitbucketSshCredentials = BitbucketCredentialsDTO & {
  sshKeyRef: string
}

export type BitbucketUsernamePassword = BitbucketHttpCredentialsSpecDTO & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export type BitbucketUsernameTokenApiAccess = BitbucketApiAccessSpecDTO & {
  tokenRef: string
  username?: string
  usernameRef?: string
}

export interface BurnRate {
  currentRatePercentage: number
}

export type CEAwsConnector = ConnectorConfigDTO & {
  awsAccountId?: string
  crossAccountAccess: CrossAccountAccess
  curAttributes?: AwsCurAttributes
  featuresEnabled?: ('BILLING' | 'OPTIMIZATION' | 'VISIBILITY')[]
}

export type CEAzureConnector = ConnectorConfigDTO & {
  billingExportSpec?: BillingExportSpec
  featuresEnabled?: ('BILLING' | 'OPTIMIZATION' | 'VISIBILITY')[]
  subscriptionId: string
  tenantId: string
}

export type CEKubernetesClusterConfig = ConnectorConfigDTO & {
  connectorRef: string
  featuresEnabled?: ('BILLING' | 'OPTIMIZATION' | 'VISIBILITY')[]
}

export interface CVConfig {
  accountId: string
  category: 'PERFORMANCE' | 'ERRORS' | 'INFRASTRUCTURE'
  connectorIdentifier: string
  createNextTaskIteration?: number
  createdAt?: number
  demo?: boolean
  deploymentVerificationEnabled?: boolean
  eligibleForDemo?: boolean
  enabled?: boolean
  envIdentifier: string
  firstTimeDataCollectionStartTime?: number
  firstTimeDataCollectionTimeRange?: TimeRange
  fullyQualifiedIdentifier?: string
  identifier: string
  lastUpdatedAt?: number
  liveMonitoringEnabled?: boolean
  monitoredServiceIdentifier?: string
  monitoringSourceName: string
  orgIdentifier: string
  productName?: string
  projectIdentifier: string
  serviceIdentifier: string
  slienabled?: boolean
  type?:
    | 'APP_DYNAMICS'
    | 'SPLUNK'
    | 'STACKDRIVER'
    | 'STACKDRIVER_LOG'
    | 'KUBERNETES'
    | 'NEW_RELIC'
    | 'PROMETHEUS'
    | 'DATADOG_METRICS'
    | 'DATADOG_LOG'
    | 'ERROR_TRACKING'
    | 'DYNATRACE'
    | 'CUSTOM_HEALTH_METRIC'
    | 'CUSTOM_HEALTH_LOG'
  uuid?: string
  verificationType: 'TIME_SERIES' | 'LOG'
}

export interface CVNGLog {
  accountId?: string
  endTime?: number
  lastUpdatedAt?: number
  logRecords?: CVNGLogRecord[]
  logType?: 'ApiCallLog' | 'ExecutionLog'
  startTime?: number
  traceableId?: string
  traceableType?: 'ONBOARDING' | 'VERIFICATION_TASK'
  uuid?: string
}

export interface CVNGLogDTO {
  accountId?: string
  createdAt?: number
  endTime?: number
  startTime?: number
  traceableId?: string
  traceableType?: 'ONBOARDING' | 'VERIFICATION_TASK'
  type?: 'ApiCallLog' | 'ExecutionLog'
}

export interface CVNGLogRecord {
  createdAt?: number
  errorLog?: boolean
}

export interface CVNGStepTask {
  accountId?: string
  activityId?: string
  asyncTaskIteration?: number
  callbackId?: string
  createdAt?: number
  deploymentStartTime?: number
  deploymentTag?: string
  environmentIdentifier?: string
  lastUpdatedAt?: number
  orgIdentifier?: string
  projectIdentifier?: string
  serviceIdentifier?: string
  skip?: boolean
  status?: 'IN_PROGRESS' | 'DONE'
  uuid?: string
  validUntil?: string
  verificationJobInstanceId?: string
}

export type CalenderSLOTargetSpec = SLOTargetSpec & {
  spec: CalenderSpec
  type?: 'Weekly' | 'Monthly' | 'Quarterly'
}

export interface CalenderSpec {
  [key: string]: any
}

export interface CategoryCountDetails {
  count?: number
  countInPrecedingWindow?: number
}

export interface ChangeEventDTO {
  accountId: string
  category?: 'Deployment' | 'Infrastructure' | 'Alert'
  changeSourceIdentifier?: string
  envIdentifier?: string
  environmentName?: string
  eventTime?: number
  id?: string
  metadata: ChangeEventMetadata
  monitoredServiceIdentifier?: string
  name?: string
  orgIdentifier: string
  projectIdentifier: string
  serviceIdentifier?: string
  serviceName?: string
  type?: 'HarnessCDNextGen' | 'PagerDuty' | 'K8sCluster' | 'HarnessCD'
}

export interface ChangeEventMetadata {
  [key: string]: any
}

export interface ChangeSourceDTO {
  category?: 'Deployment' | 'Infrastructure' | 'Alert'
  enabled?: boolean
  identifier?: string
  name?: string
  spec: ChangeSourceSpec
  type?: 'HarnessCDNextGen' | 'PagerDuty' | 'K8sCluster' | 'HarnessCD'
}

export interface ChangeSourceSpec {
  [key: string]: any
}

export interface ChangeSummaryDTO {
  categoryCountMap?: {
    [key: string]: CategoryCountDetails
  }
}

export interface ChangeTimeline {
  categoryTimeline?: {
    [key: string]: TimeRangeDetail[]
  }
}

export interface Cluster {
  label?: number
  text?: string
}

export interface ClusterCoordinates {
  host?: string
  label?: number
  x?: number
  y?: number
}

export interface ClusterSummary {
  clusterType?: 'BASELINE' | 'KNOWN_EVENT' | 'UNEXPECTED_FREQUENCY' | 'UNKNOWN_EVENT'
  count?: number
  label?: number
  risk?: number
  riskLevel?: 'NO_DATA' | 'NO_ANALYSIS' | 'HEALTHY' | 'OBSERVE' | 'NEED_ATTENTION' | 'UNHEALTHY'
  score?: number
  testFrequencyData?: number[]
}

export interface ClusteredLog {
  clusterCount?: number
  clusterLabel?: string
  clusterLevel?: 'L1' | 'L2'
  createdAt?: number
  host?: string
  lastUpdatedAt?: number
  log?: string
  timestamp?: number
  uuid?: string
  validUntil?: string
  verificationTaskId?: string
}

export interface ConnectorConfigDTO {
  [key: string]: any
}

export interface ConnectorInfoDTO {
  description?: string
  identifier: string
  name: string
  orgIdentifier?: string
  projectIdentifier?: string
  spec: ConnectorConfigDTO
  tags?: {
    [key: string]: string
  }
  type:
    | 'K8sCluster'
    | 'Git'
    | 'Splunk'
    | 'AppDynamics'
    | 'Prometheus'
    | 'Dynatrace'
    | 'Vault'
    | 'AzureKeyVault'
    | 'DockerRegistry'
    | 'Local'
    | 'AwsKms'
    | 'GcpKms'
    | 'AwsSecretManager'
    | 'Gcp'
    | 'Aws'
    | 'Azure'
    | 'Artifactory'
    | 'Jira'
    | 'Nexus'
    | 'Github'
    | 'Gitlab'
    | 'Bitbucket'
    | 'Codecommit'
    | 'CEAws'
    | 'CEAzure'
    | 'GcpCloudCost'
    | 'CEK8sCluster'
    | 'HttpHelmRepo'
    | 'NewRelic'
    | 'Datadog'
    | 'SumoLogic'
    | 'PagerDuty'
    | 'CustomHealth'
    | 'ServiceNow'
    | 'ErrorTracking'
    | 'Pdc'
    | 'AzureRepo'
}

export interface ControlClusterSummary {
  controlFrequencyData?: number[]
  label?: number
}

export interface CountServiceDTO {
  allServicesCount?: number
  servicesAtRiskCount?: number
}

export interface CrossAccountAccess {
  crossAccountRoleArn: string
  externalId?: string
}

export type CustomHealthConnectorDTO = ConnectorConfigDTO & {
  baseURL: string
  delegateSelectors?: string[]
  headers?: CustomHealthKeyAndValue[]
  method: 'GET' | 'POST'
  params?: CustomHealthKeyAndValue[]
  validationBody?: string
  validationPath?: string
}

export interface CustomHealthKeyAndValue {
  encryptedValueRef?: SecretRefData
  key: string
  value?: string
  valueEncrypted?: boolean
}

export interface CustomHealthLogDefinition {
  logMessageJsonPath?: string
  queryName?: string
  requestDefinition?: CustomHealthRequestDefinition
  serviceInstanceJsonPath?: string
  timestampJsonPath?: string
}

export interface CustomHealthMetricDefinition {
  analysis?: AnalysisDTO
  groupName?: string
  identifier: string
  metricName: string
  metricResponseMapping?: MetricResponseMapping
  queryType?: 'SERVICE_BASED' | 'HOST_BASED'
  requestDefinition?: CustomHealthRequestDefinition
  riskProfile?: RiskProfile
  sli?: Slidto
}

export interface CustomHealthRequestDefinition {
  endTimeInfo?: TimestampInfo
  method?: 'GET' | 'POST'
  requestBody?: string
  startTimeInfo?: TimestampInfo
  urlPath?: string
}

export interface CustomHealthSampleDataRequest {
  body?: string
  endTime: TimestampInfo
  method: 'GET' | 'POST'
  startTime: TimestampInfo
  urlPath: string
}

export type CustomHealthSourceLogSpec = HealthSourceSpec & {
  logDefinitions?: CustomHealthLogDefinition[]
}

export type CustomHealthSourceMetricSpec = HealthSourceSpec & {
  metricDefinitions?: CustomHealthMetricDefinition[]
}

export interface DataCollectionInfo {
  collectHostData?: boolean
  dataCollectionDsl?: string
  verificationType?: 'TIME_SERIES' | 'LOG'
}

export interface DataCollectionRequest {
  baseUrl?: string
  connectorInfoDTO?: ConnectorInfoDTO
  dsl?: string
  tracingId?: string
  type?:
    | 'SPLUNK_SAVED_SEARCHES'
    | 'SPLUNK_SAMPLE_DATA'
    | 'SPLUNK_LATEST_HISTOGRAM'
    | 'STACKDRIVER_DASHBOARD_LIST'
    | 'STACKDRIVER_DASHBOARD_GET'
    | 'STACKDRIVER_SAMPLE_DATA'
    | 'STACKDRIVER_LOG_SAMPLE_DATA'
    | 'APPDYNAMICS_FETCH_APPS'
    | 'APPDYNAMICS_FETCH_TIERS'
    | 'APPDYNAMICS_GET_METRIC_DATA'
    | 'APPDYNAMICS_GET_SINGLE_METRIC_DATA'
    | 'APPDYNAMICS_FETCH_METRIC_STRUCTURE'
    | 'NEWRELIC_APPS_REQUEST'
    | 'NEWRELIC_VALIDATION_REQUEST'
    | 'PROMETHEUS_METRIC_LIST_GET'
    | 'PROMETHEUS_LABEL_NAMES_GET'
    | 'PROMETHEUS_LABEL_VALUES_GET'
    | 'PROMETHEUS_SAMPLE_DATA'
    | 'PAGERDUTY_SERVICES'
    | 'PAGERDUTY_REGISTER_WEBHOOK'
    | 'PAGERDUTY_DELETE_WEBHOOK'
    | 'DATADOG_DASHBOARD_LIST'
    | 'DATADOG_DASHBOARD_DETAILS'
    | 'DATADOG_METRIC_TAGS'
    | 'DATADOG_ACTIVE_METRICS'
    | 'DATADOG_TIME_SERIES_POINTS'
    | 'DATADOG_LOG_SAMPLE_DATA'
    | 'DATADOG_LOG_INDEXES'
    | 'NEWRELIC_SAMPLE_FETCH_REQUEST'
    | 'SYNC_DATA_COLLECTION'
    | 'CUSTOM_HEALTH_SAMPLE_DATA'
    | 'DYNATRACE_SERVICE_LIST_REQUEST'
    | 'DYNATRACE_SERVICE_DETAILS_REQUEST'
    | 'DYNATRACE_VALIDATION_REQUEST'
    | 'DYNATRACE_SAMPLE_DATA_REQUEST'
    | 'DYNATRACE_METRIC_LIST_REQUEST'
}

export interface DataCollectionTask {
  accountId?: string
  createdAt?: number
  dataCollectionInfo?: DataCollectionInfo
  dataCollectionWorkerId?: string
  endTime?: number
  exception?: string
  lastPickedAt?: number
  lastUpdatedAt?: number
  logLevel?: 'INFO' | 'WARN' | 'ERROR'
  nextTaskId?: string
  retryCount?: number
  stacktrace?: string
  startTime?: number
  status?: 'FAILED' | 'QUEUED' | 'RUNNING' | 'WAITING' | 'EXPIRED' | 'SUCCESS' | 'ABORTED'
  type?: 'SERVICE_GUARD' | 'DEPLOYMENT' | 'SLI'
  uuid?: string
  validAfter?: number
  verificationTaskId?: string
  workerStatusIteration?: number
}

export interface DataCollectionTaskDTO {
  accountId?: string
  dataCollectionInfo?: DataCollectionInfo
  endTime?: number
  startTime?: number
  uuid?: string
  verificationTaskId?: string
}

export interface DataCollectionTaskResult {
  dataCollectionTaskId?: string
  exception?: string
  executionLogs?: ExecutionLog[]
  stacktrace?: string
  status?: 'FAILED' | 'QUEUED' | 'RUNNING' | 'WAITING' | 'EXPIRED' | 'SUCCESS' | 'ABORTED'
}

export interface DataPoint {
  timestamp?: number
  value?: number
}

export interface DataPoints {
  timeStamp?: number
  value?: number
}

export interface DataSet {
  metricName?: string
  timeSeriesQuery?: { [key: string]: any }
}

export type DatadogConnectorDTO = ConnectorConfigDTO & {
  apiKeyRef: string
  applicationKeyRef: string
  delegateSelectors?: string[]
  url: string
}

export interface DatadogDashboardDTO {
  id?: string
  name?: string
  path?: string
}

export interface DatadogDashboardDetail {
  dataSets?: DatadogDataSet[]
  widgetName?: string
}

export interface DatadogDataSet {
  name?: string
  query?: string
}

export type DatadogLogHealthSourceSpec = HealthSourceSpec & {
  feature: string
  queries: QueryDTO[]
}

export interface DatadogMetricHealthDefinition {
  aggregation?: string
  analysis?: AnalysisDTO
  dashboardId?: string
  dashboardName?: string
  groupingQuery?: string
  identifier: string
  isCustomCreatedMetric?: boolean
  isManualQuery?: boolean
  metric?: string
  metricName: string
  metricPath?: string
  metricTags?: string[]
  query?: string
  riskProfile?: RiskProfile
  serviceInstanceIdentifierTag?: string
  sli?: Slidto
}

export type DatadogMetricHealthSourceSpec = HealthSourceSpec & {
  feature: string
  metricDefinitions?: DatadogMetricHealthDefinition[]
}

export interface DemoChangeEventDTO {
  changeSourceIdentifier?: string
  changeSourceType?: 'HarnessCDNextGen' | 'PagerDuty' | 'K8sCluster' | 'HarnessCD'
  monitoredServiceIdentifier?: string
}

export interface DeploymentActivitySummaryDTO {
  deploymentTag?: string
  deploymentVerificationJobInstanceSummary?: DeploymentVerificationJobInstanceSummary
  envIdentifier?: string
  envName?: string
  serviceIdentifier?: string
  serviceName?: string
}

export interface DeploymentLogAnalysisDTO {
  clusterCoordinates?: ClusterCoordinates[]
  clusters?: Cluster[]
  hostSummaries?: HostSummary[]
  resultSummary?: ResultSummary
}

export interface DeploymentTimeSeriesAnalysisDTO {
  hostSummaries?: HostInfo[]
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'HEALTHY' | 'OBSERVE' | 'NEED_ATTENTION' | 'UNHEALTHY'
  score?: number
  transactionMetricSummaries?: TransactionMetricHostData[]
}

export interface DeploymentVerificationDTO {
  enabled?: boolean
  serviceInstanceFieldName?: string
  serviceInstanceMetricPath?: string
}

export interface DeploymentVerificationJobInstanceSummary {
  activityId?: string
  activityStartTime?: number
  additionalInfo?: AdditionalInfo
  durationMs?: number
  environmentName?: string
  errorAnalysisSummary?: ErrorAnalysisSummary
  jobName?: string
  logsAnalysisSummary?: LogsAnalysisSummary
  progressPercentage?: number
  remainingTimeMs?: number
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'HEALTHY' | 'OBSERVE' | 'NEED_ATTENTION' | 'UNHEALTHY'
  startTime?: number
  status?:
    | 'IGNORED'
    | 'NOT_STARTED'
    | 'VERIFICATION_PASSED'
    | 'VERIFICATION_FAILED'
    | 'ERROR'
    | 'ABORTED'
    | 'IN_PROGRESS'
  timeSeriesAnalysisSummary?: TimeSeriesAnalysisSummary
  verificationJobInstanceId?: string
}

export interface DockerAuthCredentialsDTO {
  [key: string]: any
}

export interface DockerAuthenticationDTO {
  spec?: DockerAuthCredentialsDTO
  type: 'UsernamePassword' | 'Anonymous'
}

export type DockerConnectorDTO = ConnectorConfigDTO & {
  auth?: DockerAuthenticationDTO
  delegateSelectors?: string[]
  dockerRegistryUrl: string
  providerType: 'DockerHub' | 'Harbor' | 'Quay' | 'Other'
}

export type DockerUserNamePasswordDTO = DockerAuthCredentialsDTO & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export interface Duration {
  nano?: number
  negative?: boolean
  seconds?: number
  units?: TemporalUnit[]
  zero?: boolean
}

export type DynatraceConnectorDTO = ConnectorConfigDTO & {
  apiTokenRef: string
  delegateSelectors?: string[]
  url: string
}

export type DynatraceHealthSourceSpec = HealthSourceSpec & {
  feature: string
  metricDefinitions?: DynatraceMetricDefinition[]
  metricPacks?: MetricPackDTO[]
  serviceId?: string
  serviceMethodIds?: string[]
  serviceName?: string
}

export interface DynatraceMetricDTO {
  displayName?: string
  metricId?: string
  unit?: string
}

export interface DynatraceMetricDefinition {
  analysis?: AnalysisDTO
  groupName?: string
  identifier: string
  isManualQuery?: boolean
  metricName: string
  metricSelector?: string
  riskProfile?: RiskProfile
  sli?: Slidto
}

export interface DynatraceSampleDataRequestDTO {
  metricSelector?: string
  serviceId?: string
}

export interface DynatraceServiceDTO {
  displayName?: string
  entityId?: string
  serviceMethodIds?: string[]
}

export interface DynatraceValidateDataRequestDTO {
  metricPacks?: MetricPackDTO[]
  serviceMethodsIds?: string[]
}

export interface Edge {
  from?: string
  to?: string
}

export interface EnvironmentResponse {
  createdAt?: number
  environment?: EnvironmentResponseDTO
  lastModifiedAt?: number
}

export interface EnvironmentResponseDTO {
  accountId?: string
  color?: string
  deleted?: boolean
  description?: string
  identifier?: string
  name?: string
  orgIdentifier?: string
  projectIdentifier?: string
  tags?: {
    [key: string]: string
  }
  type?: 'PreProduction' | 'Production'
  version?: number
  yaml?: string
}

export interface Error {
  code?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'COMMNITY_EDITION_NOT_FOUND'
    | 'DEPLOY_MODE_IS_NOT_ON_PREM'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'INVALID_FORMAT'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'REVOKED_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'NG_ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_CREDENTIALS_THIRD_PARTY'
    | 'INVALID_KEY'
    | 'INVALID_CONNECTOR_TYPE'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'USER_GROUP_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'SCHEMA_VALIDATION_FAILED'
    | 'FILTER_CREATION_ERROR'
    | 'INVALID_YAML_ERROR'
    | 'PLAN_CREATION_ERROR'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'EXPIRE_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'IMAGE_NOT_FOUND'
    | 'ILLEGAL_ARGUMENT'
    | 'IMAGE_TAG_NOT_FOUND'
    | 'DELEGATE_NOT_AVAILABLE'
    | 'INVALID_YAML_PAYLOAD'
    | 'AUTHENTICATION_ERROR'
    | 'AUTHORIZATION_ERROR'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'SECRET_NOT_FOUND'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'CYBERARK_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_API_TASK_EXCEPTION'
    | 'KUBERNETES_TASK_EXCEPTION'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'FILE_NOT_FOUND_ERROR'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'TERRAFORM_EXECUTION_ERROR'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'ACCOUNT_DISABLED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'DATA_COLLECTION_ERROR'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
    | 'TEMPLATE_NOT_FOUND'
    | 'AZURE_SERVICE_EXCEPTION'
    | 'AZURE_CLIENT_EXCEPTION'
    | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
    | 'TIMEOUT_ENGINE_EXCEPTION'
    | 'NO_AVAILABLE_DELEGATES'
    | 'NO_INSTALLED_DELEGATES'
    | 'DUPLICATE_DELEGATE_EXCEPTION'
    | 'GCP_MARKETPLACE_EXCEPTION'
    | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
    | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
    | 'OPTIMISTIC_LOCKING_EXCEPTION'
    | 'NG_PIPELINE_EXECUTION_EXCEPTION'
    | 'NG_PIPELINE_CREATE_EXCEPTION'
    | 'RESOURCE_NOT_FOUND_EXCEPTION'
    | 'PMS_INITIALIZE_SDK_EXCEPTION'
    | 'UNEXPECTED_SNIPPET_EXCEPTION'
    | 'UNEXPECTED_SCHEMA_EXCEPTION'
    | 'CONNECTOR_VALIDATION_EXCEPTION'
    | 'TIMESCALE_NOT_AVAILABLE'
    | 'MIGRATION_EXCEPTION'
    | 'REQUEST_PROCESSING_INTERRUPTED'
    | 'SECRET_MANAGER_ID_NOT_FOUND'
    | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
    | 'GCP_SECRET_OPERATION_ERROR'
    | 'GIT_OPERATION_ERROR'
    | 'TASK_FAILURE_ERROR'
    | 'INSTANCE_STATS_PROCESS_ERROR'
    | 'INSTANCE_STATS_MIGRATION_ERROR'
    | 'DEPLOYMENT_MIGRATION_ERROR'
    | 'CG_LICENSE_USAGE_ERROR'
    | 'INSTANCE_STATS_AGGREGATION_ERROR'
    | 'UNRESOLVED_EXPRESSIONS_ERROR'
    | 'KRYO_HANDLER_NOT_FOUND_ERROR'
    | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
    | 'UNEXPECTED_TYPE_ERROR'
    | 'EXCEPTION_HANDLER_NOT_FOUND'
    | 'CONNECTOR_NOT_FOUND_EXCEPTION'
    | 'GCP_SERVER_ERROR'
    | 'HTTP_RESPONSE_EXCEPTION'
    | 'SCM_NOT_FOUND_ERROR'
    | 'SCM_CONFLICT_ERROR'
    | 'SCM_UNPROCESSABLE_ENTITY'
    | 'PROCESS_EXECUTION_EXCEPTION'
    | 'SCM_UNAUTHORIZED'
    | 'SCM_INTERNAL_SERVER_ERROR'
    | 'DATA'
    | 'CONTEXT'
    | 'PR_CREATION_ERROR'
    | 'URL_NOT_REACHABLE'
    | 'URL_NOT_PROVIDED'
    | 'ENGINE_EXPRESSION_EVALUATION_ERROR'
    | 'ENGINE_FUNCTOR_ERROR'
    | 'JIRA_CLIENT_ERROR'
    | 'SCM_NOT_MODIFIED'
    | 'APPROVAL_STEP_NG_ERROR'
    | 'BUCKET_SERVER_ERROR'
    | 'GIT_SYNC_ERROR'
    | 'TEMPLATE_EXCEPTION'
    | 'ENTITY_REFERENCE_EXCEPTION'
    | 'INVALID_INPUT_SET'
    | 'INVALID_OVERLAY_INPUT_SET'
    | 'RESOURCE_ALREADY_EXISTS'
    | 'INVALID_JSON_PAYLOAD'
    | 'POLICY_EVALUATION_FAILURE'
    | 'POLICY_SET_ERROR'
    | 'INVALID_ARTIFACTORY_REGISTRY_REQUEST'
    | 'INVALID_NEXUS_REGISTRY_REQUEST'
    | 'ENTITY_NOT_FOUND'
    | 'INVALID_AZURE_CONTAINER_REGISTRY_REQUEST'
    | 'AZURE_AUTHENTICATION_ERROR'
    | 'AZURE_CONFIG_ERROR'
    | 'DATA_PROCESSING_ERROR'
  correlationId?: string
  detailedMessage?: string
  message?: string
  metadata?: ErrorMetadataDTO
  responseMessages?: ResponseMessage[]
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ErrorAnalysisSummary {
  anomalousClusterCount?: number
  totalClusterCount?: number
}

export interface ErrorMetadataDTO {
  type?: string
}

export type ErrorTrackingConnectorDTO = ConnectorConfigDTO & {
  apiKeyRef: string
  delegateSelectors?: string[]
  url: string
}

export type ErrorTrackingHealthSourceSpec = HealthSourceSpec & {
  feature: string
}

export interface EventCount {
  clusterType?: 'BASELINE' | 'KNOWN_EVENT' | 'UNEXPECTED_FREQUENCY' | 'UNKNOWN_EVENT'
  count?: number
  displayName?: string
}

export interface ExceptionInfo {
  exception?: string
  stackTrace?: string
}

export interface ExecutionLog {
  log?: string
  logLevel?: 'INFO' | 'WARN' | 'ERROR'
}

export type ExecutionLogDTO = CVNGLogDTO & {
  log?: string
  logLevel?: 'INFO' | 'WARN' | 'ERROR'
}

export interface Failure {
  code?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'COMMNITY_EDITION_NOT_FOUND'
    | 'DEPLOY_MODE_IS_NOT_ON_PREM'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'INVALID_FORMAT'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'REVOKED_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'NG_ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_CREDENTIALS_THIRD_PARTY'
    | 'INVALID_KEY'
    | 'INVALID_CONNECTOR_TYPE'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'USER_GROUP_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'SCHEMA_VALIDATION_FAILED'
    | 'FILTER_CREATION_ERROR'
    | 'INVALID_YAML_ERROR'
    | 'PLAN_CREATION_ERROR'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'EXPIRE_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'IMAGE_NOT_FOUND'
    | 'ILLEGAL_ARGUMENT'
    | 'IMAGE_TAG_NOT_FOUND'
    | 'DELEGATE_NOT_AVAILABLE'
    | 'INVALID_YAML_PAYLOAD'
    | 'AUTHENTICATION_ERROR'
    | 'AUTHORIZATION_ERROR'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'SECRET_NOT_FOUND'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'CYBERARK_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_API_TASK_EXCEPTION'
    | 'KUBERNETES_TASK_EXCEPTION'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'FILE_NOT_FOUND_ERROR'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'TERRAFORM_EXECUTION_ERROR'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'ACCOUNT_DISABLED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'DATA_COLLECTION_ERROR'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
    | 'TEMPLATE_NOT_FOUND'
    | 'AZURE_SERVICE_EXCEPTION'
    | 'AZURE_CLIENT_EXCEPTION'
    | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
    | 'TIMEOUT_ENGINE_EXCEPTION'
    | 'NO_AVAILABLE_DELEGATES'
    | 'NO_INSTALLED_DELEGATES'
    | 'DUPLICATE_DELEGATE_EXCEPTION'
    | 'GCP_MARKETPLACE_EXCEPTION'
    | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
    | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
    | 'OPTIMISTIC_LOCKING_EXCEPTION'
    | 'NG_PIPELINE_EXECUTION_EXCEPTION'
    | 'NG_PIPELINE_CREATE_EXCEPTION'
    | 'RESOURCE_NOT_FOUND_EXCEPTION'
    | 'PMS_INITIALIZE_SDK_EXCEPTION'
    | 'UNEXPECTED_SNIPPET_EXCEPTION'
    | 'UNEXPECTED_SCHEMA_EXCEPTION'
    | 'CONNECTOR_VALIDATION_EXCEPTION'
    | 'TIMESCALE_NOT_AVAILABLE'
    | 'MIGRATION_EXCEPTION'
    | 'REQUEST_PROCESSING_INTERRUPTED'
    | 'SECRET_MANAGER_ID_NOT_FOUND'
    | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
    | 'GCP_SECRET_OPERATION_ERROR'
    | 'GIT_OPERATION_ERROR'
    | 'TASK_FAILURE_ERROR'
    | 'INSTANCE_STATS_PROCESS_ERROR'
    | 'INSTANCE_STATS_MIGRATION_ERROR'
    | 'DEPLOYMENT_MIGRATION_ERROR'
    | 'CG_LICENSE_USAGE_ERROR'
    | 'INSTANCE_STATS_AGGREGATION_ERROR'
    | 'UNRESOLVED_EXPRESSIONS_ERROR'
    | 'KRYO_HANDLER_NOT_FOUND_ERROR'
    | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
    | 'UNEXPECTED_TYPE_ERROR'
    | 'EXCEPTION_HANDLER_NOT_FOUND'
    | 'CONNECTOR_NOT_FOUND_EXCEPTION'
    | 'GCP_SERVER_ERROR'
    | 'HTTP_RESPONSE_EXCEPTION'
    | 'SCM_NOT_FOUND_ERROR'
    | 'SCM_CONFLICT_ERROR'
    | 'SCM_UNPROCESSABLE_ENTITY'
    | 'PROCESS_EXECUTION_EXCEPTION'
    | 'SCM_UNAUTHORIZED'
    | 'SCM_INTERNAL_SERVER_ERROR'
    | 'DATA'
    | 'CONTEXT'
    | 'PR_CREATION_ERROR'
    | 'URL_NOT_REACHABLE'
    | 'URL_NOT_PROVIDED'
    | 'ENGINE_EXPRESSION_EVALUATION_ERROR'
    | 'ENGINE_FUNCTOR_ERROR'
    | 'JIRA_CLIENT_ERROR'
    | 'SCM_NOT_MODIFIED'
    | 'APPROVAL_STEP_NG_ERROR'
    | 'BUCKET_SERVER_ERROR'
    | 'GIT_SYNC_ERROR'
    | 'TEMPLATE_EXCEPTION'
    | 'ENTITY_REFERENCE_EXCEPTION'
    | 'INVALID_INPUT_SET'
    | 'INVALID_OVERLAY_INPUT_SET'
    | 'RESOURCE_ALREADY_EXISTS'
    | 'INVALID_JSON_PAYLOAD'
    | 'POLICY_EVALUATION_FAILURE'
    | 'POLICY_SET_ERROR'
    | 'INVALID_ARTIFACTORY_REGISTRY_REQUEST'
    | 'INVALID_NEXUS_REGISTRY_REQUEST'
    | 'ENTITY_NOT_FOUND'
    | 'INVALID_AZURE_CONTAINER_REGISTRY_REQUEST'
    | 'AZURE_AUTHENTICATION_ERROR'
    | 'AZURE_CONFIG_ERROR'
    | 'DATA_PROCESSING_ERROR'
  correlationId?: string
  errors?: ValidationError[]
  message?: string
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface Frequency {
  count?: number
  riskScore?: number
  timestamp?: number
}

export interface FrequencyDTO {
  count?: number
  timestamp?: number
}

export interface GcpBillingExportSpec {
  datasetId: string
  tableId: string
}

export type GcpCloudCostConnector = ConnectorConfigDTO & {
  billingExportSpec?: GcpBillingExportSpec
  featuresEnabled?: ('BILLING' | 'OPTIMIZATION' | 'VISIBILITY')[]
  projectId: string
  serviceAccountEmail: string
}

export type GcpConnector = ConnectorConfigDTO & {
  credential: GcpConnectorCredential
  delegateSelectors?: string[]
}

export interface GcpConnectorCredential {
  spec?: GcpCredentialSpec
  type: 'InheritFromDelegate' | 'ManualConfig'
}

export interface GcpCredentialSpec {
  [key: string]: any
}

export type GcpKmsConnectorDTO = ConnectorConfigDTO & {
  credentials: string
  default?: boolean
  delegateSelectors?: string[]
  keyName: string
  keyRing: string
  projectId: string
  region: string
}

export type GcpManualDetails = GcpCredentialSpec & {
  secretKeyRef: string
}

export interface GitAuthenticationDTO {
  [key: string]: any
}

export type GitConfigDTO = ConnectorConfigDTO & {
  branchName?: string
  connectionType: 'Account' | 'Repo'
  delegateSelectors?: string[]
  executeOnDelegate?: boolean
  spec: GitAuthenticationDTO
  type: 'Http' | 'Ssh'
  url: string
  validationRepo?: string
}

export type GitHTTPAuthenticationDTO = GitAuthenticationDTO & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export type GitSSHAuthenticationDTO = GitAuthenticationDTO & {
  sshKeyRef: string
}

export interface GithubApiAccess {
  spec?: GithubApiAccessSpecDTO
  type: 'GithubApp' | 'Token'
}

export interface GithubApiAccessSpecDTO {
  [key: string]: any
}

export type GithubAppSpec = GithubApiAccessSpecDTO & {
  applicationId: string
  installationId: string
  privateKeyRef: string
}

export interface GithubAuthentication {
  spec: GithubCredentialsDTO
  type: 'Http' | 'Ssh'
}

export type GithubConnector = ConnectorConfigDTO & {
  apiAccess?: GithubApiAccess
  authentication: GithubAuthentication
  delegateSelectors?: string[]
  executeOnDelegate?: boolean
  type: 'Account' | 'Repo'
  url: string
  validationRepo?: string
}

export interface GithubCredentialsDTO {
  [key: string]: any
}

export type GithubHttpCredentials = GithubCredentialsDTO & {
  spec: GithubHttpCredentialsSpecDTO
  type: 'UsernamePassword' | 'UsernameToken'
}

export interface GithubHttpCredentialsSpecDTO {
  [key: string]: any
}

export type GithubSshCredentials = GithubCredentialsDTO & {
  sshKeyRef: string
}

export type GithubTokenSpec = GithubApiAccessSpecDTO & {
  tokenRef: string
}

export type GithubUsernamePassword = GithubHttpCredentialsSpecDTO & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export type GithubUsernameToken = GithubHttpCredentialsSpecDTO & {
  tokenRef: string
  username?: string
  usernameRef?: string
}

export interface GitlabApiAccess {
  spec?: GitlabApiAccessSpecDTO
  type: 'Token'
}

export interface GitlabApiAccessSpecDTO {
  [key: string]: any
}

export interface GitlabAuthentication {
  spec: GitlabCredentialsDTO
  type: 'Http' | 'Ssh'
}

export type GitlabConnector = ConnectorConfigDTO & {
  apiAccess?: GitlabApiAccess
  authentication: GitlabAuthentication
  delegateSelectors?: string[]
  type: 'Account' | 'Repo'
  url: string
  validationRepo?: string
}

export interface GitlabCredentialsDTO {
  [key: string]: any
}

export type GitlabHttpCredentials = GitlabCredentialsDTO & {
  spec: GitlabHttpCredentialsSpecDTO
  type: 'UsernamePassword' | 'UsernameToken' | 'Kerberos'
}

export interface GitlabHttpCredentialsSpecDTO {
  [key: string]: any
}

export type GitlabKerberos = GitlabHttpCredentialsSpecDTO & {
  kerberosKeyRef: string
}

export type GitlabSshCredentials = GitlabCredentialsDTO & {
  sshKeyRef: string
}

export type GitlabTokenSpec = GitlabApiAccessSpecDTO & {
  tokenRef: string
}

export type GitlabUsernamePassword = GitlabHttpCredentialsSpecDTO & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export type GitlabUsernameToken = GitlabHttpCredentialsSpecDTO & {
  tokenRef: string
  username?: string
  usernameRef?: string
}

export type HarnessCDChangeSourceSpec = ChangeSourceSpec & { [key: string]: any }

export type HarnessCDCurrentGenChangeSourceSpec = ChangeSourceSpec & {
  harnessApplicationId: string
  harnessEnvironmentId: string
  harnessServiceId: string
}

export type HarnessCDCurrentGenEventMetadata = ChangeEventMetadata & {
  accountId?: string
  appId?: string
  artifactName?: string
  artifactType?: string
  environmentId?: string
  name?: string
  serviceId?: string
  status?: string
  workflowEndTime?: number
  workflowExecutionId?: string
  workflowId?: string
  workflowStartTime?: number
}

export type HarnessCDEventMetadata = ChangeEventMetadata & {
  artifactTag?: string
  artifactType?: string
  deploymentEndTime?: number
  deploymentStartTime?: number
  pipelineId?: string
  pipelinePath?: string
  planExecutionId?: string
  stageId?: string
  stageStepId?: string
  status?: string
  verifyStepSummaries?: VerifyStepSummary[]
}

export interface HealthMonitoringFlagResponse {
  accountId?: string
  healthMonitoringEnabled?: boolean
  identifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export interface HealthScoreDTO {
  currentHealthScore?: RiskData
  dependentHealthScore?: RiskData
}

export interface HealthSource {
  identifier?: string
  name?: string
  spec: HealthSourceSpec
  type?:
    | 'AppDynamics'
    | 'NewRelic'
    | 'StackdriverLog'
    | 'Stackdriver'
    | 'Prometheus'
    | 'Splunk'
    | 'DatadogMetrics'
    | 'DatadogLog'
    | 'Dynatrace'
    | 'ErrorTracking'
    | 'CustomHealthMetric'
    | 'CustomHealthLog'
}

export interface HealthSourceDTO {
  identifier?: string
  name?: string
  type?:
    | 'APP_DYNAMICS'
    | 'SPLUNK'
    | 'STACKDRIVER'
    | 'STACKDRIVER_LOG'
    | 'KUBERNETES'
    | 'NEW_RELIC'
    | 'PROMETHEUS'
    | 'DATADOG_METRICS'
    | 'DATADOG_LOG'
    | 'ERROR_TRACKING'
    | 'DYNATRACE'
    | 'CUSTOM_HEALTH_METRIC'
    | 'CUSTOM_HEALTH_LOG'
  verificationType?: 'TIME_SERIES' | 'LOG'
}

export interface HealthSourceMetricDefinition {
  analysis?: AnalysisDTO
  identifier: string
  metricName: string
  riskProfile?: RiskProfile
  sli?: Slidto
}

export interface HealthSourceSpec {
  connectorRef?: string
}

export interface HealthSourceSummary {
  identifier?: string
  name?: string
}

export interface HistoricalTrend {
  healthScores?: RiskData[]
}

export interface HostDTO {
  hostAttributes?: {
    [key: string]: string
  }
  hostname: string
}

export interface HostData {
  anomalous?: boolean
  controlData?: number[]
  hostName?: string
  nearestControlHost?: string
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'HEALTHY' | 'OBSERVE' | 'NEED_ATTENTION' | 'UNHEALTHY'
  score?: number
  testData?: number[]
}

export interface HostInfo {
  canary?: boolean
  hostName?: string
  primary?: boolean
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'HEALTHY' | 'OBSERVE' | 'NEED_ATTENTION' | 'UNHEALTHY'
  score?: number
}

export interface HostRecordDTO {
  accountId?: string
  endTime?: number
  hosts?: string[]
  startTime?: number
  verificationTaskId?: string
}

export interface HostSummary {
  host?: string
  resultSummary?: ResultSummary
}

export interface HttpHelmAuthCredentialsDTO {
  [key: string]: any
}

export interface HttpHelmAuthenticationDTO {
  spec?: HttpHelmAuthCredentialsDTO
  type: 'UsernamePassword' | 'Anonymous'
}

export type HttpHelmConnectorDTO = ConnectorConfigDTO & {
  auth?: HttpHelmAuthenticationDTO
  delegateSelectors?: string[]
  helmRepoUrl: string
}

export type HttpHelmUsernamePasswordDTO = HttpHelmAuthCredentialsDTO & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export interface InputSetTemplateRequest {
  pipelineYaml?: string
  templateYaml?: string
}

export interface InputSetTemplateResponse {
  inputSetTemplateYaml?: string
}

export type JiraConnector = ConnectorConfigDTO & {
  delegateSelectors?: string[]
  jiraUrl: string
  passwordRef: string
  username?: string
  usernameRef?: string
}

export interface JsonNode {
  array?: boolean
  bigDecimal?: boolean
  bigInteger?: boolean
  binary?: boolean
  boolean?: boolean
  containerNode?: boolean
  double?: boolean
  float?: boolean
  floatingPointNumber?: boolean
  int?: boolean
  integralNumber?: boolean
  long?: boolean
  missingNode?: boolean
  nodeType?: 'ARRAY' | 'BINARY' | 'BOOLEAN' | 'MISSING' | 'NULL' | 'NUMBER' | 'OBJECT' | 'POJO' | 'STRING'
  null?: boolean
  number?: boolean
  object?: boolean
  pojo?: boolean
  short?: boolean
  textual?: boolean
  valueNode?: boolean
}

export interface KubernetesAuthCredentialDTO {
  [key: string]: any
}

export interface KubernetesAuthDTO {
  spec: KubernetesAuthCredentialDTO
  type: 'UsernamePassword' | 'ClientKeyCert' | 'ServiceAccount' | 'OpenIdConnect'
}

export type KubernetesChangeEventMetadata = ChangeEventMetadata & {
  action?: 'Add' | 'Update' | 'Delete'
  kind?: string
  message?: string
  namespace?: string
  newYaml?: string
  oldYaml?: string
  reason?: string
  resourceType?: 'Deployment' | 'ReplicaSet' | 'Secret' | 'Pod' | 'ConfigMap' | 'StatefulSet'
  resourceVersion?: string
  timestamp?: number
  workload?: string
}

export type KubernetesChangeSourceSpec = ChangeSourceSpec & {
  connectorRef?: string
}

export type KubernetesClientKeyCertDTO = KubernetesAuthCredentialDTO & {
  caCertRef?: string
  clientCertRef: string
  clientKeyAlgo?: string
  clientKeyPassphraseRef?: string
  clientKeyRef: string
}

export type KubernetesClusterConfigDTO = ConnectorConfigDTO & {
  credential: KubernetesCredentialDTO
  delegateSelectors?: string[]
}

export type KubernetesClusterDetailsDTO = KubernetesCredentialSpecDTO & {
  auth: KubernetesAuthDTO
  masterUrl: string
}

export interface KubernetesCredentialDTO {
  spec?: KubernetesCredentialSpecDTO
  type: 'InheritFromDelegate' | 'ManualConfig'
}

export interface KubernetesCredentialSpecDTO {
  [key: string]: any
}

export type KubernetesOpenIdConnectDTO = KubernetesAuthCredentialDTO & {
  oidcClientIdRef: string
  oidcIssuerUrl?: string
  oidcPasswordRef: string
  oidcScopes?: string
  oidcSecretRef?: string
  oidcUsername?: string
  oidcUsernameRef?: string
}

export type KubernetesServiceAccountDTO = KubernetesAuthCredentialDTO & {
  caCertRef?: string
  serviceAccountTokenRef: string
}

export type KubernetesUserNamePasswordDTO = KubernetesAuthCredentialDTO & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export interface LearningEngineTask {
  accountId?: string
  analysisEndEpochMinute?: number
  analysisEndTime?: number
  analysisSaveUrl?: string
  analysisStartTime?: number
  analysisType?:
    | 'SERVICE_GUARD_TIME_SERIES'
    | 'LOG_CLUSTER'
    | 'SERVICE_GUARD_LOG_ANALYSIS'
    | 'CANARY_LOG_ANALYSIS'
    | 'TEST_LOG_ANALYSIS'
    | 'TIME_SERIES_CANARY'
    | 'SERVICE_GUARD_FEEDBACK_ANALYSIS'
    | 'TIME_SERIES_LOAD_TEST'
  createdAt?: number
  endTime?: number
  exception?: string
  failureUrl?: string
  lastUpdatedAt?: number
  logLevel?: 'INFO' | 'WARN' | 'ERROR'
  pickedAt?: number
  stackTrace?: string
  startTime?: number
  taskPriority?: number
  taskStatus?: 'QUEUED' | 'RUNNING' | 'FAILED' | 'SUCCESS' | 'TIMEOUT'
  type?:
    | 'SERVICE_GUARD_TIME_SERIES'
    | 'LOG_CLUSTER'
    | 'SERVICE_GUARD_LOG_ANALYSIS'
    | 'CANARY_LOG_ANALYSIS'
    | 'TEST_LOG_ANALYSIS'
    | 'TIME_SERIES_CANARY'
    | 'SERVICE_GUARD_FEEDBACK_ANALYSIS'
    | 'TIME_SERIES_LOAD_TEST'
  uuid?: string
  validUntil?: string
  verificationTaskId?: string
}

export interface LiveMonitoringDTO {
  enabled?: boolean
}

export interface LiveMonitoringLogAnalysisClusterDTO {
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'HEALTHY' | 'OBSERVE' | 'NEED_ATTENTION' | 'UNHEALTHY'
  tag?: 'KNOWN' | 'UNEXPECTED' | 'UNKNOWN'
  text?: string
  x?: number
  y?: number
}

export type LocalConnectorDTO = ConnectorConfigDTO & {
  default?: boolean
}

export interface LocalTime {
  hour?: number
  minute?: number
  nano?: number
  second?: number
}

export interface LogAnalysisCluster {
  accountId?: string
  analysisEndTime?: number
  analysisMinute?: number
  analysisStartTime?: number
  compressedText?: string[]
  createdAt?: number
  evicted?: boolean
  firstSeenTime?: number
  frequencyTrend?: Frequency[]
  label?: number
  lastUpdatedAt?: number
  text?: string
  uuid?: string
  validUntil?: string
  verificationTaskId?: string
  x?: number
  y?: number
}

export interface LogAnalysisClusterChartDTO {
  clusterType?: 'BASELINE' | 'KNOWN_EVENT' | 'UNEXPECTED_FREQUENCY' | 'UNKNOWN_EVENT'
  hostName?: string
  label?: number
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'HEALTHY' | 'OBSERVE' | 'NEED_ATTENTION' | 'UNHEALTHY'
  text?: string
  x?: number
  y?: number
}

export interface LogAnalysisClusterDTO {
  clusterType?: 'BASELINE' | 'KNOWN_EVENT' | 'UNEXPECTED_FREQUENCY' | 'UNKNOWN_EVENT'
  controlFrequencyData?: number[]
  count?: number
  label?: number
  message?: string
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'HEALTHY' | 'OBSERVE' | 'NEED_ATTENTION' | 'UNHEALTHY'
  score?: number
  testFrequencyData?: number[]
}

export interface LogAnalysisClusterWithCountDTO {
  eventCounts?: EventCount[]
  logAnalysisClusterDTO?: PageLogAnalysisClusterDTO
  totalClusters?: number
}

export interface LogAnalysisDTO {
  accountId?: string
  analysisEndTime?: number
  analysisMinute?: number
  analysisStartTime?: number
  analysisSummaryMessage?: string
  logAnalysisResults?: AnalysisResult[]
  logClusters?: LogAnalysisCluster[]
  score?: number
  verificationTaskId?: string
}

export interface LogAnalysisRadarChartClusterDTO {
  angle?: number
  baseline?: LogAnalysisRadarChartClusterDTO
  clusterId?: string
  clusterType?: 'BASELINE' | 'KNOWN_EVENT' | 'UNEXPECTED_FREQUENCY' | 'UNKNOWN_EVENT'
  hasControlData?: boolean
  label?: number
  message?: string
  radius?: number
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'HEALTHY' | 'OBSERVE' | 'NEED_ATTENTION' | 'UNHEALTHY'
}

export interface LogAnalysisRadarChartListDTO {
  angle?: number
  baseline?: LogAnalysisRadarChartListDTO
  clusterId?: string
  clusterType?: 'BASELINE' | 'KNOWN_EVENT' | 'UNEXPECTED_FREQUENCY' | 'UNKNOWN_EVENT'
  count?: number
  frequencyData?: number[]
  hasControlData?: boolean
  label?: number
  message?: string
  radius?: number
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'HEALTHY' | 'OBSERVE' | 'NEED_ATTENTION' | 'UNHEALTHY'
}

export interface LogAnalysisRadarChartListWithCountDTO {
  eventCounts?: EventCount[]
  logAnalysisRadarCharts?: PageLogAnalysisRadarChartListDTO
  totalClusters?: number
}

export interface LogAnalysisRecord {
  accountId?: string
  analysisEndTime?: number
  analysisMinute?: number
  analysisStartTime?: number
  analysisSummaryMessage?: string
  controlClusters?: LogAnalysisCluster[]
  controlEvents?: LogAnalysisCluster[]
  createdAt?: number
  lastUpdatedAt?: number
  score?: number
  testClusters?: LogAnalysisCluster[]
  testEvents?: LogAnalysisCluster[]
  unknownClusters?: LogAnalysisCluster[]
  unknownEvents?: LogAnalysisCluster[][]
  uuid?: string
  validUntil?: string
  verificationTaskId?: string
}

export interface LogAnalysisResult {
  accountId?: string
  analysisEndTime?: number
  analysisStartTime?: number
  createdAt?: number
  lastUpdatedAt?: number
  logAnalysisResults?: AnalysisResult[]
  overallRisk?: number
  uuid?: string
  validUntil?: string
  verificationTaskId?: string
}

export interface LogClusterDTO {
  clusterCount?: number
  clusterLabel?: string
  epochMinute?: number
  host?: string
  log?: string
  verificationTaskId?: string
}

export interface LogData {
  count?: number
  label?: number
  riskScore?: number
  riskStatus?: 'NO_DATA' | 'NO_ANALYSIS' | 'HEALTHY' | 'OBSERVE' | 'NEED_ATTENTION' | 'UNHEALTHY'
  tag?: 'KNOWN' | 'UNEXPECTED' | 'UNKNOWN'
  text?: string
  trend?: FrequencyDTO[]
}

export interface LogRecordDTO {
  accountId?: string
  host?: string
  log?: string
  timestamp?: number
  verificationTaskId?: string
}

export interface LogSampleRequestDTO {
  query?: string
}

export interface LogsAnalysisSummary {
  anomalousClusterCount?: number
  totalClusterCount?: number
}

export interface MessageFrequency {
  count?: number
  host?: string
  oldLabel?: string
  time?: number
}

export interface MetricDTO {
  identifier?: string
  metricName?: string
}

export interface MetricData {
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'HEALTHY' | 'OBSERVE' | 'NEED_ATTENTION' | 'UNHEALTHY'
  timestamp?: number
  value?: number
}

export interface MetricDefinition {
  identifier?: string
  included?: boolean
  name?: string
  responseJsonPath?: string
  thresholds?: TimeSeriesThreshold[]
  type: 'INFRA' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX' | 'OTHER'
  validationResponseJsonPath?: string
}

export interface MetricDefinitionDTO {
  included?: boolean
  metricIdentifier?: string
  name?: string
  path?: string
  responseJsonPath?: string
  thresholds?: TimeSeriesThresholdDTO[]
  type?: 'INFRA' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX' | 'OTHER'
  validationPath?: string
  validationResponseJsonPath?: string
}

export interface MetricGraph {
  dataPoints?: DataPoints[]
  endTime?: number
  metricIdentifier?: string
  metricName?: string
  startTime?: number
}

export interface MetricHistory {
  metricIdentifier?: string
  metricName?: string
  value?: number[]
}

export interface MetricPack {
  accountId?: string
  category: 'PERFORMANCE' | 'ERRORS' | 'INFRASTRUCTURE'
  createdAt?: number
  dataSourceType:
    | 'APP_DYNAMICS'
    | 'SPLUNK'
    | 'STACKDRIVER'
    | 'STACKDRIVER_LOG'
    | 'KUBERNETES'
    | 'NEW_RELIC'
    | 'PROMETHEUS'
    | 'DATADOG_METRICS'
    | 'DATADOG_LOG'
    | 'ERROR_TRACKING'
    | 'DYNATRACE'
    | 'CUSTOM_HEALTH_METRIC'
    | 'CUSTOM_HEALTH_LOG'
  identifier?: string
  lastUpdatedAt?: number
  metrics?: MetricDefinition[]
  orgIdentifier?: string
  projectIdentifier?: string
  uuid?: string
}

export interface MetricPackDTO {
  accountId?: string
  category?: 'PERFORMANCE' | 'ERRORS' | 'INFRASTRUCTURE'
  dataSourceType?:
    | 'APP_DYNAMICS'
    | 'SPLUNK'
    | 'STACKDRIVER'
    | 'STACKDRIVER_LOG'
    | 'KUBERNETES'
    | 'NEW_RELIC'
    | 'PROMETHEUS'
    | 'DATADOG_METRICS'
    | 'DATADOG_LOG'
    | 'ERROR_TRACKING'
    | 'DYNATRACE'
    | 'CUSTOM_HEALTH_METRIC'
    | 'CUSTOM_HEALTH_LOG'
  identifier?: string
  metrics?: MetricDefinitionDTO[]
  orgIdentifier?: string
  projectIdentifier?: string
  thresholds?: TimeSeriesThresholdDTO[]
  uuid?: string
}

export interface MetricPackValidationResponse {
  metricPackName?: string
  metricValidationResponses?: MetricValidationResponse[]
  overallStatus?: 'SUCCESS' | 'NO_DATA' | 'FAILED'
}

export interface MetricResponseMapping {
  metricValueJsonPath?: string
  serviceInstanceJsonPath?: string
  timestampFormat?: string
  timestampJsonPath?: string
}

export interface MetricSum {
  data?: number
  metricIdentifier?: string
  metricName?: string
  risk?: number
}

export interface MetricSumDTO {
  data?: number
  metricName?: string
  risk?: number
}

export interface MetricTagResponseDTO {
  metricTags?: string[]
  tagKeys?: string[]
}

export interface MetricValidationResponse {
  metricName?: string
  status?: 'SUCCESS' | 'NO_DATA' | 'FAILED'
  value?: number
}

export interface MonitoredServiceDTO {
  dependencies?: ServiceDependencyDTO[]
  description?: string
  environmentRef?: string
  environmentRefList?: string[]
  identifier: string
  name: string
  orgIdentifier: string
  projectIdentifier: string
  serviceRef: string
  sources?: Sources
  tags: {
    [key: string]: string
  }
  type: 'Application' | 'Infrastructure'
}

export interface MonitoredServiceListItemDTO {
  changeSummary?: ChangeSummaryDTO
  currentHealthScore?: RiskData
  dependentHealthScore?: RiskData[]
  environmentName?: string
  environmentRef?: string
  environmentRefList?: string[]
  healthMonitoringEnabled?: boolean
  historicalTrend?: HistoricalTrend
  identifier?: string
  name?: string
  serviceName?: string
  serviceRef?: string
  sloHealthIndicators?: SloHealthIndicatorDTO[]
  tags?: {
    [key: string]: string
  }
  type?: 'Application' | 'Infrastructure'
}

export interface MonitoredServiceResponse {
  createdAt?: number
  lastModifiedAt?: number
  monitoredService: MonitoredServiceDTO
}

export interface MonitoredServiceWithHealthSources {
  healthSources?: HealthSourceSummary[]
  identifier?: string
  name?: string
}

export type MonthlyCalenderSpec = CalenderSpec & {
  dayOfMonth: number
}

export interface NGTag {
  key: string
  value: string
}

export interface NewRelicApplication {
  applicationId?: number
  applicationName?: string
}

export type NewRelicConnectorDTO = ConnectorConfigDTO & {
  apiKeyRef: string
  delegateSelectors?: string[]
  newRelicAccountId: string
  url: string
}

export type NewRelicHealthSourceSpec = HealthSourceSpec & {
  applicationId?: string
  applicationName?: string
  feature?: string
  metricDefinitions?: HealthSourceMetricDefinition[]
  metricPacks?: MetricPackDTO[]
  newRelicMetricDefinitions?: NewRelicMetricDefinition[]
}

export interface NewRelicMetricDefinition {
  analysis?: AnalysisDTO
  groupName?: string
  identifier: string
  metricName: string
  nrql?: string
  responseMapping?: MetricResponseMapping
  riskProfile?: RiskProfile
  sli?: Slidto
}

export interface NexusAuthCredentials {
  [key: string]: any
}

export interface NexusAuthentication {
  spec?: NexusAuthCredentials
  type: 'UsernamePassword' | 'Anonymous'
}

export type NexusConnector = ConnectorConfigDTO & {
  auth?: NexusAuthentication
  delegateSelectors?: string[]
  nexusServerUrl: string
  version: string
}

export type NexusUsernamePasswordAuth = NexusAuthCredentials & {
  passwordRef: string
  username?: string
  usernameRef?: string
}

export interface NodeErrorInfo {
  fqn?: string
  identifier?: string
  name?: string
  type?: string
}

export interface NodeRiskCount {
  count?: number
  displayName?: string
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'HEALTHY' | 'OBSERVE' | 'NEED_ATTENTION' | 'UNHEALTHY'
}

export interface NodeRiskCountDTO {
  anomalousNodeCount?: number
  nodeRiskCounts?: NodeRiskCount[]
  totalNodeCount?: number
}

export interface NotificationRuleDTO {
  enabled?: boolean
  identifier: string
  name: string
  orgIdentifier: string
  projectIdentifier: string
  spec: NotificationRuleSpec
  type: 'monitoredService' | 'slo'
}

export interface NotificationRuleResponse {
  createdAt?: number
  lastModifiedAt?: number
  notificationRule: NotificationRuleDTO
}

export interface NotificationRuleSpec {
  type?: 'monitoredService' | 'slo'
}

export interface OnboardingRequestDTO {
  accountId?: string
  connectorIdentifier?: string
  dataCollectionRequest?: DataCollectionRequest
  orgIdentifier?: string
  projectIdentifier?: string
  tracingId?: string
}

export interface OnboardingResponseDTO {
  accountId?: string
  connectorIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  result?: { [key: string]: any }
  tracingId?: string
}

export interface Page {
  content?: { [key: string]: any }[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageAnalyzedLogDataDTO {
  content?: AnalyzedLogDataDTO[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageAppDynamicsApplication {
  content?: AppDynamicsApplication[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageAppDynamicsTier {
  content?: AppDynamicsTier[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageCVNGLogDTO {
  content?: CVNGLogDTO[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageChangeEventDTO {
  content?: ChangeEventDTO[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageDatadogDashboardDTO {
  content?: DatadogDashboardDTO[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageLogAnalysisClusterDTO {
  content?: LogAnalysisClusterDTO[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageLogAnalysisRadarChartListDTO {
  content?: LogAnalysisRadarChartListDTO[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageMonitoredServiceListItemDTO {
  content?: MonitoredServiceListItemDTO[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageMonitoredServiceResponse {
  content?: MonitoredServiceResponse[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageNotificationRuleResponse {
  content?: NotificationRuleResponse[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageSLODashboardWidget {
  content?: SLODashboardWidget[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageServiceLevelObjectiveResponse {
  content?: ServiceLevelObjectiveResponse[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageStackdriverDashboardDTO {
  content?: StackdriverDashboardDTO[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageString {
  content?: string[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageTimeSeriesMetricDataDTO {
  content?: TimeSeriesMetricDataDTO[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageTransactionMetricInfo {
  content?: TransactionMetricInfo[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export interface PageUserJourneyResponse {
  content?: UserJourneyResponse[]
  empty?: boolean
  pageIndex?: number
  pageItemCount?: number
  pageSize?: number
  totalItems?: number
  totalPages?: number
}

export type PagerDutyChangeSourceSpec = ChangeSourceSpec & {
  connectorRef?: string
  pagerDutyServiceId?: string
}

export type PagerDutyConnectorDTO = ConnectorConfigDTO & {
  apiTokenRef: string
  delegateSelectors?: string[]
}

export type PagerDutyEventMetaData = ChangeEventMetadata & {
  assignment?: string
  assignmentUrl?: string
  escalationPolicy?: string
  escalationPolicyUrl?: string
  eventId?: string
  htmlUrl?: string
  pagerDutyUrl?: string
  priority?: string
  status?: string
  title?: string
  triggeredAt?: number
  urgency?: string
}

export interface PagerDutyIncidentDTO {
  assignees?: PagerDutyObject[]
  escalation_policy?: PagerDutyObject
  html_url?: string
  id?: string
  priority?: PagerDutyObject
  self?: string
  status?: string
  title?: string
  urgency?: string
}

export interface PagerDutyObject {
  html_url?: string
  id?: string
  summary?: string
}

export interface PagerDutyServiceDetail {
  id?: string
  name?: string
}

export interface PagerDutyWebhookEvent {
  event?: PagerDutyWebhookEventDTO
}

export interface PagerDutyWebhookEventDTO {
  data?: PagerDutyIncidentDTO
  event_type?: string
  occurred_at?: number
}

export interface PartialSchemaDTO {
  moduleType?: 'CD' | 'CI' | 'CV' | 'CF' | 'CE' | 'STO' | 'CORE' | 'PMS' | 'TEMPLATESERVICE'
  namespace?: string
  nodeName?: string
  nodeType?: string
  schema?: JsonNode
  skipStageSchema?: boolean
}

export type PhysicalDataCenterConnectorDTO = ConnectorConfigDTO & {
  delegateSelectors?: string[]
  hosts?: HostDTO[]
  sshKeyRef: string
}

export interface Point {
  timestamp?: number
  value?: number
}

export interface ProgressLog {
  createdAt?: number
  endTime?: number
  failedStatus?: boolean
  finalState?: boolean
  log?: string
  startTime?: number
  timeTakenToFinish?: Duration
  verificationJobExecutionStatus?: 'QUEUED' | 'RUNNING' | 'FAILED' | 'SUCCESS' | 'TIMEOUT' | 'ABORTED'
  verificationTaskId?: string
}

export interface ProjectParams {
  accountIdentifier: string
  orgIdentifier: string
  projectIdentifier: string
}

export type PrometheusConnectorDTO = ConnectorConfigDTO & {
  delegateSelectors?: string[]
  url: string
}

export interface PrometheusFilter {
  labelName?: string
  labelValue?: string
}

export type PrometheusHealthSourceSpec = HealthSourceSpec & {
  metricDefinitions?: PrometheusMetricDefinition[]
}

export interface PrometheusMetricDefinition {
  additionalFilters?: PrometheusFilter[]
  aggregation?: string
  analysis?: AnalysisDTO
  envFilter?: PrometheusFilter[]
  groupName?: string
  identifier: string
  isManualQuery?: boolean
  metricName: string
  prometheusMetric?: string
  query?: string
  riskProfile?: RiskProfile
  serviceFilter?: PrometheusFilter[]
  serviceInstanceFieldName?: string
  sli?: Slidto
}

export interface PrometheusSampleData {
  data?: DataPoint[]
  metricDetails?: {
    [key: string]: string
  }
}

export type QuarterlyCalenderSpec = CalenderSpec & { [key: string]: any }

export interface QueryDTO {
  indexes: string[]
  name: string
  query: string
  serviceInstanceIdentifier: string
}

export type RatioSLIMetricSpec = SLIMetricSpec & {
  eventType: 'Good' | 'Bad'
  metric1: string
  metric2: string
  thresholdType: '>' | '<' | '>=' | '<='
  thresholdValue: number
}

export interface Response {
  correlationId?: string
  data?: { [key: string]: any }
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseAppdynamicsMetricDataResponse {
  correlationId?: string
  data?: AppdynamicsMetricDataResponse
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseBoolean {
  correlationId?: string
  data?: boolean
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseDynatraceServiceDTO {
  correlationId?: string
  data?: DynatraceServiceDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseHealthScoreDTO {
  correlationId?: string
  data?: HealthScoreDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseHistoricalTrend {
  correlationId?: string
  data?: HistoricalTrend
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseInputSetTemplateResponse {
  correlationId?: string
  data?: InputSetTemplateResponse
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseJsonNode {
  correlationId?: string
  data?: JsonNode
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseLinkedHashMap {
  correlationId?: string
  data?: {
    [key: string]: { [key: string]: any }
  }
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListAppDynamicsFileDefinition {
  correlationId?: string
  data?: AppDynamicsFileDefinition[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListDatadogDashboardDetail {
  correlationId?: string
  data?: DatadogDashboardDetail[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListDynatraceMetricDTO {
  correlationId?: string
  data?: DynatraceMetricDTO[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListDynatraceServiceDTO {
  correlationId?: string
  data?: DynatraceServiceDTO[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListEnvironmentResponse {
  correlationId?: string
  data?: EnvironmentResponse[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListLinkedHashMap {
  correlationId?: string
  data?: {
    [key: string]: { [key: string]: any }
  }[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListMonitoredServiceWithHealthSources {
  correlationId?: string
  data?: MonitoredServiceWithHealthSources[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListNewRelicApplication {
  correlationId?: string
  data?: NewRelicApplication[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListPartialSchemaDTO {
  correlationId?: string
  data?: PartialSchemaDTO[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListPrometheusSampleData {
  correlationId?: string
  data?: PrometheusSampleData[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListStackdriverDashboardDetail {
  correlationId?: string
  data?: StackdriverDashboardDetail[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListString {
  correlationId?: string
  data?: string[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseListTimeSeriesSampleDTO {
  correlationId?: string
  data?: TimeSeriesSampleDTO[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseMessage {
  code?:
    | 'DEFAULT_ERROR_CODE'
    | 'INVALID_ARGUMENT'
    | 'INVALID_EMAIL'
    | 'DOMAIN_NOT_ALLOWED_TO_REGISTER'
    | 'COMMNITY_EDITION_NOT_FOUND'
    | 'DEPLOY_MODE_IS_NOT_ON_PREM'
    | 'USER_ALREADY_REGISTERED'
    | 'USER_INVITATION_DOES_NOT_EXIST'
    | 'USER_DOES_NOT_EXIST'
    | 'USER_INVITE_OPERATION_FAILED'
    | 'USER_DISABLED'
    | 'ACCOUNT_DOES_NOT_EXIST'
    | 'INACTIVE_ACCOUNT'
    | 'ACCOUNT_MIGRATED'
    | 'USER_DOMAIN_NOT_ALLOWED'
    | 'MAX_FAILED_ATTEMPT_COUNT_EXCEEDED'
    | 'RESOURCE_NOT_FOUND'
    | 'INVALID_FORMAT'
    | 'ROLE_DOES_NOT_EXIST'
    | 'EMAIL_NOT_VERIFIED'
    | 'EMAIL_VERIFICATION_TOKEN_NOT_FOUND'
    | 'INVALID_TOKEN'
    | 'REVOKED_TOKEN'
    | 'INVALID_CAPTCHA_TOKEN'
    | 'NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS'
    | 'EXPIRED_TOKEN'
    | 'TOKEN_ALREADY_REFRESHED_ONCE'
    | 'ACCESS_DENIED'
    | 'NG_ACCESS_DENIED'
    | 'INVALID_CREDENTIAL'
    | 'INVALID_CREDENTIALS_THIRD_PARTY'
    | 'INVALID_KEY'
    | 'INVALID_CONNECTOR_TYPE'
    | 'INVALID_KEYPATH'
    | 'INVALID_VARIABLE'
    | 'UNKNOWN_HOST'
    | 'UNREACHABLE_HOST'
    | 'INVALID_PORT'
    | 'SSH_SESSION_TIMEOUT'
    | 'SOCKET_CONNECTION_ERROR'
    | 'CONNECTION_ERROR'
    | 'SOCKET_CONNECTION_TIMEOUT'
    | 'CONNECTION_TIMEOUT'
    | 'SSH_CONNECTION_ERROR'
    | 'USER_GROUP_ERROR'
    | 'INVALID_EXECUTION_ID'
    | 'ERROR_IN_GETTING_CHANNEL_STREAMS'
    | 'UNEXPECTED'
    | 'UNKNOWN_ERROR'
    | 'UNKNOWN_EXECUTOR_TYPE_ERROR'
    | 'DUPLICATE_STATE_NAMES'
    | 'TRANSITION_NOT_LINKED'
    | 'TRANSITION_TO_INCORRECT_STATE'
    | 'TRANSITION_TYPE_NULL'
    | 'STATES_WITH_DUP_TRANSITIONS'
    | 'BARRIERS_NOT_RUNNING_CONCURRENTLY'
    | 'NON_FORK_STATES'
    | 'NON_REPEAT_STATES'
    | 'INITIAL_STATE_NOT_DEFINED'
    | 'FILE_INTEGRITY_CHECK_FAILED'
    | 'INVALID_URL'
    | 'FILE_DOWNLOAD_FAILED'
    | 'PLATFORM_SOFTWARE_DELETE_ERROR'
    | 'INVALID_CSV_FILE'
    | 'INVALID_REQUEST'
    | 'SCHEMA_VALIDATION_FAILED'
    | 'FILTER_CREATION_ERROR'
    | 'INVALID_YAML_ERROR'
    | 'PLAN_CREATION_ERROR'
    | 'INVALID_INFRA_STATE'
    | 'PIPELINE_ALREADY_TRIGGERED'
    | 'NON_EXISTING_PIPELINE'
    | 'DUPLICATE_COMMAND_NAMES'
    | 'INVALID_PIPELINE'
    | 'COMMAND_DOES_NOT_EXIST'
    | 'DUPLICATE_ARTIFACTSTREAM_NAMES'
    | 'DUPLICATE_HOST_NAMES'
    | 'STATE_NOT_FOR_TYPE'
    | 'STATE_MACHINE_ISSUE'
    | 'STATE_DISCONTINUE_FAILED'
    | 'STATE_PAUSE_FAILED'
    | 'PAUSE_ALL_ALREADY'
    | 'RESUME_ALL_ALREADY'
    | 'ROLLBACK_ALREADY'
    | 'ABORT_ALL_ALREADY'
    | 'EXPIRE_ALL_ALREADY'
    | 'RETRY_FAILED'
    | 'UNKNOWN_ARTIFACT_TYPE'
    | 'UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE'
    | 'INIT_TIMEOUT'
    | 'LICENSE_EXPIRED'
    | 'NOT_LICENSED'
    | 'REQUEST_TIMEOUT'
    | 'WORKFLOW_ALREADY_TRIGGERED'
    | 'JENKINS_ERROR'
    | 'INVALID_ARTIFACT_SOURCE'
    | 'INVALID_ARTIFACT_SERVER'
    | 'INVALID_CLOUD_PROVIDER'
    | 'UPDATE_NOT_ALLOWED'
    | 'DELETE_NOT_ALLOWED'
    | 'APPDYNAMICS_CONFIGURATION_ERROR'
    | 'APM_CONFIGURATION_ERROR'
    | 'SPLUNK_CONFIGURATION_ERROR'
    | 'ELK_CONFIGURATION_ERROR'
    | 'LOGZ_CONFIGURATION_ERROR'
    | 'SUMO_CONFIGURATION_ERROR'
    | 'INSTANA_CONFIGURATION_ERROR'
    | 'APPDYNAMICS_ERROR'
    | 'STACKDRIVER_ERROR'
    | 'STACKDRIVER_CONFIGURATION_ERROR'
    | 'NEWRELIC_CONFIGURATION_ERROR'
    | 'NEWRELIC_ERROR'
    | 'DYNA_TRACE_CONFIGURATION_ERROR'
    | 'DYNA_TRACE_ERROR'
    | 'CLOUDWATCH_ERROR'
    | 'CLOUDWATCH_CONFIGURATION_ERROR'
    | 'PROMETHEUS_CONFIGURATION_ERROR'
    | 'DATA_DOG_CONFIGURATION_ERROR'
    | 'SERVICE_GUARD_CONFIGURATION_ERROR'
    | 'ENCRYPTION_NOT_CONFIGURED'
    | 'UNAVAILABLE_DELEGATES'
    | 'WORKFLOW_EXECUTION_IN_PROGRESS'
    | 'PIPELINE_EXECUTION_IN_PROGRESS'
    | 'AWS_ACCESS_DENIED'
    | 'AWS_CLUSTER_NOT_FOUND'
    | 'AWS_SERVICE_NOT_FOUND'
    | 'IMAGE_NOT_FOUND'
    | 'ILLEGAL_ARGUMENT'
    | 'IMAGE_TAG_NOT_FOUND'
    | 'DELEGATE_NOT_AVAILABLE'
    | 'INVALID_YAML_PAYLOAD'
    | 'AUTHENTICATION_ERROR'
    | 'AUTHORIZATION_ERROR'
    | 'UNRECOGNIZED_YAML_FIELDS'
    | 'COULD_NOT_MAP_BEFORE_YAML'
    | 'MISSING_BEFORE_YAML'
    | 'MISSING_YAML'
    | 'NON_EMPTY_DELETIONS'
    | 'GENERAL_YAML_ERROR'
    | 'GENERAL_YAML_INFO'
    | 'YAML_GIT_SYNC_ERROR'
    | 'GIT_CONNECTION_ERROR'
    | 'GIT_ERROR'
    | 'ARTIFACT_SERVER_ERROR'
    | 'ENCRYPT_DECRYPT_ERROR'
    | 'SECRET_MANAGEMENT_ERROR'
    | 'SECRET_NOT_FOUND'
    | 'KMS_OPERATION_ERROR'
    | 'GCP_KMS_OPERATION_ERROR'
    | 'VAULT_OPERATION_ERROR'
    | 'AWS_SECRETS_MANAGER_OPERATION_ERROR'
    | 'AZURE_KEY_VAULT_OPERATION_ERROR'
    | 'CYBERARK_OPERATION_ERROR'
    | 'UNSUPPORTED_OPERATION_EXCEPTION'
    | 'FEATURE_UNAVAILABLE'
    | 'GENERAL_ERROR'
    | 'BASELINE_CONFIGURATION_ERROR'
    | 'SAML_IDP_CONFIGURATION_NOT_AVAILABLE'
    | 'INVALID_AUTHENTICATION_MECHANISM'
    | 'INVALID_SAML_CONFIGURATION'
    | 'INVALID_OAUTH_CONFIGURATION'
    | 'INVALID_LDAP_CONFIGURATION'
    | 'USER_GROUP_SYNC_FAILURE'
    | 'USER_GROUP_ALREADY_EXIST'
    | 'INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION'
    | 'EXPLANATION'
    | 'HINT'
    | 'NOT_WHITELISTED_IP'
    | 'INVALID_TOTP_TOKEN'
    | 'EMAIL_FAILED'
    | 'SSL_HANDSHAKE_FAILED'
    | 'NO_APPS_ASSIGNED'
    | 'INVALID_INFRA_CONFIGURATION'
    | 'TEMPLATES_LINKED'
    | 'USER_HAS_NO_PERMISSIONS'
    | 'USER_NOT_AUTHORIZED'
    | 'USER_ALREADY_PRESENT'
    | 'INVALID_USAGE_RESTRICTION'
    | 'USAGE_RESTRICTION_ERROR'
    | 'STATE_EXECUTION_INSTANCE_NOT_FOUND'
    | 'DELEGATE_TASK_RETRY'
    | 'KUBERNETES_API_TASK_EXCEPTION'
    | 'KUBERNETES_TASK_EXCEPTION'
    | 'KUBERNETES_YAML_ERROR'
    | 'SAVE_FILE_INTO_GCP_STORAGE_FAILED'
    | 'READ_FILE_FROM_GCP_STORAGE_FAILED'
    | 'FILE_NOT_FOUND_ERROR'
    | 'USAGE_LIMITS_EXCEEDED'
    | 'EVENT_PUBLISH_FAILED'
    | 'JIRA_ERROR'
    | 'EXPRESSION_EVALUATION_FAILED'
    | 'KUBERNETES_VALUES_ERROR'
    | 'KUBERNETES_CLUSTER_ERROR'
    | 'INCORRECT_SIGN_IN_MECHANISM'
    | 'OAUTH_LOGIN_FAILED'
    | 'INVALID_TERRAFORM_TARGETS_REQUEST'
    | 'TERRAFORM_EXECUTION_ERROR'
    | 'FILE_READ_FAILED'
    | 'FILE_SIZE_EXCEEDS_LIMIT'
    | 'CLUSTER_NOT_FOUND'
    | 'MARKETPLACE_TOKEN_NOT_FOUND'
    | 'INVALID_MARKETPLACE_TOKEN'
    | 'INVALID_TICKETING_SERVER'
    | 'SERVICENOW_ERROR'
    | 'PASSWORD_EXPIRED'
    | 'USER_LOCKED'
    | 'PASSWORD_STRENGTH_CHECK_FAILED'
    | 'ACCOUNT_DISABLED'
    | 'INVALID_ACCOUNT_PERMISSION'
    | 'PAGERDUTY_ERROR'
    | 'HEALTH_ERROR'
    | 'SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED'
    | 'DOMAIN_WHITELIST_FILTER_CHECK_FAILED'
    | 'INVALID_DASHBOARD_UPDATE_REQUEST'
    | 'DUPLICATE_FIELD'
    | 'INVALID_AZURE_VAULT_CONFIGURATION'
    | 'USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS'
    | 'INVALID_ROLLBACK'
    | 'DATA_COLLECTION_ERROR'
    | 'SUMO_DATA_COLLECTION_ERROR'
    | 'DEPLOYMENT_GOVERNANCE_ERROR'
    | 'BATCH_PROCESSING_ERROR'
    | 'GRAPHQL_ERROR'
    | 'FILE_CREATE_ERROR'
    | 'ILLEGAL_STATE'
    | 'GIT_DIFF_COMMIT_NOT_IN_ORDER'
    | 'FAILED_TO_ACQUIRE_PERSISTENT_LOCK'
    | 'FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK'
    | 'POD_NOT_FOUND_ERROR'
    | 'COMMAND_EXECUTION_ERROR'
    | 'REGISTRY_EXCEPTION'
    | 'ENGINE_INTERRUPT_PROCESSING_EXCEPTION'
    | 'ENGINE_IO_EXCEPTION'
    | 'ENGINE_OUTCOME_EXCEPTION'
    | 'ENGINE_SWEEPING_OUTPUT_EXCEPTION'
    | 'CACHE_NOT_FOUND_EXCEPTION'
    | 'ENGINE_ENTITY_UPDATE_EXCEPTION'
    | 'SHELL_EXECUTION_EXCEPTION'
    | 'TEMPLATE_NOT_FOUND'
    | 'AZURE_SERVICE_EXCEPTION'
    | 'AZURE_CLIENT_EXCEPTION'
    | 'GIT_UNSEEN_REMOTE_HEAD_COMMIT'
    | 'TIMEOUT_ENGINE_EXCEPTION'
    | 'NO_AVAILABLE_DELEGATES'
    | 'NO_INSTALLED_DELEGATES'
    | 'DUPLICATE_DELEGATE_EXCEPTION'
    | 'GCP_MARKETPLACE_EXCEPTION'
    | 'MISSING_DEFAULT_GOOGLE_CREDENTIALS'
    | 'INCORRECT_DEFAULT_GOOGLE_CREDENTIALS'
    | 'OPTIMISTIC_LOCKING_EXCEPTION'
    | 'NG_PIPELINE_EXECUTION_EXCEPTION'
    | 'NG_PIPELINE_CREATE_EXCEPTION'
    | 'RESOURCE_NOT_FOUND_EXCEPTION'
    | 'PMS_INITIALIZE_SDK_EXCEPTION'
    | 'UNEXPECTED_SNIPPET_EXCEPTION'
    | 'UNEXPECTED_SCHEMA_EXCEPTION'
    | 'CONNECTOR_VALIDATION_EXCEPTION'
    | 'TIMESCALE_NOT_AVAILABLE'
    | 'MIGRATION_EXCEPTION'
    | 'REQUEST_PROCESSING_INTERRUPTED'
    | 'SECRET_MANAGER_ID_NOT_FOUND'
    | 'GCP_SECRET_MANAGER_OPERATION_ERROR'
    | 'GCP_SECRET_OPERATION_ERROR'
    | 'GIT_OPERATION_ERROR'
    | 'TASK_FAILURE_ERROR'
    | 'INSTANCE_STATS_PROCESS_ERROR'
    | 'INSTANCE_STATS_MIGRATION_ERROR'
    | 'DEPLOYMENT_MIGRATION_ERROR'
    | 'CG_LICENSE_USAGE_ERROR'
    | 'INSTANCE_STATS_AGGREGATION_ERROR'
    | 'UNRESOLVED_EXPRESSIONS_ERROR'
    | 'KRYO_HANDLER_NOT_FOUND_ERROR'
    | 'DELEGATE_ERROR_HANDLER_EXCEPTION'
    | 'UNEXPECTED_TYPE_ERROR'
    | 'EXCEPTION_HANDLER_NOT_FOUND'
    | 'CONNECTOR_NOT_FOUND_EXCEPTION'
    | 'GCP_SERVER_ERROR'
    | 'HTTP_RESPONSE_EXCEPTION'
    | 'SCM_NOT_FOUND_ERROR'
    | 'SCM_CONFLICT_ERROR'
    | 'SCM_UNPROCESSABLE_ENTITY'
    | 'PROCESS_EXECUTION_EXCEPTION'
    | 'SCM_UNAUTHORIZED'
    | 'SCM_INTERNAL_SERVER_ERROR'
    | 'DATA'
    | 'CONTEXT'
    | 'PR_CREATION_ERROR'
    | 'URL_NOT_REACHABLE'
    | 'URL_NOT_PROVIDED'
    | 'ENGINE_EXPRESSION_EVALUATION_ERROR'
    | 'ENGINE_FUNCTOR_ERROR'
    | 'JIRA_CLIENT_ERROR'
    | 'SCM_NOT_MODIFIED'
    | 'APPROVAL_STEP_NG_ERROR'
    | 'BUCKET_SERVER_ERROR'
    | 'GIT_SYNC_ERROR'
    | 'TEMPLATE_EXCEPTION'
    | 'ENTITY_REFERENCE_EXCEPTION'
    | 'INVALID_INPUT_SET'
    | 'INVALID_OVERLAY_INPUT_SET'
    | 'RESOURCE_ALREADY_EXISTS'
    | 'INVALID_JSON_PAYLOAD'
    | 'POLICY_EVALUATION_FAILURE'
    | 'POLICY_SET_ERROR'
    | 'INVALID_ARTIFACTORY_REGISTRY_REQUEST'
    | 'INVALID_NEXUS_REGISTRY_REQUEST'
    | 'ENTITY_NOT_FOUND'
    | 'INVALID_AZURE_CONTAINER_REGISTRY_REQUEST'
    | 'AZURE_AUTHENTICATION_ERROR'
    | 'AZURE_CONFIG_ERROR'
    | 'DATA_PROCESSING_ERROR'
  exception?: Throwable
  failureTypes?: (
    | 'EXPIRED'
    | 'DELEGATE_PROVISIONING'
    | 'CONNECTIVITY'
    | 'AUTHENTICATION'
    | 'VERIFICATION_FAILURE'
    | 'APPLICATION_ERROR'
    | 'AUTHORIZATION_ERROR'
    | 'TIMEOUT_ERROR'
    | 'POLICY_EVALUATION_FAILURE'
  )[]
  level?: 'INFO' | 'ERROR'
  message?: string
}

export interface ResponseMetricPackValidationResponse {
  correlationId?: string
  data?: MetricPackValidationResponse
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseMetricTagResponseDTO {
  correlationId?: string
  data?: MetricTagResponseDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseMonitoredServiceResponse {
  correlationId?: string
  data?: MonitoredServiceResponse
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseObject {
  correlationId?: string
  data?: { [key: string]: any }
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePageAppDynamicsApplication {
  correlationId?: string
  data?: PageAppDynamicsApplication
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePageAppDynamicsTier {
  correlationId?: string
  data?: PageAppDynamicsTier
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePageCVNGLogDTO {
  correlationId?: string
  data?: PageCVNGLogDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePageDatadogDashboardDTO {
  correlationId?: string
  data?: PageDatadogDashboardDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePageMonitoredServiceListItemDTO {
  correlationId?: string
  data?: PageMonitoredServiceListItemDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePageMonitoredServiceResponse {
  correlationId?: string
  data?: PageMonitoredServiceResponse
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePageNotificationRuleResponse {
  correlationId?: string
  data?: PageNotificationRuleResponse
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePageSLODashboardWidget {
  correlationId?: string
  data?: PageSLODashboardWidget
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePageServiceLevelObjectiveResponse {
  correlationId?: string
  data?: PageServiceLevelObjectiveResponse
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePageStackdriverDashboardDTO {
  correlationId?: string
  data?: PageStackdriverDashboardDTO
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePageString {
  correlationId?: string
  data?: PageString
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponsePageUserJourneyResponse {
  correlationId?: string
  data?: PageUserJourneyResponse
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseSLODashboardDetail {
  correlationId?: string
  data?: SLODashboardDetail
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseSLORiskCountResponse {
  correlationId?: string
  data?: SLORiskCountResponse
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseSetAppdynamicsValidationResponse {
  correlationId?: string
  data?: AppdynamicsValidationResponse[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseSetMetricPackValidationResponse {
  correlationId?: string
  data?: MetricPackValidationResponse[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseSetTimeSeriesSampleDTO {
  correlationId?: string
  data?: TimeSeriesSampleDTO[]
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseString {
  correlationId?: string
  data?: string
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface ResponseYamlSchemaDetailsWrapper {
  correlationId?: string
  data?: YamlSchemaDetailsWrapper
  metaData?: { [key: string]: any }
  status?: 'SUCCESS' | 'FAILURE' | 'ERROR'
}

export interface RestResponse {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: { [key: string]: any }
  responseMessages?: ResponseMessage[]
}

export interface RestResponseAnomaliesSummaryDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: AnomaliesSummaryDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseBoolean {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: boolean
  responseMessages?: ResponseMessage[]
}

export interface RestResponseChangeEventDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: ChangeEventDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseChangeSummaryDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: ChangeSummaryDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseChangeTimeline {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: ChangeTimeline
  responseMessages?: ResponseMessage[]
}

export interface RestResponseDataCollectionTask {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DataCollectionTask
  responseMessages?: ResponseMessage[]
}

export interface RestResponseDeploymentActivitySummaryDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DeploymentActivitySummaryDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseDeploymentLogAnalysisDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DeploymentLogAnalysisDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseHealthMonitoringFlagResponse {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: HealthMonitoringFlagResponse
  responseMessages?: ResponseMessage[]
}

export interface RestResponseLearningEngineTask {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: LearningEngineTask
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListClusteredLog {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: ClusteredLog[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListDataCollectionTaskDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DataCollectionTaskDTO[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListHealthSourceDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: HealthSourceDTO[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListLinkedHashMap {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: {
    [key: string]: { [key: string]: any }
  }[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListLiveMonitoringLogAnalysisClusterDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: LiveMonitoringLogAnalysisClusterDTO[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListLogAnalysisCluster {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: LogAnalysisCluster[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListLogAnalysisClusterChartDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: LogAnalysisClusterChartDTO[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListLogAnalysisRadarChartClusterDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: LogAnalysisRadarChartClusterDTO[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListLogAnalysisRecord {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: LogAnalysisRecord[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListLogAnalysisResult {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: LogAnalysisResult[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListLogClusterDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: LogClusterDTO[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListMetricDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: MetricDTO[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListMetricPackDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: MetricPackDTO[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListPagerDutyServiceDetail {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: PagerDutyServiceDetail[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListProgressLog {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: ProgressLog[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListSLOErrorBudgetResetDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: SLOErrorBudgetResetDTO[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListSplunkSavedSearch {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: SplunkSavedSearch[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListString {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: string[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListTestVerificationBaselineExecutionDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: TestVerificationBaselineExecutionDTO[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListTimeSeriesCumulativeSums {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: TimeSeriesCumulativeSums[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListTimeSeriesMetricDefinition {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: TimeSeriesMetricDefinition[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListTimeSeriesRecordDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: TimeSeriesRecordDTO[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseListTimeSeriesRiskSummary {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: TimeSeriesRiskSummary[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseLogAnalysisClusterWithCountDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: LogAnalysisClusterWithCountDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseLogAnalysisRadarChartListWithCountDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: LogAnalysisRadarChartListWithCountDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseMapStringMapStringListDouble {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: {
    [key: string]: {
      [key: string]: number[]
    }
  }
  responseMessages?: ResponseMessage[]
}

export interface RestResponseMapStringMapStringListMetricSumDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: {
    [key: string]: {
      [key: string]: MetricSumDTO[]
    }
  }
  responseMessages?: ResponseMessage[]
}

export interface RestResponseMapStringMapStringListTimeSeriesAnomaliesDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: {
    [key: string]: {
      [key: string]: TimeSeriesAnomaliesDTO[]
    }
  }
  responseMessages?: ResponseMessage[]
}

export interface RestResponseMonitoredServiceResponse {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: MonitoredServiceResponse
  responseMessages?: ResponseMessage[]
}

export interface RestResponseNotificationRuleResponse {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: NotificationRuleResponse
  responseMessages?: ResponseMessage[]
}

export interface RestResponseOnboardingResponseDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: OnboardingResponseDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseOptionalDataCollectionTaskDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: DataCollectionTaskDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponsePageAnalyzedLogDataDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: PageAnalyzedLogDataDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponsePageCVNGLogDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: PageCVNGLogDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponsePageChangeEventDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: PageChangeEventDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponsePageLogAnalysisClusterDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: PageLogAnalysisClusterDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponsePageTimeSeriesMetricDataDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: PageTimeSeriesMetricDataDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseSLIOnboardingGraphs {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: SLIOnboardingGraphs
  responseMessages?: ResponseMessage[]
}

export interface RestResponseSLODebugResponse {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: SLODebugResponse
  responseMessages?: ResponseMessage[]
}

export interface RestResponseSLOErrorBudgetResetDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: SLOErrorBudgetResetDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseServiceDependencyGraphDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: ServiceDependencyGraphDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseServiceLevelObjectiveResponse {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: ServiceLevelObjectiveResponse
  responseMessages?: ResponseMessage[]
}

export interface RestResponseSetHealthSourceDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: HealthSourceDTO[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseSetString {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: string[]
  responseMessages?: ResponseMessage[]
}

export interface RestResponseString {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: string
  responseMessages?: ResponseMessage[]
}

export interface RestResponseTimeGraphResponse {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: TimeGraphResponse
  responseMessages?: ResponseMessage[]
}

export interface RestResponseTimeSeriesAnomalousPatterns {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: TimeSeriesAnomalousPatterns
  responseMessages?: ResponseMessage[]
}

export interface RestResponseTimeSeriesShortTermHistory {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: TimeSeriesShortTermHistory
  responseMessages?: ResponseMessage[]
}

export interface RestResponseTimeSeriesTestDataDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: TimeSeriesTestDataDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseTransactionMetricInfoSummaryPageDTO {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: TransactionMetricInfoSummaryPageDTO
  responseMessages?: ResponseMessage[]
}

export interface RestResponseUserJourneyResponse {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: UserJourneyResponse
  responseMessages?: ResponseMessage[]
}

export interface RestResponseVerifyStepDebugResponse {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: VerifyStepDebugResponse
  responseMessages?: ResponseMessage[]
}

export interface RestResponseVoid {
  metaData?: {
    [key: string]: { [key: string]: any }
  }
  resource?: Void
  responseMessages?: ResponseMessage[]
}

export interface ResultSummary {
  controlClusterSummaries?: ControlClusterSummary[]
  risk?: number
  riskLevel?: 'NO_DATA' | 'NO_ANALYSIS' | 'HEALTHY' | 'OBSERVE' | 'NEED_ATTENTION' | 'UNHEALTHY'
  score?: number
  testClusterSummaries?: ClusterSummary[]
}

export interface RiskCount {
  count?: number
  displayName?: string
  identifier?: string
}

export interface RiskData {
  endTime?: number
  healthScore?: number
  riskStatus?: 'NO_DATA' | 'NO_ANALYSIS' | 'HEALTHY' | 'OBSERVE' | 'NEED_ATTENTION' | 'UNHEALTHY'
  startTime?: number
  timeRangeParams?: TimeRangeParams
}

export interface RiskProfile {
  category?: 'PERFORMANCE' | 'ERRORS' | 'INFRASTRUCTURE'
  metricType?: 'INFRA' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX' | 'OTHER'
  thresholdTypes?: ('ACT_WHEN_LOWER' | 'ACT_WHEN_HIGHER')[]
}

export type RollingSLOTargetSpec = SLOTargetSpec & {
  periodLength: string
}

export interface Slidto {
  enabled?: boolean
}

export interface SLIMetricSpec {
  [key: string]: any
}

export interface SLIOnboardingGraphs {
  metricGraphs?: {
    [key: string]: MetricGraph
  }
  sliGraph?: TimeGraphResponse
}

export interface SLIRecord {
  createdAt?: number
  epochMinute?: number
  lastUpdatedAt?: number
  runningBadCount?: number
  runningGoodCount?: number
  sliId?: string
  sliState?: 'NO_DATA' | 'GOOD' | 'BAD'
  sliVersion?: number
  timestamp?: number
  uuid?: string
  validUntil?: string
  verificationTaskId?: string
  version?: number
}

export interface SLODashboardDetail {
  description?: string
  sloDashboardWidget?: SLODashboardWidget
}

export interface SLODashboardWidget {
  burnRate: BurnRate
  currentPeriodEndTime: number
  currentPeriodLengthDays: number
  currentPeriodStartTime: number
  environmentIdentifier: string
  environmentName: string
  errorBudgetBurndown: Point[]
  errorBudgetRemaining: number
  errorBudgetRemainingPercentage: number
  errorBudgetRisk: 'EXHAUSTED' | 'UNHEALTHY' | 'NEED_ATTENTION' | 'OBSERVE' | 'HEALTHY'
  healthSourceIdentifier: string
  healthSourceName: string
  monitoredServiceIdentifier: string
  monitoredServiceName: string
  recalculatingSLI?: boolean
  serviceIdentifier: string
  serviceName: string
  sloIdentifier: string
  sloPerformanceTrend: Point[]
  sloTargetPercentage: number
  sloTargetType: 'Rolling' | 'Calender'
  tags?: {
    [key: string]: string
  }
  timeRemainingDays: number
  title: string
  totalErrorBudget: number
  type: 'Availability' | 'Latency'
}

export interface SLODebugResponse {
  projectParams?: ProjectParams
  serviceLevelIndicatorList?: ServiceLevelIndicator[]
  serviceLevelObjective?: ServiceLevelObjective
  sliIdentifierToAnalysisStateMachineMap?: {
    [key: string]: AnalysisStateMachine
  }
  sliIdentifierToDataCollectionTaskMap?: {
    [key: string]: DataCollectionTask[]
  }
  sliIdentifierToSLIRecordMap?: {
    [key: string]: SLIRecord[]
  }
  sliIdentifierToVerificationTaskMap?: {
    [key: string]: VerificationTask
  }
  sloHealthIndicator?: SLOHealthIndicator
}

export interface SLOErrorBudgetResetDTO {
  createdAt?: number
  errorBudgetAtReset?: number
  errorBudgetIncrementPercentage?: number
  reason?: string
  remainingErrorBudgetAtReset?: number
  serviceLevelObjectiveIdentifier?: string
  validUntil?: number
}

export interface SLOHealthIndicator {
  accountId?: string
  createdAt?: number
  errorBudgetRemainingPercentage?: number
  errorBudgetRisk?: 'EXHAUSTED' | 'UNHEALTHY' | 'NEED_ATTENTION' | 'OBSERVE' | 'HEALTHY'
  lastComputedAt?: number
  lastUpdatedAt?: number
  monitoredServiceIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  serviceLevelObjectiveIdentifier?: string
  uuid?: string
}

export type SLONotificationRuleSpec = NotificationRuleSpec & {
  errorBudgetRemainingPercentageThreshold?: number
}

export interface SLORiskCountResponse {
  riskCounts?: RiskCount[]
  totalCount?: number
}

export interface SLOTarget {
  sloTargetPercentage: number
  spec: SLOTargetSpec
  type?: 'Rolling' | 'Calender'
}

export interface SLOTargetSpec {
  [key: string]: any
}

export interface SampleDataDTO {
  groupName: string
  jsonResponse: string
  metricValueJSONPath: string
  timestampFormat?: string
  timestampJSONPath: string
}

export type SampleErrorMetadataDTO = ErrorMetadataDTO & {
  sampleMap?: {
    [key: string]: string
  }
}

export type ScmErrorMetadataDTO = ErrorMetadataDTO & {
  conflictCommitId?: string
}

export interface SecretRefData {
  decryptedValue?: string[]
  identifier?: string
  null?: boolean
  scope?: 'account' | 'org' | 'project' | 'unknown'
}

export interface ServiceDependencyDTO {
  dependencyMetadata?: ServiceDependencyMetadata
  monitoredServiceIdentifier?: string
}

export interface ServiceDependencyGraphDTO {
  edges?: Edge[]
  nodes?: ServiceSummaryDetails[]
}

export interface ServiceDependencyMetadata {
  supportedChangeSourceTypes?: ('HarnessCDNextGen' | 'PagerDuty' | 'K8sCluster' | 'HarnessCD')[]
  type?: 'KUBERNETES'
}

export interface ServiceGuardTimeSeriesAnalysisDTO {
  analysisEndTime?: number
  analysisStartTime?: number
  overallMetricScores?: {
    [key: string]: number
  }
  txnMetricAnalysisData?: {
    [key: string]: {
      [key: string]: ServiceGuardTxnMetricAnalysisDataDTO
    }
  }
  verificationTaskId?: string
}

export interface ServiceGuardTxnMetricAnalysisDataDTO {
  anomalousPatterns?: TimeSeriesAnomaliesDTO[]
  cumulativeSums?: MetricSumDTO
  keyTransaction?: boolean
  lastSeenTime?: number
  longTermPattern?: boolean
  metricType?: 'INFRA' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX' | 'OTHER'
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'HEALTHY' | 'OBSERVE' | 'NEED_ATTENTION' | 'UNHEALTHY'
  score?: number
  shortTermHistory?: number[]
}

export interface ServiceLevelIndicator {
  accountId?: string
  createNextTaskIteration?: number
  createdAt?: number
  firstTimeDataCollectionTimeRange?: TimeRange
  healthSourceIdentifier?: string
  identifier?: string
  lastUpdatedAt?: number
  metricNames?: string[]
  monitoredServiceIdentifier?: string
  name?: string
  orgIdentifier?: string
  projectIdentifier?: string
  sliMissingDataType?: 'Good' | 'Bad' | 'Ignore'
  slimetricType?: 'Threshold' | 'Ratio'
  type?: 'Availability' | 'Latency'
  uuid?: string
  version?: number
}

export interface ServiceLevelIndicatorDTO {
  healthSourceRef?: string
  identifier?: string
  name?: string
  sliMissingDataType: 'Good' | 'Bad' | 'Ignore'
  spec: ServiceLevelIndicatorSpec
  type: 'Availability' | 'Latency'
}

export interface ServiceLevelIndicatorSpec {
  spec: SLIMetricSpec
  type?: 'Threshold' | 'Ratio'
}

export interface ServiceLevelObjective {
  accountId?: string
  createdAt?: number
  desc?: string
  healthSourceIdentifier?: string
  identifier?: string
  lastUpdatedAt?: number
  monitoredServiceIdentifier?: string
  name?: string
  orgIdentifier?: string
  projectIdentifier?: string
  serviceLevelIndicators?: string[]
  sloTarget?: SLOTarget
  sloTargetPercentage?: number
  tags: NGTag[]
  type?: 'Availability' | 'Latency'
  userJourneyIdentifier?: string
  uuid?: string
  zoneOffset?: ZoneOffset
}

export interface ServiceLevelObjectiveDTO {
  description?: string
  healthSourceRef: string
  identifier: string
  monitoredServiceRef: string
  name: string
  orgIdentifier: string
  projectIdentifier: string
  serviceLevelIndicators: ServiceLevelIndicatorDTO[]
  tags?: {
    [key: string]: string
  }
  target: SLOTarget
  type?: 'Availability' | 'Latency'
  userJourneyRef: string
}

export interface ServiceLevelObjectiveResponse {
  createdAt?: number
  lastModifiedAt?: number
  serviceLevelObjective: ServiceLevelObjectiveDTO
}

export type ServiceNowConnector = ConnectorConfigDTO & {
  delegateSelectors?: string[]
  passwordRef: string
  serviceNowUrl: string
  username?: string
  usernameRef?: string
}

export interface ServiceSummaryDetails {
  environmentName?: string
  environmentRef?: string
  identifierRef?: string
  riskData?: RiskData
  riskLevel?: 'NO_DATA' | 'NO_ANALYSIS' | 'HEALTHY' | 'OBSERVE' | 'NEED_ATTENTION' | 'UNHEALTHY'
  riskScore?: number
  serviceName?: string
  serviceRef?: string
  type?: 'Application' | 'Infrastructure'
}

export interface SloHealthIndicatorDTO {
  errorBudgetRemainingPercentage?: number
  errorBudgetRisk?: 'EXHAUSTED' | 'UNHEALTHY' | 'NEED_ATTENTION' | 'OBSERVE' | 'HEALTHY'
  serviceLevelObjectiveIdentifier?: string
}

export interface Sources {
  changeSources?: ChangeSourceDTO[]
  healthSources?: HealthSource[]
}

export type SplunkConnectorDTO = ConnectorConfigDTO & {
  accountId: string
  delegateSelectors?: string[]
  passwordRef: string
  splunkUrl: string
  username?: string
}

export type SplunkHealthSourceSpec = HealthSourceSpec & {
  feature: string
  queries: QueryDTO[]
}

export interface SplunkSavedSearch {
  searchQuery?: string
  title?: string
}

export interface StackTraceElement {
  className?: string
  fileName?: string
  lineNumber?: number
  methodName?: string
  nativeMethod?: boolean
}

export interface StackdriverDashboardDTO {
  name?: string
  path?: string
}

export interface StackdriverDashboardDetail {
  dataSetList?: DataSet[]
  widgetName?: string
}

export interface StackdriverDefinition {
  analysis?: AnalysisDTO
  dashboardName?: string
  dashboardPath?: string
  identifier: string
  isManualQuery?: boolean
  jsonMetricDefinition?: { [key: string]: any }
  metricName: string
  metricTags?: string[]
  riskProfile?: RiskProfile
  serviceInstanceField?: string
  sli?: Slidto
}

export type StackdriverLogHealthSourceSpec = HealthSourceSpec & {
  feature: string
  queries: QueryDTO[]
}

export type StackdriverMetricHealthSourceSpec = HealthSourceSpec & {
  metricDefinitions?: StackdriverDefinition[]
}

export type SumoLogicConnectorDTO = ConnectorConfigDTO & {
  accessIdRef: string
  accessKeyRef: string
  delegateSelectors?: string[]
  url: string
}

export interface TaskInfo {
  taskType?: 'LIVE_MONITORING' | 'DEPLOYMENT' | 'SLI'
}

export interface TemplateInputsErrorDTO {
  fieldName?: string
  identifierOfErrorSource?: string
  message?: string
}

export type TemplateInputsErrorMetadataDTO = ErrorMetadataDTO & {
  errorMap?: {
    [key: string]: TemplateInputsErrorDTO
  }
  errorYaml?: string
}

export interface TemporalUnit {
  dateBased?: boolean
  duration?: Duration
  durationEstimated?: boolean
  timeBased?: boolean
}

export interface TestVerificationBaselineExecutionDTO {
  createdAt?: number
  verificationJobInstanceId?: string
}

export type ThresholdSLIMetricSpec = SLIMetricSpec & {
  metric1: string
  thresholdType: '>' | '<' | '>=' | '<='
  thresholdValue: number
}

export interface Throwable {
  cause?: Throwable
  localizedMessage?: string
  message?: string
  stackTrace?: StackTraceElement[]
  suppressed?: Throwable[]
}

export interface TimeGraphResponse {
  dataPoints?: DataPoints[]
  endTime?: number
  startTime?: number
}

export interface TimeRange {
  endTime?: number
  startTime?: number
}

export interface TimeRangeDetail {
  count?: number
  endTime?: number
  startTime?: number
}

export interface TimeRangeParams {
  endTime?: number
  startTime?: number
}

export interface TimeSeriesAnalysisSummary {
  numAnomMetrics?: number
  totalNumMetrics?: number
}

export interface TimeSeriesAnomalies {
  anomalousTimestamps?: number[]
  metricIdentifier?: string
  metricName?: string
  testData?: number[]
  transactionName?: string
}

export interface TimeSeriesAnomaliesDTO {
  anomalousTimestamps?: number[]
  metricName?: string
  testData?: number[]
  transactionName?: string
}

export interface TimeSeriesAnomalousPatterns {
  anomalies?: TimeSeriesAnomalies[]
  compressedAnomalies?: string[]
  createdAt?: number
  lastUpdatedAt?: number
  uuid?: string
  validUntil?: string
  verificationTaskId?: string
}

export interface TimeSeriesCumulativeSums {
  analysisEndTime?: number
  analysisStartTime?: number
  transactionMetricSums?: TransactionMetricSums[]
  uuid?: string
  validUntil?: string
  verificationTaskId?: string
}

export interface TimeSeriesDataCollectionRecord {
  accountId?: string
  host?: string
  metricValues?: TimeSeriesDataRecordMetricValue[]
  timeStamp?: number
  verificationTaskId?: string
}

export interface TimeSeriesDataRecordGroupValue {
  groupName?: string
  percent?: number
  value?: number
}

export interface TimeSeriesDataRecordMetricValue {
  metricIdentifier?: string
  metricName?: string
  timeSeriesValues?: TimeSeriesDataRecordGroupValue[]
}

export interface TimeSeriesMetricDataDTO {
  category?: 'PERFORMANCE' | 'ERRORS' | 'INFRASTRUCTURE'
  dataSourceType?:
    | 'APP_DYNAMICS'
    | 'SPLUNK'
    | 'STACKDRIVER'
    | 'STACKDRIVER_LOG'
    | 'KUBERNETES'
    | 'NEW_RELIC'
    | 'PROMETHEUS'
    | 'DATADOG_METRICS'
    | 'DATADOG_LOG'
    | 'ERROR_TRACKING'
    | 'DYNATRACE'
    | 'CUSTOM_HEALTH_METRIC'
    | 'CUSTOM_HEALTH_LOG'
  environmentIdentifier?: string
  groupName?: string
  metricDataList?: MetricData[]
  metricName?: string
  metricType?: 'INFRA' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX' | 'OTHER'
  monitoredServiceIdentifier?: string
  orgIdentifier?: string
  projectIdentifier?: string
  serviceIdentifier?: string
}

export interface TimeSeriesMetricDefinition {
  action?: 'FAIL_IMMEDIATELY' | 'FAIL_AFTER_OCCURRENCES' | 'FAIL_AFTER_CONSECUTIVE_OCCURRENCES'
  actionType?: 'IGNORE' | 'FAIL'
  comparisonType?: 'RATIO' | 'DELTA' | 'ABSOLUTE'
  metricGroupName?: string
  metricIdentifier?: string
  metricName?: string
  metricType?: 'INFRA' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX' | 'OTHER'
  occurrenceCount?: number
  thresholdType?: 'ACT_WHEN_LOWER' | 'ACT_WHEN_HIGHER'
  value?: number
}

export interface TimeSeriesRecordDTO {
  epochMinute?: number
  groupName?: string
  host?: string
  metricIdentifier?: string
  metricName?: string
  metricValue?: number
  verificationTaskId?: string
}

export interface TimeSeriesRiskSummary {
  analysisEndTime?: number
  analysisStartTime?: number
  overallRisk?: number
  transactionMetricRiskList?: TransactionMetricRisk[]
  uuid?: string
  validUntil?: string
  verificationTaskId?: string
}

export interface TimeSeriesSampleDTO {
  metricName?: string
  metricValue?: number
  timestamp?: number
  txnName?: string
}

export interface TimeSeriesShortTermHistory {
  compressedMetricHistories?: string[]
  createdAt?: number
  lastUpdatedAt?: number
  transactionMetricHistories?: TransactionMetricHistory[]
  uuid?: string
  validUntil?: string
  verificationTaskId?: string
}

export interface TimeSeriesTestDataDTO {
  cvConfigId?: string
  metricGroupValues?: {
    [key: string]: {
      [key: string]: MetricData[]
    }
  }
  transactionMetricValues?: {
    [key: string]: {
      [key: string]: number[]
    }
  }
}

export interface TimeSeriesThreshold {
  accountId: string
  action: 'IGNORE' | 'FAIL'
  createdAt?: number
  criteria: TimeSeriesThresholdCriteria
  dataSourceType:
    | 'APP_DYNAMICS'
    | 'SPLUNK'
    | 'STACKDRIVER'
    | 'STACKDRIVER_LOG'
    | 'KUBERNETES'
    | 'NEW_RELIC'
    | 'PROMETHEUS'
    | 'DATADOG_METRICS'
    | 'DATADOG_LOG'
    | 'ERROR_TRACKING'
    | 'DYNATRACE'
    | 'CUSTOM_HEALTH_METRIC'
    | 'CUSTOM_HEALTH_LOG'
  lastUpdatedAt?: number
  metricGroupName?: string
  metricIdentifier: string
  metricName: string
  metricPackIdentifier: string
  metricType: 'INFRA' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX' | 'OTHER'
  orgIdentifier: string
  projectIdentifier: string
  uuid?: string
}

export interface TimeSeriesThresholdCriteria {
  action?: 'FAIL_IMMEDIATELY' | 'FAIL_AFTER_OCCURRENCES' | 'FAIL_AFTER_CONSECUTIVE_OCCURRENCES'
  criteria?: string
  occurrenceCount?: number
  type?: 'RATIO' | 'DELTA' | 'ABSOLUTE'
}

export interface TimeSeriesThresholdDTO {
  accountId?: string
  action?: 'IGNORE' | 'FAIL'
  criteria?: TimeSeriesThresholdCriteria
  dataSourceType?:
    | 'APP_DYNAMICS'
    | 'SPLUNK'
    | 'STACKDRIVER'
    | 'STACKDRIVER_LOG'
    | 'KUBERNETES'
    | 'NEW_RELIC'
    | 'PROMETHEUS'
    | 'DATADOG_METRICS'
    | 'DATADOG_LOG'
    | 'ERROR_TRACKING'
    | 'DYNATRACE'
    | 'CUSTOM_HEALTH_METRIC'
    | 'CUSTOM_HEALTH_LOG'
  metricGroupName?: string
  metricName?: string
  metricPackIdentifier?: string
  metricType?: 'INFRA' | 'RESP_TIME' | 'THROUGHPUT' | 'ERROR' | 'APDEX' | 'OTHER'
  orgIdentifier?: string
  projectIdentifier?: string
}

export interface TimestampInfo {
  customTimestampFormat?: string
  placeholder?: string
  timestampFormat?: 'SECONDS' | 'MILLISECONDS' | 'CUSTOM'
}

export interface TransactionMetric {
  metricName?: string
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'HEALTHY' | 'OBSERVE' | 'NEED_ATTENTION' | 'UNHEALTHY'
  score?: number
  transactionName?: string
}

export interface TransactionMetricHistory {
  metricHistoryList?: MetricHistory[]
  transactionName?: string
}

export interface TransactionMetricHostData {
  anomalous?: boolean
  hostData?: HostData[]
  metricName?: string
  risk?: 'NO_DATA' | 'NO_ANALYSIS' | 'HEALTHY' | 'OBSERVE' | 'NEED_ATTENTION' | 'UNHEALTHY'
  score?: number
  transactionName?: string
}

export interface TransactionMetricInfo {
  connectorName?: string
  dataSourceType?:
    | 'APP_DYNAMICS'
    | 'SPLUNK'
    | 'STACKDRIVER'
    | 'STACKDRIVER_LOG'
    | 'KUBERNETES'
    | 'NEW_RELIC'
    | 'PROMETHEUS'
    | 'DATADOG_METRICS'
    | 'DATADOG_LOG'
    | 'ERROR_TRACKING'
    | 'DYNATRACE'
    | 'CUSTOM_HEALTH_METRIC'
    | 'CUSTOM_HEALTH_LOG'
  nodeRiskCountDTO?: NodeRiskCountDTO
  nodes?: HostData[]
  transactionMetric?: TransactionMetric
}

export interface TransactionMetricInfoSummaryPageDTO {
  deploymentEndTime?: number
  deploymentStartTime?: number
  deploymentTimeRange?: TimeRange
  pageResponse?: PageTransactionMetricInfo
}

export interface TransactionMetricRisk {
  anomalous?: boolean
  lastSeenTime?: number
  longTermPattern?: boolean
  metricIdentifier?: string
  metricName?: string
  metricRisk?: 'NO_DATA' | 'NO_ANALYSIS' | 'HEALTHY' | 'OBSERVE' | 'NEED_ATTENTION' | 'UNHEALTHY'
  metricScore?: number
  transactionName?: string
}

export interface TransactionMetricSums {
  metricSums?: MetricSum[]
  transactionName?: string
}

export interface UserJourneyDTO {
  identifier: string
  name: string
}

export interface UserJourneyResponse {
  createdAt?: number
  lastModifiedAt?: number
  userJourney: UserJourneyDTO
}

export interface ValidationError {
  error?: string
  fieldId?: string
}

export type VaultConnectorDTO = ConnectorConfigDTO & {
  accessType?: 'APP_ROLE' | 'TOKEN' | 'VAULT_AGENT' | 'AWS_IAM' | 'K8s_AUTH'
  appRoleId?: string
  authToken?: string
  awsRegion?: string
  basePath?: string
  default?: boolean
  delegateSelectors?: string[]
  namespace?: string
  readOnly?: boolean
  renewalIntervalMinutes: number
  secretEngineManuallyConfigured?: boolean
  secretEngineName?: string
  secretEngineVersion?: number
  secretId?: string
  serviceAccountTokenPath?: string
  sinkPath?: string
  useAwsIam?: boolean
  useK8sAuth?: boolean
  useVaultAgent?: boolean
  vaultAwsIamRole?: string
  vaultK8sAuthRole?: string
  vaultUrl: string
  xvaultAwsIamServerId?: string
}

export interface VerificationJob {
  accountId: string
  activitySourceIdentifier?: string
  allMonitoringSourcesEnabled?: boolean
  createdAt?: number
  dataSources?: (
    | 'APP_DYNAMICS'
    | 'SPLUNK'
    | 'STACKDRIVER'
    | 'STACKDRIVER_LOG'
    | 'KUBERNETES'
    | 'NEW_RELIC'
    | 'PROMETHEUS'
    | 'DATADOG_METRICS'
    | 'DATADOG_LOG'
    | 'ERROR_TRACKING'
    | 'DYNATRACE'
    | 'CUSTOM_HEALTH_METRIC'
    | 'CUSTOM_HEALTH_LOG'
  )[]
  defaultJob?: boolean
  duration?: Duration
  envIdentifier: string
  executionDuration?: Duration
  identifier: string
  jobName: string
  lastUpdatedAt?: number
  monitoringSources?: string[]
  orgIdentifier?: string
  projectIdentifier?: string
  serviceIdentifier: string
  type?: 'TEST' | 'CANARY' | 'BLUE_GREEN' | 'HEALTH'
  uuid?: string
  verificationJobDTO?: VerificationJobDTO
  verificationJobUrl?: string
}

export interface VerificationJobDTO {
  activitySourceIdentifier?: string
  allMonitoringSourcesEnabled?: boolean
  dataSources?: (
    | 'APP_DYNAMICS'
    | 'SPLUNK'
    | 'STACKDRIVER'
    | 'STACKDRIVER_LOG'
    | 'KUBERNETES'
    | 'NEW_RELIC'
    | 'PROMETHEUS'
    | 'DATADOG_METRICS'
    | 'DATADOG_LOG'
    | 'ERROR_TRACKING'
    | 'DYNATRACE'
    | 'CUSTOM_HEALTH_METRIC'
    | 'CUSTOM_HEALTH_LOG'
  )[]
  defaultJob?: boolean
  duration?: string
  envIdentifier?: string
  envName?: string
  identifier?: string
  jobName?: string
  monitoringSources?: string[]
  orgIdentifier?: string
  projectIdentifier?: string
  serviceIdentifier?: string
  serviceName?: string
  type?: 'TEST' | 'CANARY' | 'BLUE_GREEN' | 'HEALTH'
  verificationJobUrl?: string
}

export interface VerificationJobInstance {
  accountId: string
  createdAt?: number
  cvConfigMap?: {
    [key: string]: CVConfig
  }
  dataCollectionDelay?: Duration
  dataCollectionTaskIteration?: number
  deploymentStartTime?: number
  endTime?: number
  executionStatus?: 'QUEUED' | 'RUNNING' | 'FAILED' | 'SUCCESS' | 'TIMEOUT' | 'ABORTED'
  lastUpdatedAt?: number
  name?: string
  newHostsTrafficSplitPercentage?: number
  newVersionHosts?: string[]
  oldVersionHosts?: string[]
  progressLogs?: ProgressLog[]
  progressPercentage?: number
  resolvedJob?: VerificationJob
  startTime?: number
  timeoutTaskIteration?: number
  uuid?: string
  validUntil?: string
  verificationStatus?:
    | 'IGNORED'
    | 'NOT_STARTED'
    | 'VERIFICATION_PASSED'
    | 'VERIFICATION_FAILED'
    | 'ERROR'
    | 'ABORTED'
    | 'IN_PROGRESS'
  verificationTasksCount?: number
}

export interface VerificationJobRuntimeDetails {
  runtimeValues?: {
    [key: string]: string
  }
  verificationJobIdentifier?: string
}

export interface VerificationTask {
  accountId?: string
  createdAt?: number
  tags?: {
    [key: string]: string
  }
  taskInfo?: TaskInfo
  uuid?: string
  validUntil?: string
}

export interface VerifyStepDebugResponse {
  activity?: Activity
  cvngStepTask?: CVNGStepTask
  projectParams?: ProjectParams
  verificationJobInstance?: VerificationJobInstance
  verificationTaskIdToAnalysisStateMachineMap?: {
    [key: string]: AnalysisStateMachine
  }
  verificationTaskIdToCVNGApiLogMap?: {
    [key: string]: CVNGLog[]
  }
  verificationTaskIdToCVNGExecutionLogMap?: {
    [key: string]: CVNGLog[]
  }
  verificationTaskIdToDataCollectionTaskMap?: {
    [key: string]: DataCollectionTask[]
  }
  verificationTaskList?: VerificationTask[]
}

export interface VerifyStepSummary {
  name?: string
  verificationStatus?:
    | 'IGNORED'
    | 'NOT_STARTED'
    | 'VERIFICATION_PASSED'
    | 'VERIFICATION_FAILED'
    | 'ERROR'
    | 'ABORTED'
    | 'IN_PROGRESS'
}

export interface Void {
  [key: string]: any
}

export type WeeklyCalendarSpec = CalenderSpec & {
  dayOfWeek: 'Mon' | 'Tue' | 'Wed' | 'Thu' | 'Fri' | 'Sat' | 'Sun'
}

export interface YamlGroup {
  group?: string
}

export interface YamlSchemaDetailsWrapper {
  yamlSchemaWithDetailsList?: YamlSchemaWithDetails[]
}

export interface YamlSchemaErrorDTO {
  fqn?: string
  hintMessage?: string
  message?: string
  stageInfo?: NodeErrorInfo
  stepInfo?: NodeErrorInfo
}

export type YamlSchemaErrorWrapperDTO = ErrorMetadataDTO & {
  schemaErrors?: YamlSchemaErrorDTO[]
}

export interface YamlSchemaMetadata {
  featureFlags?: string[]
  featureRestrictions?: string[]
  modulesSupported?: ('CD' | 'CI' | 'CV' | 'CF' | 'CE' | 'STO' | 'CORE' | 'PMS' | 'TEMPLATESERVICE')[]
  namespace?: string
  yamlGroup: YamlGroup
}

export interface YamlSchemaWithDetails {
  availableAtAccountLevel?: boolean
  availableAtOrgLevel?: boolean
  availableAtProjectLevel?: boolean
  moduleType?: 'CD' | 'CI' | 'CV' | 'CF' | 'CE' | 'STO' | 'CORE' | 'PMS' | 'TEMPLATESERVICE'
  schema?: JsonNode
  schemaClassName?: string
  yamlSchemaMetadata?: YamlSchemaMetadata
}

export interface ZoneOffset {
  id?: string
  rules?: ZoneRules
  totalSeconds?: number
}

export interface ZoneOffsetTransition {
  dateTimeAfter?: string
  dateTimeBefore?: string
  duration?: Duration
  gap?: boolean
  instant?: number
  offsetAfter?: ZoneOffset
  offsetBefore?: ZoneOffset
  overlap?: boolean
}

export interface ZoneOffsetTransitionRule {
  dayOfMonthIndicator?: number
  dayOfWeek?: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY'
  localTime?: LocalTime
  midnightEndOfDay?: boolean
  month?:
    | 'JANUARY'
    | 'FEBRUARY'
    | 'MARCH'
    | 'APRIL'
    | 'MAY'
    | 'JUNE'
    | 'JULY'
    | 'AUGUST'
    | 'SEPTEMBER'
    | 'OCTOBER'
    | 'NOVEMBER'
    | 'DECEMBER'
  offsetAfter?: ZoneOffset
  offsetBefore?: ZoneOffset
  standardOffset?: ZoneOffset
  timeDefinition?: 'UTC' | 'WALL' | 'STANDARD'
}

export interface ZoneRules {
  fixedOffset?: boolean
  transitionRules?: ZoneOffsetTransitionRule[]
  transitions?: ZoneOffsetTransition[]
}

export type ChangeEventDTORequestBody = ChangeEventDTO

export type LogSampleRequestDTORequestBody = LogSampleRequestDTO

export type MetricPackDTOArrayRequestBody = MetricPackDTO[]

export type MonitoredServiceDTORequestBody = MonitoredServiceDTO

export type NotificationRuleDTORequestBody = NotificationRuleDTO

export type ServiceGuardTimeSeriesAnalysisDTORequestBody = ServiceGuardTimeSeriesAnalysisDTO

export type ServiceLevelIndicatorDTORequestBody = ServiceLevelIndicatorDTO

export type ServiceLevelObjectiveDTORequestBody = ServiceLevelObjectiveDTO

export type YamlSchemaDetailsWrapperRequestBody = YamlSchemaDetailsWrapper

export interface ChangeEventListQueryParams {
  serviceIdentifiers?: string[]
  envIdentifiers?: string[]
  monitoredServiceIdentifiers?: string[]
  changeCategories?: ('Deployment' | 'Infrastructure' | 'Alert')[]
  changeSourceTypes?: ('HarnessCDNextGen' | 'PagerDuty' | 'K8sCluster' | 'HarnessCD')[]
  searchText?: string
  startTime: number
  endTime: number
  pageIndex?: number
  pageSize?: number
  sortOrders?: string[]
}

export interface ChangeEventListPathParams {
  accountIdentifier: string
  orgIdentifier: string
  projectIdentifier: string
}

export type ChangeEventListProps = Omit<
  GetProps<RestResponsePageChangeEventDTO, unknown, ChangeEventListQueryParams, ChangeEventListPathParams>,
  'path'
> &
  ChangeEventListPathParams

/**
 * get ChangeEvent List
 */
export const ChangeEventList = ({
  accountIdentifier,
  orgIdentifier,
  projectIdentifier,
  ...props
}: ChangeEventListProps) => (
  <Get<RestResponsePageChangeEventDTO, unknown, ChangeEventListQueryParams, ChangeEventListPathParams>
    path={`/account/${accountIdentifier}/org/${orgIdentifier}/project/${projectIdentifier}/change-event`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseChangeEventListProps = Omit<
  UseGetProps<RestResponsePageChangeEventDTO, unknown, ChangeEventListQueryParams, ChangeEventListPathParams>,
  'path'
> &
  ChangeEventListPathParams

/**
 * get ChangeEvent List
 */
export const useChangeEventList = ({
  accountIdentifier,
  orgIdentifier,
  projectIdentifier,
  ...props
}: UseChangeEventListProps) =>
  useGet<RestResponsePageChangeEventDTO, unknown, ChangeEventListQueryParams, ChangeEventListPathParams>(
    (paramsInPath: ChangeEventListPathParams) =>
      `/account/${paramsInPath.accountIdentifier}/org/${paramsInPath.orgIdentifier}/project/${paramsInPath.projectIdentifier}/change-event`,
    { base: getConfig('cv/api'), pathParams: { accountIdentifier, orgIdentifier, projectIdentifier }, ...props }
  )

/**
 * get ChangeEvent List
 */
export const changeEventListPromise = (
  {
    accountIdentifier,
    orgIdentifier,
    projectIdentifier,
    ...props
  }: GetUsingFetchProps<
    RestResponsePageChangeEventDTO,
    unknown,
    ChangeEventListQueryParams,
    ChangeEventListPathParams
  > & { accountIdentifier: string; orgIdentifier: string; projectIdentifier: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponsePageChangeEventDTO, unknown, ChangeEventListQueryParams, ChangeEventListPathParams>(
    getConfig('cv/api'),
    `/account/${accountIdentifier}/org/${orgIdentifier}/project/${projectIdentifier}/change-event`,
    props,
    signal
  )

export interface ChangeEventTimelineQueryParams {
  serviceIdentifiers?: string[]
  envIdentifiers?: string[]
  monitoredServiceIdentifiers?: string[]
  changeCategories?: ('Deployment' | 'Infrastructure' | 'Alert')[]
  changeSourceTypes?: ('HarnessCDNextGen' | 'PagerDuty' | 'K8sCluster' | 'HarnessCD')[]
  searchText?: string
  startTime: number
  endTime: number
  pointCount?: number
}

export interface ChangeEventTimelinePathParams {
  accountIdentifier: string
  orgIdentifier: string
  projectIdentifier: string
}

export type ChangeEventTimelineProps = Omit<
  GetProps<RestResponseChangeTimeline, unknown, ChangeEventTimelineQueryParams, ChangeEventTimelinePathParams>,
  'path'
> &
  ChangeEventTimelinePathParams

/**
 * get ChangeEvent timeline
 */
export const ChangeEventTimeline = ({
  accountIdentifier,
  orgIdentifier,
  projectIdentifier,
  ...props
}: ChangeEventTimelineProps) => (
  <Get<RestResponseChangeTimeline, unknown, ChangeEventTimelineQueryParams, ChangeEventTimelinePathParams>
    path={`/account/${accountIdentifier}/org/${orgIdentifier}/project/${projectIdentifier}/change-event/timeline`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseChangeEventTimelineProps = Omit<
  UseGetProps<RestResponseChangeTimeline, unknown, ChangeEventTimelineQueryParams, ChangeEventTimelinePathParams>,
  'path'
> &
  ChangeEventTimelinePathParams

/**
 * get ChangeEvent timeline
 */
export const useChangeEventTimeline = ({
  accountIdentifier,
  orgIdentifier,
  projectIdentifier,
  ...props
}: UseChangeEventTimelineProps) =>
  useGet<RestResponseChangeTimeline, unknown, ChangeEventTimelineQueryParams, ChangeEventTimelinePathParams>(
    (paramsInPath: ChangeEventTimelinePathParams) =>
      `/account/${paramsInPath.accountIdentifier}/org/${paramsInPath.orgIdentifier}/project/${paramsInPath.projectIdentifier}/change-event/timeline`,
    { base: getConfig('cv/api'), pathParams: { accountIdentifier, orgIdentifier, projectIdentifier }, ...props }
  )

/**
 * get ChangeEvent timeline
 */
export const changeEventTimelinePromise = (
  {
    accountIdentifier,
    orgIdentifier,
    projectIdentifier,
    ...props
  }: GetUsingFetchProps<
    RestResponseChangeTimeline,
    unknown,
    ChangeEventTimelineQueryParams,
    ChangeEventTimelinePathParams
  > & { accountIdentifier: string; orgIdentifier: string; projectIdentifier: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseChangeTimeline, unknown, ChangeEventTimelineQueryParams, ChangeEventTimelinePathParams>(
    getConfig('cv/api'),
    `/account/${accountIdentifier}/org/${orgIdentifier}/project/${projectIdentifier}/change-event/timeline`,
    props,
    signal
  )

export interface GetChangeEventDetailPathParams {
  accountIdentifier: string
  orgIdentifier: string
  projectIdentifier: string
  activityId: string
}

export type GetChangeEventDetailProps = Omit<
  GetProps<RestResponseChangeEventDTO, unknown, void, GetChangeEventDetailPathParams>,
  'path'
> &
  GetChangeEventDetailPathParams

/**
 * get ChangeEvent detail
 */
export const GetChangeEventDetail = ({
  accountIdentifier,
  orgIdentifier,
  projectIdentifier,
  activityId,
  ...props
}: GetChangeEventDetailProps) => (
  <Get<RestResponseChangeEventDTO, unknown, void, GetChangeEventDetailPathParams>
    path={`/account/${accountIdentifier}/org/${orgIdentifier}/project/${projectIdentifier}/change-event/${activityId}`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetChangeEventDetailProps = Omit<
  UseGetProps<RestResponseChangeEventDTO, unknown, void, GetChangeEventDetailPathParams>,
  'path'
> &
  GetChangeEventDetailPathParams

/**
 * get ChangeEvent detail
 */
export const useGetChangeEventDetail = ({
  accountIdentifier,
  orgIdentifier,
  projectIdentifier,
  activityId,
  ...props
}: UseGetChangeEventDetailProps) =>
  useGet<RestResponseChangeEventDTO, unknown, void, GetChangeEventDetailPathParams>(
    (paramsInPath: GetChangeEventDetailPathParams) =>
      `/account/${paramsInPath.accountIdentifier}/org/${paramsInPath.orgIdentifier}/project/${paramsInPath.projectIdentifier}/change-event/${paramsInPath.activityId}`,
    {
      base: getConfig('cv/api'),
      pathParams: { accountIdentifier, orgIdentifier, projectIdentifier, activityId },
      ...props
    }
  )

/**
 * get ChangeEvent detail
 */
export const getChangeEventDetailPromise = (
  {
    accountIdentifier,
    orgIdentifier,
    projectIdentifier,
    activityId,
    ...props
  }: GetUsingFetchProps<RestResponseChangeEventDTO, unknown, void, GetChangeEventDetailPathParams> & {
    accountIdentifier: string
    orgIdentifier: string
    projectIdentifier: string
    activityId: string
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseChangeEventDTO, unknown, void, GetChangeEventDetailPathParams>(
    getConfig('cv/api'),
    `/account/${accountIdentifier}/org/${orgIdentifier}/project/${projectIdentifier}/change-event/${activityId}`,
    props,
    signal
  )

export interface GetDeploymentLogAnalysisClustersQueryParams {
  accountId: string
  hostName?: string
  healthSource?: string[]
  healthSources?: string[]
  clusterType?: ('BASELINE' | 'KNOWN_EVENT' | 'UNEXPECTED_FREQUENCY' | 'UNKNOWN_EVENT')[]
  clusterTypes?: ('BASELINE' | 'KNOWN_EVENT' | 'UNEXPECTED_FREQUENCY' | 'UNKNOWN_EVENT')[]
}

export interface GetDeploymentLogAnalysisClustersPathParams {
  activityId: string
}

export type GetDeploymentLogAnalysisClustersProps = Omit<
  GetProps<
    RestResponseListLogAnalysisClusterChartDTO,
    unknown,
    GetDeploymentLogAnalysisClustersQueryParams,
    GetDeploymentLogAnalysisClustersPathParams
  >,
  'path'
> &
  GetDeploymentLogAnalysisClustersPathParams

/**
 * get logs for given activity
 */
export const GetDeploymentLogAnalysisClusters = ({ activityId, ...props }: GetDeploymentLogAnalysisClustersProps) => (
  <Get<
    RestResponseListLogAnalysisClusterChartDTO,
    unknown,
    GetDeploymentLogAnalysisClustersQueryParams,
    GetDeploymentLogAnalysisClustersPathParams
  >
    path={`/activity/${activityId}/clusters`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDeploymentLogAnalysisClustersProps = Omit<
  UseGetProps<
    RestResponseListLogAnalysisClusterChartDTO,
    unknown,
    GetDeploymentLogAnalysisClustersQueryParams,
    GetDeploymentLogAnalysisClustersPathParams
  >,
  'path'
> &
  GetDeploymentLogAnalysisClustersPathParams

/**
 * get logs for given activity
 */
export const useGetDeploymentLogAnalysisClusters = ({
  activityId,
  ...props
}: UseGetDeploymentLogAnalysisClustersProps) =>
  useGet<
    RestResponseListLogAnalysisClusterChartDTO,
    unknown,
    GetDeploymentLogAnalysisClustersQueryParams,
    GetDeploymentLogAnalysisClustersPathParams
  >((paramsInPath: GetDeploymentLogAnalysisClustersPathParams) => `/activity/${paramsInPath.activityId}/clusters`, {
    base: getConfig('cv/api'),
    pathParams: { activityId },
    ...props
  })

/**
 * get logs for given activity
 */
export const getDeploymentLogAnalysisClustersPromise = (
  {
    activityId,
    ...props
  }: GetUsingFetchProps<
    RestResponseListLogAnalysisClusterChartDTO,
    unknown,
    GetDeploymentLogAnalysisClustersQueryParams,
    GetDeploymentLogAnalysisClustersPathParams
  > & { activityId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseListLogAnalysisClusterChartDTO,
    unknown,
    GetDeploymentLogAnalysisClustersQueryParams,
    GetDeploymentLogAnalysisClustersPathParams
  >(getConfig('cv/api'), `/activity/${activityId}/clusters`, props, signal)

export interface GetDeploymentLogAnalysisResultQueryParams {
  accountId: string
  label?: number
  pageNumber: number
  pageSize: number
  hostName?: string
  healthSource?: string[]
  healthSources?: string[]
  clusterType?: 'BASELINE' | 'KNOWN_EVENT' | 'UNEXPECTED_FREQUENCY' | 'UNKNOWN_EVENT'
  clusterTypes?: ('BASELINE' | 'KNOWN_EVENT' | 'UNEXPECTED_FREQUENCY' | 'UNKNOWN_EVENT')[]
}

export interface GetDeploymentLogAnalysisResultPathParams {
  activityId: string
}

export type GetDeploymentLogAnalysisResultProps = Omit<
  GetProps<
    RestResponsePageLogAnalysisClusterDTO,
    unknown,
    GetDeploymentLogAnalysisResultQueryParams,
    GetDeploymentLogAnalysisResultPathParams
  >,
  'path'
> &
  GetDeploymentLogAnalysisResultPathParams

/**
 * get logs for given activity
 */
export const GetDeploymentLogAnalysisResult = ({ activityId, ...props }: GetDeploymentLogAnalysisResultProps) => (
  <Get<
    RestResponsePageLogAnalysisClusterDTO,
    unknown,
    GetDeploymentLogAnalysisResultQueryParams,
    GetDeploymentLogAnalysisResultPathParams
  >
    path={`/activity/${activityId}/deployment-log-analysis-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDeploymentLogAnalysisResultProps = Omit<
  UseGetProps<
    RestResponsePageLogAnalysisClusterDTO,
    unknown,
    GetDeploymentLogAnalysisResultQueryParams,
    GetDeploymentLogAnalysisResultPathParams
  >,
  'path'
> &
  GetDeploymentLogAnalysisResultPathParams

/**
 * get logs for given activity
 */
export const useGetDeploymentLogAnalysisResult = ({ activityId, ...props }: UseGetDeploymentLogAnalysisResultProps) =>
  useGet<
    RestResponsePageLogAnalysisClusterDTO,
    unknown,
    GetDeploymentLogAnalysisResultQueryParams,
    GetDeploymentLogAnalysisResultPathParams
  >(
    (paramsInPath: GetDeploymentLogAnalysisResultPathParams) =>
      `/activity/${paramsInPath.activityId}/deployment-log-analysis-data`,
    { base: getConfig('cv/api'), pathParams: { activityId }, ...props }
  )

/**
 * get logs for given activity
 */
export const getDeploymentLogAnalysisResultPromise = (
  {
    activityId,
    ...props
  }: GetUsingFetchProps<
    RestResponsePageLogAnalysisClusterDTO,
    unknown,
    GetDeploymentLogAnalysisResultQueryParams,
    GetDeploymentLogAnalysisResultPathParams
  > & { activityId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponsePageLogAnalysisClusterDTO,
    unknown,
    GetDeploymentLogAnalysisResultQueryParams,
    GetDeploymentLogAnalysisResultPathParams
  >(getConfig('cv/api'), `/activity/${activityId}/deployment-log-analysis-data`, props, signal)

export interface GetHealthSourcesQueryParams {
  accountId: string
}

export interface GetHealthSourcesPathParams {
  activityId: string
}

export type GetHealthSourcesProps = Omit<
  GetProps<RestResponseSetHealthSourceDTO, unknown, GetHealthSourcesQueryParams, GetHealthSourcesPathParams>,
  'path'
> &
  GetHealthSourcesPathParams

/**
 * get health sources  for an activity
 */
export const GetHealthSources = ({ activityId, ...props }: GetHealthSourcesProps) => (
  <Get<RestResponseSetHealthSourceDTO, unknown, GetHealthSourcesQueryParams, GetHealthSourcesPathParams>
    path={`/activity/${activityId}/healthSources`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetHealthSourcesProps = Omit<
  UseGetProps<RestResponseSetHealthSourceDTO, unknown, GetHealthSourcesQueryParams, GetHealthSourcesPathParams>,
  'path'
> &
  GetHealthSourcesPathParams

/**
 * get health sources  for an activity
 */
export const useGetHealthSources = ({ activityId, ...props }: UseGetHealthSourcesProps) =>
  useGet<RestResponseSetHealthSourceDTO, unknown, GetHealthSourcesQueryParams, GetHealthSourcesPathParams>(
    (paramsInPath: GetHealthSourcesPathParams) => `/activity/${paramsInPath.activityId}/healthSources`,
    { base: getConfig('cv/api'), pathParams: { activityId }, ...props }
  )

/**
 * get health sources  for an activity
 */
export const getHealthSourcesPromise = (
  {
    activityId,
    ...props
  }: GetUsingFetchProps<
    RestResponseSetHealthSourceDTO,
    unknown,
    GetHealthSourcesQueryParams,
    GetHealthSourcesPathParams
  > & { activityId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseSetHealthSourceDTO, unknown, GetHealthSourcesQueryParams, GetHealthSourcesPathParams>(
    getConfig('cv/api'),
    `/activity/${activityId}/healthSources`,
    props,
    signal
  )

export interface GetAppDynamicsApplicationsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  offset: number
  pageSize: number
  filter?: string
}

export type GetAppDynamicsApplicationsProps = Omit<
  GetProps<ResponsePageAppDynamicsApplication, Failure | Error, GetAppDynamicsApplicationsQueryParams, void>,
  'path'
>

/**
 * get all appdynamics applications
 */
export const GetAppDynamicsApplications = (props: GetAppDynamicsApplicationsProps) => (
  <Get<ResponsePageAppDynamicsApplication, Failure | Error, GetAppDynamicsApplicationsQueryParams, void>
    path={`/appdynamics/applications`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAppDynamicsApplicationsProps = Omit<
  UseGetProps<ResponsePageAppDynamicsApplication, Failure | Error, GetAppDynamicsApplicationsQueryParams, void>,
  'path'
>

/**
 * get all appdynamics applications
 */
export const useGetAppDynamicsApplications = (props: UseGetAppDynamicsApplicationsProps) =>
  useGet<ResponsePageAppDynamicsApplication, Failure | Error, GetAppDynamicsApplicationsQueryParams, void>(
    `/appdynamics/applications`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get all appdynamics applications
 */
export const getAppDynamicsApplicationsPromise = (
  props: GetUsingFetchProps<
    ResponsePageAppDynamicsApplication,
    Failure | Error,
    GetAppDynamicsApplicationsQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageAppDynamicsApplication, Failure | Error, GetAppDynamicsApplicationsQueryParams, void>(
    getConfig('cv/api'),
    `/appdynamics/applications`,
    props,
    signal
  )

export interface GetAppdynamicsBaseFoldersQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  appName: string
  path?: string
  routingId?: string
}

export type GetAppdynamicsBaseFoldersProps = Omit<
  GetProps<ResponseListString, Failure | Error, GetAppdynamicsBaseFoldersQueryParams, void>,
  'path'
>

/**
 * get all appdynamics base folders for an application
 */
export const GetAppdynamicsBaseFolders = (props: GetAppdynamicsBaseFoldersProps) => (
  <Get<ResponseListString, Failure | Error, GetAppdynamicsBaseFoldersQueryParams, void>
    path={`/appdynamics/base-folders`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAppdynamicsBaseFoldersProps = Omit<
  UseGetProps<ResponseListString, Failure | Error, GetAppdynamicsBaseFoldersQueryParams, void>,
  'path'
>

/**
 * get all appdynamics base folders for an application
 */
export const useGetAppdynamicsBaseFolders = (props: UseGetAppdynamicsBaseFoldersProps) =>
  useGet<ResponseListString, Failure | Error, GetAppdynamicsBaseFoldersQueryParams, void>(`/appdynamics/base-folders`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get all appdynamics base folders for an application
 */
export const getAppdynamicsBaseFoldersPromise = (
  props: GetUsingFetchProps<ResponseListString, Failure | Error, GetAppdynamicsBaseFoldersQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListString, Failure | Error, GetAppdynamicsBaseFoldersQueryParams, void>(
    getConfig('cv/api'),
    `/appdynamics/base-folders`,
    props,
    signal
  )

export interface GetAppdynamicsMetricDataByPathQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  appName: string
  baseFolder: string
  tier: string
  metricPath: string
  routingId?: string
}

export type GetAppdynamicsMetricDataByPathProps = Omit<
  GetProps<ResponseAppdynamicsMetricDataResponse, Failure | Error, GetAppdynamicsMetricDataByPathQueryParams, void>,
  'path'
>

/**
 * get all appdynamics metric data for an application and a metric path
 */
export const GetAppdynamicsMetricDataByPath = (props: GetAppdynamicsMetricDataByPathProps) => (
  <Get<ResponseAppdynamicsMetricDataResponse, Failure | Error, GetAppdynamicsMetricDataByPathQueryParams, void>
    path={`/appdynamics/metric-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAppdynamicsMetricDataByPathProps = Omit<
  UseGetProps<ResponseAppdynamicsMetricDataResponse, Failure | Error, GetAppdynamicsMetricDataByPathQueryParams, void>,
  'path'
>

/**
 * get all appdynamics metric data for an application and a metric path
 */
export const useGetAppdynamicsMetricDataByPath = (props: UseGetAppdynamicsMetricDataByPathProps) =>
  useGet<ResponseAppdynamicsMetricDataResponse, Failure | Error, GetAppdynamicsMetricDataByPathQueryParams, void>(
    `/appdynamics/metric-data`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get all appdynamics metric data for an application and a metric path
 */
export const getAppdynamicsMetricDataByPathPromise = (
  props: GetUsingFetchProps<
    ResponseAppdynamicsMetricDataResponse,
    Failure | Error,
    GetAppdynamicsMetricDataByPathQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    ResponseAppdynamicsMetricDataResponse,
    Failure | Error,
    GetAppdynamicsMetricDataByPathQueryParams,
    void
  >(getConfig('cv/api'), `/appdynamics/metric-data`, props, signal)

export interface GetAppDynamicsMetricDataQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  appName: string
  tierName: string
  requestGuid: string
}

export type GetAppDynamicsMetricDataProps = Omit<
  MutateProps<
    ResponseSetAppdynamicsValidationResponse,
    Failure | Error,
    GetAppDynamicsMetricDataQueryParams,
    MetricPackDTOArrayRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * get metric data for given metric packs
 */
export const GetAppDynamicsMetricData = (props: GetAppDynamicsMetricDataProps) => (
  <Mutate<
    ResponseSetAppdynamicsValidationResponse,
    Failure | Error,
    GetAppDynamicsMetricDataQueryParams,
    MetricPackDTOArrayRequestBody,
    void
  >
    verb="POST"
    path={`/appdynamics/metric-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAppDynamicsMetricDataProps = Omit<
  UseMutateProps<
    ResponseSetAppdynamicsValidationResponse,
    Failure | Error,
    GetAppDynamicsMetricDataQueryParams,
    MetricPackDTOArrayRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * get metric data for given metric packs
 */
export const useGetAppDynamicsMetricData = (props: UseGetAppDynamicsMetricDataProps) =>
  useMutate<
    ResponseSetAppdynamicsValidationResponse,
    Failure | Error,
    GetAppDynamicsMetricDataQueryParams,
    MetricPackDTOArrayRequestBody,
    void
  >('POST', `/appdynamics/metric-data`, { base: getConfig('cv/api'), ...props })

/**
 * get metric data for given metric packs
 */
export const getAppDynamicsMetricDataPromise = (
  props: MutateUsingFetchProps<
    ResponseSetAppdynamicsValidationResponse,
    Failure | Error,
    GetAppDynamicsMetricDataQueryParams,
    MetricPackDTOArrayRequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseSetAppdynamicsValidationResponse,
    Failure | Error,
    GetAppDynamicsMetricDataQueryParams,
    MetricPackDTOArrayRequestBody,
    void
  >('POST', getConfig('cv/api'), `/appdynamics/metric-data`, props, signal)

export interface GetAppdynamicsMetricStructureQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  appName: string
  baseFolder: string
  tier: string
  metricPath: string
  routingId?: string
}

export type GetAppdynamicsMetricStructureProps = Omit<
  GetProps<ResponseListAppDynamicsFileDefinition, Failure | Error, GetAppdynamicsMetricStructureQueryParams, void>,
  'path'
>

/**
 * get all appdynamics metric structure for an application
 */
export const GetAppdynamicsMetricStructure = (props: GetAppdynamicsMetricStructureProps) => (
  <Get<ResponseListAppDynamicsFileDefinition, Failure | Error, GetAppdynamicsMetricStructureQueryParams, void>
    path={`/appdynamics/metric-structure`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAppdynamicsMetricStructureProps = Omit<
  UseGetProps<ResponseListAppDynamicsFileDefinition, Failure | Error, GetAppdynamicsMetricStructureQueryParams, void>,
  'path'
>

/**
 * get all appdynamics metric structure for an application
 */
export const useGetAppdynamicsMetricStructure = (props: UseGetAppdynamicsMetricStructureProps) =>
  useGet<ResponseListAppDynamicsFileDefinition, Failure | Error, GetAppdynamicsMetricStructureQueryParams, void>(
    `/appdynamics/metric-structure`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get all appdynamics metric structure for an application
 */
export const getAppdynamicsMetricStructurePromise = (
  props: GetUsingFetchProps<
    ResponseListAppDynamicsFileDefinition,
    Failure | Error,
    GetAppdynamicsMetricStructureQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListAppDynamicsFileDefinition, Failure | Error, GetAppdynamicsMetricStructureQueryParams, void>(
    getConfig('cv/api'),
    `/appdynamics/metric-structure`,
    props,
    signal
  )

export interface GetServiceInstanceMetricPathQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  appName: string
  baseFolder: string
  tier: string
  metricPath: string
  routingId?: string
}

export type GetServiceInstanceMetricPathProps = Omit<
  GetProps<ResponseString, Failure | Error, GetServiceInstanceMetricPathQueryParams, void>,
  'path'
>

/**
 * get service instance metric path for an application and a metric path
 */
export const GetServiceInstanceMetricPath = (props: GetServiceInstanceMetricPathProps) => (
  <Get<ResponseString, Failure | Error, GetServiceInstanceMetricPathQueryParams, void>
    path={`/appdynamics/service-instance-metric-path`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetServiceInstanceMetricPathProps = Omit<
  UseGetProps<ResponseString, Failure | Error, GetServiceInstanceMetricPathQueryParams, void>,
  'path'
>

/**
 * get service instance metric path for an application and a metric path
 */
export const useGetServiceInstanceMetricPath = (props: UseGetServiceInstanceMetricPathProps) =>
  useGet<ResponseString, Failure | Error, GetServiceInstanceMetricPathQueryParams, void>(
    `/appdynamics/service-instance-metric-path`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get service instance metric path for an application and a metric path
 */
export const getServiceInstanceMetricPathPromise = (
  props: GetUsingFetchProps<ResponseString, Failure | Error, GetServiceInstanceMetricPathQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseString, Failure | Error, GetServiceInstanceMetricPathQueryParams, void>(
    getConfig('cv/api'),
    `/appdynamics/service-instance-metric-path`,
    props,
    signal
  )

export interface GetAppDynamicsTiersQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  appName: string
  offset: number
  pageSize: number
  filter?: string
}

export type GetAppDynamicsTiersProps = Omit<
  GetProps<ResponsePageAppDynamicsTier, Failure | Error, GetAppDynamicsTiersQueryParams, void>,
  'path'
>

/**
 * get all appdynamics tiers for an application
 */
export const GetAppDynamicsTiers = (props: GetAppDynamicsTiersProps) => (
  <Get<ResponsePageAppDynamicsTier, Failure | Error, GetAppDynamicsTiersQueryParams, void>
    path={`/appdynamics/tiers`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAppDynamicsTiersProps = Omit<
  UseGetProps<ResponsePageAppDynamicsTier, Failure | Error, GetAppDynamicsTiersQueryParams, void>,
  'path'
>

/**
 * get all appdynamics tiers for an application
 */
export const useGetAppDynamicsTiers = (props: UseGetAppDynamicsTiersProps) =>
  useGet<ResponsePageAppDynamicsTier, Failure | Error, GetAppDynamicsTiersQueryParams, void>(`/appdynamics/tiers`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get all appdynamics tiers for an application
 */
export const getAppDynamicsTiersPromise = (
  props: GetUsingFetchProps<ResponsePageAppDynamicsTier, Failure | Error, GetAppDynamicsTiersQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageAppDynamicsTier, Failure | Error, GetAppDynamicsTiersQueryParams, void>(
    getConfig('cv/api'),
    `/appdynamics/tiers`,
    props,
    signal
  )

export interface GetMonitoredServiceChangeEventSummaryQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  monitoredServiceIdentifier?: string
  changeCategories?: ('Deployment' | 'Infrastructure' | 'Alert')[]
  changeSourceTypes?: ('HarnessCDNextGen' | 'PagerDuty' | 'K8sCluster' | 'HarnessCD')[]
  startTime: number
  endTime: number
}

export type GetMonitoredServiceChangeEventSummaryProps = Omit<
  GetProps<RestResponseChangeSummaryDTO, unknown, GetMonitoredServiceChangeEventSummaryQueryParams, void>,
  'path'
>

/**
 * get ChangeEvent summary for monitored service
 */
export const GetMonitoredServiceChangeEventSummary = (props: GetMonitoredServiceChangeEventSummaryProps) => (
  <Get<RestResponseChangeSummaryDTO, unknown, GetMonitoredServiceChangeEventSummaryQueryParams, void>
    path={`/change-event/monitored-service-summary`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMonitoredServiceChangeEventSummaryProps = Omit<
  UseGetProps<RestResponseChangeSummaryDTO, unknown, GetMonitoredServiceChangeEventSummaryQueryParams, void>,
  'path'
>

/**
 * get ChangeEvent summary for monitored service
 */
export const useGetMonitoredServiceChangeEventSummary = (props: UseGetMonitoredServiceChangeEventSummaryProps) =>
  useGet<RestResponseChangeSummaryDTO, unknown, GetMonitoredServiceChangeEventSummaryQueryParams, void>(
    `/change-event/monitored-service-summary`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get ChangeEvent summary for monitored service
 */
export const getMonitoredServiceChangeEventSummaryPromise = (
  props: GetUsingFetchProps<
    RestResponseChangeSummaryDTO,
    unknown,
    GetMonitoredServiceChangeEventSummaryQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseChangeSummaryDTO, unknown, GetMonitoredServiceChangeEventSummaryQueryParams, void>(
    getConfig('cv/api'),
    `/change-event/monitored-service-summary`,
    props,
    signal
  )

export interface GetMonitoredServiceChangeTimelineQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  monitoredServiceIdentifier?: string
  changeSourceTypes?: ('HarnessCDNextGen' | 'PagerDuty' | 'K8sCluster' | 'HarnessCD')[]
  searchText?: string
  duration: 'FOUR_HOURS' | 'TWENTY_FOUR_HOURS' | 'THREE_DAYS' | 'SEVEN_DAYS' | 'THIRTY_DAYS'
  endTime: number
}

export type GetMonitoredServiceChangeTimelineProps = Omit<
  GetProps<RestResponseChangeTimeline, unknown, GetMonitoredServiceChangeTimelineQueryParams, void>,
  'path'
>

/**
 * get monitored service timeline with durationDTO
 */
export const GetMonitoredServiceChangeTimeline = (props: GetMonitoredServiceChangeTimelineProps) => (
  <Get<RestResponseChangeTimeline, unknown, GetMonitoredServiceChangeTimelineQueryParams, void>
    path={`/change-event/monitored-service-timeline`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMonitoredServiceChangeTimelineProps = Omit<
  UseGetProps<RestResponseChangeTimeline, unknown, GetMonitoredServiceChangeTimelineQueryParams, void>,
  'path'
>

/**
 * get monitored service timeline with durationDTO
 */
export const useGetMonitoredServiceChangeTimeline = (props: UseGetMonitoredServiceChangeTimelineProps) =>
  useGet<RestResponseChangeTimeline, unknown, GetMonitoredServiceChangeTimelineQueryParams, void>(
    `/change-event/monitored-service-timeline`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get monitored service timeline with durationDTO
 */
export const getMonitoredServiceChangeTimelinePromise = (
  props: GetUsingFetchProps<RestResponseChangeTimeline, unknown, GetMonitoredServiceChangeTimelineQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseChangeTimeline, unknown, GetMonitoredServiceChangeTimelineQueryParams, void>(
    getConfig('cv/api'),
    `/change-event/monitored-service-timeline`,
    props,
    signal
  )

export interface FetchSampleDataQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  tracingId: string
}

export type FetchSampleDataProps = Omit<
  MutateProps<ResponseObject, Failure | Error, FetchSampleDataQueryParams, CustomHealthSampleDataRequest, void>,
  'path' | 'verb'
>

/**
 * get sample data
 */
export const FetchSampleData = (props: FetchSampleDataProps) => (
  <Mutate<ResponseObject, Failure | Error, FetchSampleDataQueryParams, CustomHealthSampleDataRequest, void>
    verb="POST"
    path={`/custom-health/sample-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseFetchSampleDataProps = Omit<
  UseMutateProps<ResponseObject, Failure | Error, FetchSampleDataQueryParams, CustomHealthSampleDataRequest, void>,
  'path' | 'verb'
>

/**
 * get sample data
 */
export const useFetchSampleData = (props: UseFetchSampleDataProps) =>
  useMutate<ResponseObject, Failure | Error, FetchSampleDataQueryParams, CustomHealthSampleDataRequest, void>(
    'POST',
    `/custom-health/sample-data`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get sample data
 */
export const fetchSampleDataPromise = (
  props: MutateUsingFetchProps<
    ResponseObject,
    Failure | Error,
    FetchSampleDataQueryParams,
    CustomHealthSampleDataRequest,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<ResponseObject, Failure | Error, FetchSampleDataQueryParams, CustomHealthSampleDataRequest, void>(
    'POST',
    getConfig('cv/api'),
    `/custom-health/sample-data`,
    props,
    signal
  )

export interface GetOnboardingLogsQueryParams {
  accountId: string
  traceableId: string
  offset: number
  pageSize: number
}

export type GetOnboardingLogsProps = Omit<
  GetProps<ResponsePageCVNGLogDTO, unknown, GetOnboardingLogsQueryParams, void>,
  'path'
>

/**
 * gets onboarding api call logs
 */
export const GetOnboardingLogs = (props: GetOnboardingLogsProps) => (
  <Get<ResponsePageCVNGLogDTO, unknown, GetOnboardingLogsQueryParams, void>
    path={`/cvng-log`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetOnboardingLogsProps = Omit<
  UseGetProps<ResponsePageCVNGLogDTO, unknown, GetOnboardingLogsQueryParams, void>,
  'path'
>

/**
 * gets onboarding api call logs
 */
export const useGetOnboardingLogs = (props: UseGetOnboardingLogsProps) =>
  useGet<ResponsePageCVNGLogDTO, unknown, GetOnboardingLogsQueryParams, void>(`/cvng-log`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * gets onboarding api call logs
 */
export const getOnboardingLogsPromise = (
  props: GetUsingFetchProps<ResponsePageCVNGLogDTO, unknown, GetOnboardingLogsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageCVNGLogDTO, unknown, GetOnboardingLogsQueryParams, void>(
    getConfig('cv/api'),
    `/cvng-log`,
    props,
    signal
  )

export interface SaveCVNGLogRecordsQueryParams {
  accountId: string
}

export type SaveCVNGLogRecordsProps = Omit<
  MutateProps<RestResponseVoid, unknown, SaveCVNGLogRecordsQueryParams, CVNGLogDTO[], void>,
  'path' | 'verb'
>

/**
 * saves cvng log data
 */
export const SaveCVNGLogRecords = (props: SaveCVNGLogRecordsProps) => (
  <Mutate<RestResponseVoid, unknown, SaveCVNGLogRecordsQueryParams, CVNGLogDTO[], void>
    verb="POST"
    path={`/cvng-log`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseSaveCVNGLogRecordsProps = Omit<
  UseMutateProps<RestResponseVoid, unknown, SaveCVNGLogRecordsQueryParams, CVNGLogDTO[], void>,
  'path' | 'verb'
>

/**
 * saves cvng log data
 */
export const useSaveCVNGLogRecords = (props: UseSaveCVNGLogRecordsProps) =>
  useMutate<RestResponseVoid, unknown, SaveCVNGLogRecordsQueryParams, CVNGLogDTO[], void>('POST', `/cvng-log`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * saves cvng log data
 */
export const saveCVNGLogRecordsPromise = (
  props: MutateUsingFetchProps<RestResponseVoid, unknown, SaveCVNGLogRecordsQueryParams, CVNGLogDTO[], void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<RestResponseVoid, unknown, SaveCVNGLogRecordsQueryParams, CVNGLogDTO[], void>(
    'POST',
    getConfig('cv/api'),
    `/cvng-log`,
    props,
    signal
  )

export interface GetDatadogLogIndexesQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  tracingId: string
}

export type GetDatadogLogIndexesProps = Omit<
  GetProps<ResponseListString, Failure | Error, GetDatadogLogIndexesQueryParams, void>,
  'path'
>

/**
 * get datadog log indexes
 */
export const GetDatadogLogIndexes = (props: GetDatadogLogIndexesProps) => (
  <Get<ResponseListString, Failure | Error, GetDatadogLogIndexesQueryParams, void>
    path={`/datadog-logs/log-indexes`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDatadogLogIndexesProps = Omit<
  UseGetProps<ResponseListString, Failure | Error, GetDatadogLogIndexesQueryParams, void>,
  'path'
>

/**
 * get datadog log indexes
 */
export const useGetDatadogLogIndexes = (props: UseGetDatadogLogIndexesProps) =>
  useGet<ResponseListString, Failure | Error, GetDatadogLogIndexesQueryParams, void>(`/datadog-logs/log-indexes`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get datadog log indexes
 */
export const getDatadogLogIndexesPromise = (
  props: GetUsingFetchProps<ResponseListString, Failure | Error, GetDatadogLogIndexesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListString, Failure | Error, GetDatadogLogIndexesQueryParams, void>(
    getConfig('cv/api'),
    `/datadog-logs/log-indexes`,
    props,
    signal
  )

export interface GetDatadogLogSampleDataQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  tracingId: string
}

export type GetDatadogLogSampleDataProps = Omit<
  MutateProps<
    ResponseListLinkedHashMap,
    Failure | Error,
    GetDatadogLogSampleDataQueryParams,
    LogSampleRequestDTORequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * get sample data for a query
 */
export const GetDatadogLogSampleData = (props: GetDatadogLogSampleDataProps) => (
  <Mutate<
    ResponseListLinkedHashMap,
    Failure | Error,
    GetDatadogLogSampleDataQueryParams,
    LogSampleRequestDTORequestBody,
    void
  >
    verb="POST"
    path={`/datadog-logs/sample-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDatadogLogSampleDataProps = Omit<
  UseMutateProps<
    ResponseListLinkedHashMap,
    Failure | Error,
    GetDatadogLogSampleDataQueryParams,
    LogSampleRequestDTORequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * get sample data for a query
 */
export const useGetDatadogLogSampleData = (props: UseGetDatadogLogSampleDataProps) =>
  useMutate<
    ResponseListLinkedHashMap,
    Failure | Error,
    GetDatadogLogSampleDataQueryParams,
    LogSampleRequestDTORequestBody,
    void
  >('POST', `/datadog-logs/sample-data`, { base: getConfig('cv/api'), ...props })

/**
 * get sample data for a query
 */
export const getDatadogLogSampleDataPromise = (
  props: MutateUsingFetchProps<
    ResponseListLinkedHashMap,
    Failure | Error,
    GetDatadogLogSampleDataQueryParams,
    LogSampleRequestDTORequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseListLinkedHashMap,
    Failure | Error,
    GetDatadogLogSampleDataQueryParams,
    LogSampleRequestDTORequestBody,
    void
  >('POST', getConfig('cv/api'), `/datadog-logs/sample-data`, props, signal)

export interface GetDatadogActiveMetricsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  filter?: string
  tracingId: string
}

export type GetDatadogActiveMetricsProps = Omit<
  GetProps<ResponseListString, Failure | Error, GetDatadogActiveMetricsQueryParams, void>,
  'path'
>

/**
 * get datadog active metrics
 */
export const GetDatadogActiveMetrics = (props: GetDatadogActiveMetricsProps) => (
  <Get<ResponseListString, Failure | Error, GetDatadogActiveMetricsQueryParams, void>
    path={`/datadog-metrics/active-metrics`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDatadogActiveMetricsProps = Omit<
  UseGetProps<ResponseListString, Failure | Error, GetDatadogActiveMetricsQueryParams, void>,
  'path'
>

/**
 * get datadog active metrics
 */
export const useGetDatadogActiveMetrics = (props: UseGetDatadogActiveMetricsProps) =>
  useGet<ResponseListString, Failure | Error, GetDatadogActiveMetricsQueryParams, void>(
    `/datadog-metrics/active-metrics`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get datadog active metrics
 */
export const getDatadogActiveMetricsPromise = (
  props: GetUsingFetchProps<ResponseListString, Failure | Error, GetDatadogActiveMetricsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListString, Failure | Error, GetDatadogActiveMetricsQueryParams, void>(
    getConfig('cv/api'),
    `/datadog-metrics/active-metrics`,
    props,
    signal
  )

export interface GetDatadogDashboardDetailsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  dashboardId: string
  tracingId: string
}

export type GetDatadogDashboardDetailsProps = Omit<
  GetProps<ResponseListDatadogDashboardDetail, Failure | Error, GetDatadogDashboardDetailsQueryParams, void>,
  'path'
>

/**
 * get datadog dashboard details
 */
export const GetDatadogDashboardDetails = (props: GetDatadogDashboardDetailsProps) => (
  <Get<ResponseListDatadogDashboardDetail, Failure | Error, GetDatadogDashboardDetailsQueryParams, void>
    path={`/datadog-metrics/dashboard-details`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDatadogDashboardDetailsProps = Omit<
  UseGetProps<ResponseListDatadogDashboardDetail, Failure | Error, GetDatadogDashboardDetailsQueryParams, void>,
  'path'
>

/**
 * get datadog dashboard details
 */
export const useGetDatadogDashboardDetails = (props: UseGetDatadogDashboardDetailsProps) =>
  useGet<ResponseListDatadogDashboardDetail, Failure | Error, GetDatadogDashboardDetailsQueryParams, void>(
    `/datadog-metrics/dashboard-details`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get datadog dashboard details
 */
export const getDatadogDashboardDetailsPromise = (
  props: GetUsingFetchProps<
    ResponseListDatadogDashboardDetail,
    Failure | Error,
    GetDatadogDashboardDetailsQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListDatadogDashboardDetail, Failure | Error, GetDatadogDashboardDetailsQueryParams, void>(
    getConfig('cv/api'),
    `/datadog-metrics/dashboard-details`,
    props,
    signal
  )

export interface GetDatadogDashboardsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  pageSize: number
  offset: number
  filter?: string
  tracingId: string
}

export type GetDatadogDashboardsProps = Omit<
  GetProps<ResponsePageDatadogDashboardDTO, Failure | Error, GetDatadogDashboardsQueryParams, void>,
  'path'
>

/**
 * get all datadog dashboards
 */
export const GetDatadogDashboards = (props: GetDatadogDashboardsProps) => (
  <Get<ResponsePageDatadogDashboardDTO, Failure | Error, GetDatadogDashboardsQueryParams, void>
    path={`/datadog-metrics/dashboards`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDatadogDashboardsProps = Omit<
  UseGetProps<ResponsePageDatadogDashboardDTO, Failure | Error, GetDatadogDashboardsQueryParams, void>,
  'path'
>

/**
 * get all datadog dashboards
 */
export const useGetDatadogDashboards = (props: UseGetDatadogDashboardsProps) =>
  useGet<ResponsePageDatadogDashboardDTO, Failure | Error, GetDatadogDashboardsQueryParams, void>(
    `/datadog-metrics/dashboards`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get all datadog dashboards
 */
export const getDatadogDashboardsPromise = (
  props: GetUsingFetchProps<ResponsePageDatadogDashboardDTO, Failure | Error, GetDatadogDashboardsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageDatadogDashboardDTO, Failure | Error, GetDatadogDashboardsQueryParams, void>(
    getConfig('cv/api'),
    `/datadog-metrics/dashboards`,
    props,
    signal
  )

export interface GetDatadogMetricTagsListQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  metric: string
  tracingId: string
}

export type GetDatadogMetricTagsListProps = Omit<
  GetProps<ResponseListString, Failure | Error, GetDatadogMetricTagsListQueryParams, void>,
  'path'
>

/**
 * get datadog metric tag list
 */
export const GetDatadogMetricTagsList = (props: GetDatadogMetricTagsListProps) => (
  <Get<ResponseListString, Failure | Error, GetDatadogMetricTagsListQueryParams, void>
    path={`/datadog-metrics/metric-tags`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDatadogMetricTagsListProps = Omit<
  UseGetProps<ResponseListString, Failure | Error, GetDatadogMetricTagsListQueryParams, void>,
  'path'
>

/**
 * get datadog metric tag list
 */
export const useGetDatadogMetricTagsList = (props: UseGetDatadogMetricTagsListProps) =>
  useGet<ResponseListString, Failure | Error, GetDatadogMetricTagsListQueryParams, void>(
    `/datadog-metrics/metric-tags`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get datadog metric tag list
 */
export const getDatadogMetricTagsListPromise = (
  props: GetUsingFetchProps<ResponseListString, Failure | Error, GetDatadogMetricTagsListQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListString, Failure | Error, GetDatadogMetricTagsListQueryParams, void>(
    getConfig('cv/api'),
    `/datadog-metrics/metric-tags`,
    props,
    signal
  )

export interface GetDatadogMetricTagsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  metric: string
  filter?: string
  tracingId: string
}

export type GetDatadogMetricTagsProps = Omit<
  GetProps<ResponseMetricTagResponseDTO, Failure | Error, GetDatadogMetricTagsQueryParams, void>,
  'path'
>

/**
 * get datadog metric tag list
 */
export const GetDatadogMetricTags = (props: GetDatadogMetricTagsProps) => (
  <Get<ResponseMetricTagResponseDTO, Failure | Error, GetDatadogMetricTagsQueryParams, void>
    path={`/datadog-metrics/metric-tags-v2`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDatadogMetricTagsProps = Omit<
  UseGetProps<ResponseMetricTagResponseDTO, Failure | Error, GetDatadogMetricTagsQueryParams, void>,
  'path'
>

/**
 * get datadog metric tag list
 */
export const useGetDatadogMetricTags = (props: UseGetDatadogMetricTagsProps) =>
  useGet<ResponseMetricTagResponseDTO, Failure | Error, GetDatadogMetricTagsQueryParams, void>(
    `/datadog-metrics/metric-tags-v2`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get datadog metric tag list
 */
export const getDatadogMetricTagsPromise = (
  props: GetUsingFetchProps<ResponseMetricTagResponseDTO, Failure | Error, GetDatadogMetricTagsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseMetricTagResponseDTO, Failure | Error, GetDatadogMetricTagsQueryParams, void>(
    getConfig('cv/api'),
    `/datadog-metrics/metric-tags-v2`,
    props,
    signal
  )

export interface GetDatadogSampleDataQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  tracingId: string
  query: string
}

export type GetDatadogSampleDataProps = Omit<
  GetProps<ResponseListTimeSeriesSampleDTO, Failure | Error, GetDatadogSampleDataQueryParams, void>,
  'path'
>

/**
 * get datadog sample data
 */
export const GetDatadogSampleData = (props: GetDatadogSampleDataProps) => (
  <Get<ResponseListTimeSeriesSampleDTO, Failure | Error, GetDatadogSampleDataQueryParams, void>
    path={`/datadog-metrics/sample-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDatadogSampleDataProps = Omit<
  UseGetProps<ResponseListTimeSeriesSampleDTO, Failure | Error, GetDatadogSampleDataQueryParams, void>,
  'path'
>

/**
 * get datadog sample data
 */
export const useGetDatadogSampleData = (props: UseGetDatadogSampleDataProps) =>
  useGet<ResponseListTimeSeriesSampleDTO, Failure | Error, GetDatadogSampleDataQueryParams, void>(
    `/datadog-metrics/sample-data`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get datadog sample data
 */
export const getDatadogSampleDataPromise = (
  props: GetUsingFetchProps<ResponseListTimeSeriesSampleDTO, Failure | Error, GetDatadogSampleDataQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListTimeSeriesSampleDTO, Failure | Error, GetDatadogSampleDataQueryParams, void>(
    getConfig('cv/api'),
    `/datadog-metrics/sample-data`,
    props,
    signal
  )

export interface GetDeploymentTimeSeriesQueryParams {
  accountId?: string
  filter?: string
  healthSources?: string[]
  anomalousMetricsOnly?: boolean
  hostNames?: string[]
  transactionNames?: string[]
  anomalousNodesOnly?: boolean
  pageNumber?: number
  pageSize?: number
}

export interface GetDeploymentTimeSeriesPathParams {
  verificationJobInstanceId: string
}

export type GetDeploymentTimeSeriesProps = Omit<
  GetProps<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentTimeSeriesQueryParams,
    GetDeploymentTimeSeriesPathParams
  >,
  'path'
> &
  GetDeploymentTimeSeriesPathParams

/**
 * get metrics for given verificationJob
 */
export const GetDeploymentTimeSeries = ({ verificationJobInstanceId, ...props }: GetDeploymentTimeSeriesProps) => (
  <Get<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentTimeSeriesQueryParams,
    GetDeploymentTimeSeriesPathParams
  >
    path={`/deployment-time-series-analysis/${verificationJobInstanceId}`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDeploymentTimeSeriesProps = Omit<
  UseGetProps<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentTimeSeriesQueryParams,
    GetDeploymentTimeSeriesPathParams
  >,
  'path'
> &
  GetDeploymentTimeSeriesPathParams

/**
 * get metrics for given verificationJob
 */
export const useGetDeploymentTimeSeries = ({ verificationJobInstanceId, ...props }: UseGetDeploymentTimeSeriesProps) =>
  useGet<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentTimeSeriesQueryParams,
    GetDeploymentTimeSeriesPathParams
  >(
    (paramsInPath: GetDeploymentTimeSeriesPathParams) =>
      `/deployment-time-series-analysis/${paramsInPath.verificationJobInstanceId}`,
    { base: getConfig('cv/api'), pathParams: { verificationJobInstanceId }, ...props }
  )

/**
 * get metrics for given verificationJob
 */
export const getDeploymentTimeSeriesPromise = (
  {
    verificationJobInstanceId,
    ...props
  }: GetUsingFetchProps<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentTimeSeriesQueryParams,
    GetDeploymentTimeSeriesPathParams
  > & { verificationJobInstanceId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetDeploymentTimeSeriesQueryParams,
    GetDeploymentTimeSeriesPathParams
  >(getConfig('cv/api'), `/deployment-time-series-analysis/${verificationJobInstanceId}`, props, signal)

export interface GetDynatraceSampleDataQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  tracingId: string
}

export type GetDynatraceSampleDataProps = Omit<
  MutateProps<
    ResponseListTimeSeriesSampleDTO,
    Failure | Error,
    GetDynatraceSampleDataQueryParams,
    DynatraceSampleDataRequestDTO,
    void
  >,
  'path' | 'verb'
>

/**
 * get dynatrace sample data
 */
export const GetDynatraceSampleData = (props: GetDynatraceSampleDataProps) => (
  <Mutate<
    ResponseListTimeSeriesSampleDTO,
    Failure | Error,
    GetDynatraceSampleDataQueryParams,
    DynatraceSampleDataRequestDTO,
    void
  >
    verb="POST"
    path={`/dynatrace/fetch-sample-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDynatraceSampleDataProps = Omit<
  UseMutateProps<
    ResponseListTimeSeriesSampleDTO,
    Failure | Error,
    GetDynatraceSampleDataQueryParams,
    DynatraceSampleDataRequestDTO,
    void
  >,
  'path' | 'verb'
>

/**
 * get dynatrace sample data
 */
export const useGetDynatraceSampleData = (props: UseGetDynatraceSampleDataProps) =>
  useMutate<
    ResponseListTimeSeriesSampleDTO,
    Failure | Error,
    GetDynatraceSampleDataQueryParams,
    DynatraceSampleDataRequestDTO,
    void
  >('POST', `/dynatrace/fetch-sample-data`, { base: getConfig('cv/api'), ...props })

/**
 * get dynatrace sample data
 */
export const getDynatraceSampleDataPromise = (
  props: MutateUsingFetchProps<
    ResponseListTimeSeriesSampleDTO,
    Failure | Error,
    GetDynatraceSampleDataQueryParams,
    DynatraceSampleDataRequestDTO,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseListTimeSeriesSampleDTO,
    Failure | Error,
    GetDynatraceSampleDataQueryParams,
    DynatraceSampleDataRequestDTO,
    void
  >('POST', getConfig('cv/api'), `/dynatrace/fetch-sample-data`, props, signal)

export interface GetDynatraceMetricDataQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  tracingId: string
}

export type GetDynatraceMetricDataProps = Omit<
  MutateProps<
    ResponseSetMetricPackValidationResponse,
    Failure | Error,
    GetDynatraceMetricDataQueryParams,
    DynatraceValidateDataRequestDTO,
    void
  >,
  'path' | 'verb'
>

/**
 * get metric data for given metric packs
 */
export const GetDynatraceMetricData = (props: GetDynatraceMetricDataProps) => (
  <Mutate<
    ResponseSetMetricPackValidationResponse,
    Failure | Error,
    GetDynatraceMetricDataQueryParams,
    DynatraceValidateDataRequestDTO,
    void
  >
    verb="POST"
    path={`/dynatrace/metric-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDynatraceMetricDataProps = Omit<
  UseMutateProps<
    ResponseSetMetricPackValidationResponse,
    Failure | Error,
    GetDynatraceMetricDataQueryParams,
    DynatraceValidateDataRequestDTO,
    void
  >,
  'path' | 'verb'
>

/**
 * get metric data for given metric packs
 */
export const useGetDynatraceMetricData = (props: UseGetDynatraceMetricDataProps) =>
  useMutate<
    ResponseSetMetricPackValidationResponse,
    Failure | Error,
    GetDynatraceMetricDataQueryParams,
    DynatraceValidateDataRequestDTO,
    void
  >('POST', `/dynatrace/metric-data`, { base: getConfig('cv/api'), ...props })

/**
 * get metric data for given metric packs
 */
export const getDynatraceMetricDataPromise = (
  props: MutateUsingFetchProps<
    ResponseSetMetricPackValidationResponse,
    Failure | Error,
    GetDynatraceMetricDataQueryParams,
    DynatraceValidateDataRequestDTO,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseSetMetricPackValidationResponse,
    Failure | Error,
    GetDynatraceMetricDataQueryParams,
    DynatraceValidateDataRequestDTO,
    void
  >('POST', getConfig('cv/api'), `/dynatrace/metric-data`, props, signal)

export interface GetAllDynatraceServiceMetricsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  tracingId: string
}

export type GetAllDynatraceServiceMetricsProps = Omit<
  GetProps<ResponseListDynatraceMetricDTO, Failure | Error, GetAllDynatraceServiceMetricsQueryParams, void>,
  'path'
>

/**
 * get all dynatrace service metrics
 */
export const GetAllDynatraceServiceMetrics = (props: GetAllDynatraceServiceMetricsProps) => (
  <Get<ResponseListDynatraceMetricDTO, Failure | Error, GetAllDynatraceServiceMetricsQueryParams, void>
    path={`/dynatrace/metrics`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAllDynatraceServiceMetricsProps = Omit<
  UseGetProps<ResponseListDynatraceMetricDTO, Failure | Error, GetAllDynatraceServiceMetricsQueryParams, void>,
  'path'
>

/**
 * get all dynatrace service metrics
 */
export const useGetAllDynatraceServiceMetrics = (props: UseGetAllDynatraceServiceMetricsProps) =>
  useGet<ResponseListDynatraceMetricDTO, Failure | Error, GetAllDynatraceServiceMetricsQueryParams, void>(
    `/dynatrace/metrics`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get all dynatrace service metrics
 */
export const getAllDynatraceServiceMetricsPromise = (
  props: GetUsingFetchProps<
    ResponseListDynatraceMetricDTO,
    Failure | Error,
    GetAllDynatraceServiceMetricsQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListDynatraceMetricDTO, Failure | Error, GetAllDynatraceServiceMetricsQueryParams, void>(
    getConfig('cv/api'),
    `/dynatrace/metrics`,
    props,
    signal
  )

export interface GetDynatraceServiceDetailsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  serviceId: string
  tracingId: string
}

export type GetDynatraceServiceDetailsProps = Omit<
  GetProps<ResponseDynatraceServiceDTO, Failure | Error, GetDynatraceServiceDetailsQueryParams, void>,
  'path'
>

/**
 * get dynatrace service details
 */
export const GetDynatraceServiceDetails = (props: GetDynatraceServiceDetailsProps) => (
  <Get<ResponseDynatraceServiceDTO, Failure | Error, GetDynatraceServiceDetailsQueryParams, void>
    path={`/dynatrace/service-details`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDynatraceServiceDetailsProps = Omit<
  UseGetProps<ResponseDynatraceServiceDTO, Failure | Error, GetDynatraceServiceDetailsQueryParams, void>,
  'path'
>

/**
 * get dynatrace service details
 */
export const useGetDynatraceServiceDetails = (props: UseGetDynatraceServiceDetailsProps) =>
  useGet<ResponseDynatraceServiceDTO, Failure | Error, GetDynatraceServiceDetailsQueryParams, void>(
    `/dynatrace/service-details`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get dynatrace service details
 */
export const getDynatraceServiceDetailsPromise = (
  props: GetUsingFetchProps<ResponseDynatraceServiceDTO, Failure | Error, GetDynatraceServiceDetailsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseDynatraceServiceDTO, Failure | Error, GetDynatraceServiceDetailsQueryParams, void>(
    getConfig('cv/api'),
    `/dynatrace/service-details`,
    props,
    signal
  )

export interface GetDynatraceServicesQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  tracingId: string
}

export type GetDynatraceServicesProps = Omit<
  GetProps<ResponseListDynatraceServiceDTO, Failure | Error, GetDynatraceServicesQueryParams, void>,
  'path'
>

/**
 * get all dynatrace services
 */
export const GetDynatraceServices = (props: GetDynatraceServicesProps) => (
  <Get<ResponseListDynatraceServiceDTO, Failure | Error, GetDynatraceServicesQueryParams, void>
    path={`/dynatrace/services`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetDynatraceServicesProps = Omit<
  UseGetProps<ResponseListDynatraceServiceDTO, Failure | Error, GetDynatraceServicesQueryParams, void>,
  'path'
>

/**
 * get all dynatrace services
 */
export const useGetDynatraceServices = (props: UseGetDynatraceServicesProps) =>
  useGet<ResponseListDynatraceServiceDTO, Failure | Error, GetDynatraceServicesQueryParams, void>(
    `/dynatrace/services`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get all dynatrace services
 */
export const getDynatraceServicesPromise = (
  props: GetUsingFetchProps<ResponseListDynatraceServiceDTO, Failure | Error, GetDynatraceServicesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListDynatraceServiceDTO, Failure | Error, GetDynatraceServicesQueryParams, void>(
    getConfig('cv/api'),
    `/dynatrace/services`,
    props,
    signal
  )

export interface GetAllErrorTrackingClusterDataQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  monitoredServiceIdentifier?: string
  clusterTypes?: ('KNOWN' | 'UNEXPECTED' | 'UNKNOWN')[]
  startTime: number
  endTime: number
  healthSources?: string[]
}

export type GetAllErrorTrackingClusterDataProps = Omit<
  GetProps<
    RestResponseListLiveMonitoringLogAnalysisClusterDTO,
    unknown,
    GetAllErrorTrackingClusterDataQueryParams,
    void
  >,
  'path'
>

/**
 * get all log cluster data for a time range
 */
export const GetAllErrorTrackingClusterData = (props: GetAllErrorTrackingClusterDataProps) => (
  <Get<RestResponseListLiveMonitoringLogAnalysisClusterDTO, unknown, GetAllErrorTrackingClusterDataQueryParams, void>
    path={`/error-tracking-dashboard/cluster`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAllErrorTrackingClusterDataProps = Omit<
  UseGetProps<
    RestResponseListLiveMonitoringLogAnalysisClusterDTO,
    unknown,
    GetAllErrorTrackingClusterDataQueryParams,
    void
  >,
  'path'
>

/**
 * get all log cluster data for a time range
 */
export const useGetAllErrorTrackingClusterData = (props: UseGetAllErrorTrackingClusterDataProps) =>
  useGet<RestResponseListLiveMonitoringLogAnalysisClusterDTO, unknown, GetAllErrorTrackingClusterDataQueryParams, void>(
    `/error-tracking-dashboard/cluster`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get all log cluster data for a time range
 */
export const getAllErrorTrackingClusterDataPromise = (
  props: GetUsingFetchProps<
    RestResponseListLiveMonitoringLogAnalysisClusterDTO,
    unknown,
    GetAllErrorTrackingClusterDataQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseListLiveMonitoringLogAnalysisClusterDTO,
    unknown,
    GetAllErrorTrackingClusterDataQueryParams,
    void
  >(getConfig('cv/api'), `/error-tracking-dashboard/cluster`, props, signal)

export interface GetAllErrorTrackingDataQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  monitoredServiceIdentifier?: string
  clusterTypes?: ('KNOWN' | 'UNEXPECTED' | 'UNKNOWN')[]
  startTime: number
  endTime: number
  healthSources?: string[]
  page?: number
  size?: number
}

export type GetAllErrorTrackingDataProps = Omit<
  GetProps<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllErrorTrackingDataQueryParams, void>,
  'path'
>

/**
 * get all error tracking data for a time range
 */
export const GetAllErrorTrackingData = (props: GetAllErrorTrackingDataProps) => (
  <Get<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllErrorTrackingDataQueryParams, void>
    path={`/error-tracking-dashboard/data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAllErrorTrackingDataProps = Omit<
  UseGetProps<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllErrorTrackingDataQueryParams, void>,
  'path'
>

/**
 * get all error tracking data for a time range
 */
export const useGetAllErrorTrackingData = (props: UseGetAllErrorTrackingDataProps) =>
  useGet<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllErrorTrackingDataQueryParams, void>(
    `/error-tracking-dashboard/data`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get all error tracking data for a time range
 */
export const getAllErrorTrackingDataPromise = (
  props: GetUsingFetchProps<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllErrorTrackingDataQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllErrorTrackingDataQueryParams, void>(
    getConfig('cv/api'),
    `/error-tracking-dashboard/data`,
    props,
    signal
  )

export interface GetNamespacesQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  offset: number
  pageSize: number
  filter?: string
}

export type GetNamespacesProps = Omit<
  GetProps<ResponsePageString, Failure | Error, GetNamespacesQueryParams, void>,
  'path'
>

/**
 * gets a list of kubernetes namespaces
 */
export const GetNamespaces = (props: GetNamespacesProps) => (
  <Get<ResponsePageString, Failure | Error, GetNamespacesQueryParams, void>
    path={`/kubernetes/namespaces`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetNamespacesProps = Omit<
  UseGetProps<ResponsePageString, Failure | Error, GetNamespacesQueryParams, void>,
  'path'
>

/**
 * gets a list of kubernetes namespaces
 */
export const useGetNamespaces = (props: UseGetNamespacesProps) =>
  useGet<ResponsePageString, Failure | Error, GetNamespacesQueryParams, void>(`/kubernetes/namespaces`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * gets a list of kubernetes namespaces
 */
export const getNamespacesPromise = (
  props: GetUsingFetchProps<ResponsePageString, Failure | Error, GetNamespacesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageString, Failure | Error, GetNamespacesQueryParams, void>(
    getConfig('cv/api'),
    `/kubernetes/namespaces`,
    props,
    signal
  )

export interface ValidateK8sConnectivityQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  tracingId: string
}

export type ValidateK8sConnectivityProps = Omit<
  GetProps<ResponseBoolean, Failure | Error, ValidateK8sConnectivityQueryParams, void>,
  'path'
>

/**
 * validate permissions of a k8s connector for events
 */
export const ValidateK8sConnectivity = (props: ValidateK8sConnectivityProps) => (
  <Get<ResponseBoolean, Failure | Error, ValidateK8sConnectivityQueryParams, void>
    path={`/kubernetes/validate`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseValidateK8sConnectivityProps = Omit<
  UseGetProps<ResponseBoolean, Failure | Error, ValidateK8sConnectivityQueryParams, void>,
  'path'
>

/**
 * validate permissions of a k8s connector for events
 */
export const useValidateK8sConnectivity = (props: UseValidateK8sConnectivityProps) =>
  useGet<ResponseBoolean, Failure | Error, ValidateK8sConnectivityQueryParams, void>(`/kubernetes/validate`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * validate permissions of a k8s connector for events
 */
export const validateK8sConnectivityPromise = (
  props: GetUsingFetchProps<ResponseBoolean, Failure | Error, ValidateK8sConnectivityQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseBoolean, Failure | Error, ValidateK8sConnectivityQueryParams, void>(
    getConfig('cv/api'),
    `/kubernetes/validate`,
    props,
    signal
  )

export interface GetWorkloadsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  namespace: string
  offset: number
  pageSize: number
  filter?: string
}

export type GetWorkloadsProps = Omit<
  GetProps<ResponsePageString, Failure | Error, GetWorkloadsQueryParams, void>,
  'path'
>

/**
 * gets a list of kubernetes workloads
 */
export const GetWorkloads = (props: GetWorkloadsProps) => (
  <Get<ResponsePageString, Failure | Error, GetWorkloadsQueryParams, void>
    path={`/kubernetes/workloads`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetWorkloadsProps = Omit<
  UseGetProps<ResponsePageString, Failure | Error, GetWorkloadsQueryParams, void>,
  'path'
>

/**
 * gets a list of kubernetes workloads
 */
export const useGetWorkloads = (props: UseGetWorkloadsProps) =>
  useGet<ResponsePageString, Failure | Error, GetWorkloadsQueryParams, void>(`/kubernetes/workloads`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * gets a list of kubernetes workloads
 */
export const getWorkloadsPromise = (
  props: GetUsingFetchProps<ResponsePageString, Failure | Error, GetWorkloadsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageString, Failure | Error, GetWorkloadsQueryParams, void>(
    getConfig('cv/api'),
    `/kubernetes/workloads`,
    props,
    signal
  )

export interface GetAllLogsClusterDataQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  monitoredServiceIdentifier?: string
  clusterTypes?: ('KNOWN' | 'UNEXPECTED' | 'UNKNOWN')[]
  startTime: number
  endTime: number
  healthSources?: string[]
}

export type GetAllLogsClusterDataProps = Omit<
  GetProps<RestResponseListLiveMonitoringLogAnalysisClusterDTO, unknown, GetAllLogsClusterDataQueryParams, void>,
  'path'
>

/**
 * get all log cluster data for a time range
 */
export const GetAllLogsClusterData = (props: GetAllLogsClusterDataProps) => (
  <Get<RestResponseListLiveMonitoringLogAnalysisClusterDTO, unknown, GetAllLogsClusterDataQueryParams, void>
    path={`/log-dashboard/logs-cluster`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAllLogsClusterDataProps = Omit<
  UseGetProps<RestResponseListLiveMonitoringLogAnalysisClusterDTO, unknown, GetAllLogsClusterDataQueryParams, void>,
  'path'
>

/**
 * get all log cluster data for a time range
 */
export const useGetAllLogsClusterData = (props: UseGetAllLogsClusterDataProps) =>
  useGet<RestResponseListLiveMonitoringLogAnalysisClusterDTO, unknown, GetAllLogsClusterDataQueryParams, void>(
    `/log-dashboard/logs-cluster`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get all log cluster data for a time range
 */
export const getAllLogsClusterDataPromise = (
  props: GetUsingFetchProps<
    RestResponseListLiveMonitoringLogAnalysisClusterDTO,
    unknown,
    GetAllLogsClusterDataQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListLiveMonitoringLogAnalysisClusterDTO, unknown, GetAllLogsClusterDataQueryParams, void>(
    getConfig('cv/api'),
    `/log-dashboard/logs-cluster`,
    props,
    signal
  )

export interface GetAllLogsDataQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  monitoredServiceIdentifier?: string
  clusterTypes?: ('KNOWN' | 'UNEXPECTED' | 'UNKNOWN')[]
  startTime: number
  endTime: number
  healthSources?: string[]
  page?: number
  size?: number
}

export type GetAllLogsDataProps = Omit<
  GetProps<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllLogsDataQueryParams, void>,
  'path'
>

/**
 * get all log data for a time range
 */
export const GetAllLogsData = (props: GetAllLogsDataProps) => (
  <Get<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllLogsDataQueryParams, void>
    path={`/log-dashboard/logs-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAllLogsDataProps = Omit<
  UseGetProps<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllLogsDataQueryParams, void>,
  'path'
>

/**
 * get all log data for a time range
 */
export const useGetAllLogsData = (props: UseGetAllLogsDataProps) =>
  useGet<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllLogsDataQueryParams, void>(`/log-dashboard/logs-data`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get all log data for a time range
 */
export const getAllLogsDataPromise = (
  props: GetUsingFetchProps<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllLogsDataQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponsePageAnalyzedLogDataDTO, unknown, GetAllLogsDataQueryParams, void>(
    getConfig('cv/api'),
    `/log-dashboard/logs-data`,
    props,
    signal
  )

export interface GetMetricPacksQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  dataSourceType:
    | 'APP_DYNAMICS'
    | 'SPLUNK'
    | 'STACKDRIVER'
    | 'STACKDRIVER_LOG'
    | 'KUBERNETES'
    | 'NEW_RELIC'
    | 'PROMETHEUS'
    | 'DATADOG_METRICS'
    | 'DATADOG_LOG'
    | 'ERROR_TRACKING'
    | 'DYNATRACE'
    | 'CUSTOM_HEALTH_METRIC'
    | 'CUSTOM_HEALTH_LOG'
}

export type GetMetricPacksProps = Omit<
  GetProps<RestResponseListMetricPackDTO, unknown, GetMetricPacksQueryParams, void>,
  'path'
>

/**
 * get all metric packs for a connector type
 */
export const GetMetricPacks = (props: GetMetricPacksProps) => (
  <Get<RestResponseListMetricPackDTO, unknown, GetMetricPacksQueryParams, void>
    path={`/metric-pack`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMetricPacksProps = Omit<
  UseGetProps<RestResponseListMetricPackDTO, unknown, GetMetricPacksQueryParams, void>,
  'path'
>

/**
 * get all metric packs for a connector type
 */
export const useGetMetricPacks = (props: UseGetMetricPacksProps) =>
  useGet<RestResponseListMetricPackDTO, unknown, GetMetricPacksQueryParams, void>(`/metric-pack`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get all metric packs for a connector type
 */
export const getMetricPacksPromise = (
  props: GetUsingFetchProps<RestResponseListMetricPackDTO, unknown, GetMetricPacksQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListMetricPackDTO, unknown, GetMetricPacksQueryParams, void>(
    getConfig('cv/api'),
    `/metric-pack`,
    props,
    signal
  )

export interface SaveMetricPacksQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  dataSourceType:
    | 'APP_DYNAMICS'
    | 'SPLUNK'
    | 'STACKDRIVER'
    | 'STACKDRIVER_LOG'
    | 'KUBERNETES'
    | 'NEW_RELIC'
    | 'PROMETHEUS'
    | 'DATADOG_METRICS'
    | 'DATADOG_LOG'
    | 'ERROR_TRACKING'
    | 'DYNATRACE'
    | 'CUSTOM_HEALTH_METRIC'
    | 'CUSTOM_HEALTH_LOG'
}

export type SaveMetricPacksProps = Omit<
  MutateProps<RestResponseBoolean, unknown, SaveMetricPacksQueryParams, MetricPack[], void>,
  'path' | 'verb'
>

/**
 * saves a metric pack for a connector type
 */
export const SaveMetricPacks = (props: SaveMetricPacksProps) => (
  <Mutate<RestResponseBoolean, unknown, SaveMetricPacksQueryParams, MetricPack[], void>
    verb="POST"
    path={`/metric-pack`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseSaveMetricPacksProps = Omit<
  UseMutateProps<RestResponseBoolean, unknown, SaveMetricPacksQueryParams, MetricPack[], void>,
  'path' | 'verb'
>

/**
 * saves a metric pack for a connector type
 */
export const useSaveMetricPacks = (props: UseSaveMetricPacksProps) =>
  useMutate<RestResponseBoolean, unknown, SaveMetricPacksQueryParams, MetricPack[], void>('POST', `/metric-pack`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * saves a metric pack for a connector type
 */
export const saveMetricPacksPromise = (
  props: MutateUsingFetchProps<RestResponseBoolean, unknown, SaveMetricPacksQueryParams, MetricPack[], void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<RestResponseBoolean, unknown, SaveMetricPacksQueryParams, MetricPack[], void>(
    'POST',
    getConfig('cv/api'),
    `/metric-pack`,
    props,
    signal
  )

export interface ListMonitoredServiceQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  environmentIdentifier?: string
  offset?: number
  pageSize?: number
  filter?: string
  servicesAtRiskFilter?: boolean
}

export type ListMonitoredServiceProps = Omit<
  GetProps<ResponsePageMonitoredServiceListItemDTO, unknown, ListMonitoredServiceQueryParams, void>,
  'path'
>

/**
 * list monitored service data
 */
export const ListMonitoredService = (props: ListMonitoredServiceProps) => (
  <Get<ResponsePageMonitoredServiceListItemDTO, unknown, ListMonitoredServiceQueryParams, void>
    path={`/monitored-service`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseListMonitoredServiceProps = Omit<
  UseGetProps<ResponsePageMonitoredServiceListItemDTO, unknown, ListMonitoredServiceQueryParams, void>,
  'path'
>

/**
 * list monitored service data
 */
export const useListMonitoredService = (props: UseListMonitoredServiceProps) =>
  useGet<ResponsePageMonitoredServiceListItemDTO, unknown, ListMonitoredServiceQueryParams, void>(
    `/monitored-service`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * list monitored service data
 */
export const listMonitoredServicePromise = (
  props: GetUsingFetchProps<ResponsePageMonitoredServiceListItemDTO, unknown, ListMonitoredServiceQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageMonitoredServiceListItemDTO, unknown, ListMonitoredServiceQueryParams, void>(
    getConfig('cv/api'),
    `/monitored-service`,
    props,
    signal
  )

export interface SaveMonitoredServiceQueryParams {
  accountId: string
}

export type SaveMonitoredServiceProps = Omit<
  MutateProps<
    RestResponseMonitoredServiceResponse,
    unknown,
    SaveMonitoredServiceQueryParams,
    MonitoredServiceDTORequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * saves monitored service data
 */
export const SaveMonitoredService = (props: SaveMonitoredServiceProps) => (
  <Mutate<
    RestResponseMonitoredServiceResponse,
    unknown,
    SaveMonitoredServiceQueryParams,
    MonitoredServiceDTORequestBody,
    void
  >
    verb="POST"
    path={`/monitored-service`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseSaveMonitoredServiceProps = Omit<
  UseMutateProps<
    RestResponseMonitoredServiceResponse,
    unknown,
    SaveMonitoredServiceQueryParams,
    MonitoredServiceDTORequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * saves monitored service data
 */
export const useSaveMonitoredService = (props: UseSaveMonitoredServiceProps) =>
  useMutate<
    RestResponseMonitoredServiceResponse,
    unknown,
    SaveMonitoredServiceQueryParams,
    MonitoredServiceDTORequestBody,
    void
  >('POST', `/monitored-service`, { base: getConfig('cv/api'), ...props })

/**
 * saves monitored service data
 */
export const saveMonitoredServicePromise = (
  props: MutateUsingFetchProps<
    RestResponseMonitoredServiceResponse,
    unknown,
    SaveMonitoredServiceQueryParams,
    MonitoredServiceDTORequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    RestResponseMonitoredServiceResponse,
    unknown,
    SaveMonitoredServiceQueryParams,
    MonitoredServiceDTORequestBody,
    void
  >('POST', getConfig('cv/api'), `/monitored-service`, props, signal)

export interface GetAllMonitoredServicesWithTimeSeriesHealthSourcesQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type GetAllMonitoredServicesWithTimeSeriesHealthSourcesProps = Omit<
  GetProps<
    ResponseListMonitoredServiceWithHealthSources,
    unknown,
    GetAllMonitoredServicesWithTimeSeriesHealthSourcesQueryParams,
    void
  >,
  'path'
>

/**
 * get all of monitored service data with time series health sources
 */
export const GetAllMonitoredServicesWithTimeSeriesHealthSources = (
  props: GetAllMonitoredServicesWithTimeSeriesHealthSourcesProps
) => (
  <Get<
    ResponseListMonitoredServiceWithHealthSources,
    unknown,
    GetAllMonitoredServicesWithTimeSeriesHealthSourcesQueryParams,
    void
  >
    path={`/monitored-service/all/time-series-health-sources`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAllMonitoredServicesWithTimeSeriesHealthSourcesProps = Omit<
  UseGetProps<
    ResponseListMonitoredServiceWithHealthSources,
    unknown,
    GetAllMonitoredServicesWithTimeSeriesHealthSourcesQueryParams,
    void
  >,
  'path'
>

/**
 * get all of monitored service data with time series health sources
 */
export const useGetAllMonitoredServicesWithTimeSeriesHealthSources = (
  props: UseGetAllMonitoredServicesWithTimeSeriesHealthSourcesProps
) =>
  useGet<
    ResponseListMonitoredServiceWithHealthSources,
    unknown,
    GetAllMonitoredServicesWithTimeSeriesHealthSourcesQueryParams,
    void
  >(`/monitored-service/all/time-series-health-sources`, { base: getConfig('cv/api'), ...props })

/**
 * get all of monitored service data with time series health sources
 */
export const getAllMonitoredServicesWithTimeSeriesHealthSourcesPromise = (
  props: GetUsingFetchProps<
    ResponseListMonitoredServiceWithHealthSources,
    unknown,
    GetAllMonitoredServicesWithTimeSeriesHealthSourcesQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    ResponseListMonitoredServiceWithHealthSources,
    unknown,
    GetAllMonitoredServicesWithTimeSeriesHealthSourcesQueryParams,
    void
  >(getConfig('cv/api'), `/monitored-service/all/time-series-health-sources`, props, signal)

export interface GetCountOfServicesQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  environmentIdentifier?: string
  filter?: string
}

export type GetCountOfServicesProps = Omit<
  GetProps<CountServiceDTO, unknown, GetCountOfServicesQueryParams, void>,
  'path'
>

/**
 * get count of types of services like Monitored Service, Services at Risk
 */
export const GetCountOfServices = (props: GetCountOfServicesProps) => (
  <Get<CountServiceDTO, unknown, GetCountOfServicesQueryParams, void>
    path={`/monitored-service/count-of-services`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetCountOfServicesProps = Omit<
  UseGetProps<CountServiceDTO, unknown, GetCountOfServicesQueryParams, void>,
  'path'
>

/**
 * get count of types of services like Monitored Service, Services at Risk
 */
export const useGetCountOfServices = (props: UseGetCountOfServicesProps) =>
  useGet<CountServiceDTO, unknown, GetCountOfServicesQueryParams, void>(`/monitored-service/count-of-services`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get count of types of services like Monitored Service, Services at Risk
 */
export const getCountOfServicesPromise = (
  props: GetUsingFetchProps<CountServiceDTO, unknown, GetCountOfServicesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<CountServiceDTO, unknown, GetCountOfServicesQueryParams, void>(
    getConfig('cv/api'),
    `/monitored-service/count-of-services`,
    props,
    signal
  )

export interface CreateDefaultMonitoredServiceQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  environmentIdentifier: string
  serviceIdentifier: string
}

export type CreateDefaultMonitoredServiceProps = Omit<
  MutateProps<RestResponseMonitoredServiceResponse, unknown, CreateDefaultMonitoredServiceQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * created default monitored service
 */
export const CreateDefaultMonitoredService = (props: CreateDefaultMonitoredServiceProps) => (
  <Mutate<RestResponseMonitoredServiceResponse, unknown, CreateDefaultMonitoredServiceQueryParams, void, void>
    verb="POST"
    path={`/monitored-service/create-default`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseCreateDefaultMonitoredServiceProps = Omit<
  UseMutateProps<RestResponseMonitoredServiceResponse, unknown, CreateDefaultMonitoredServiceQueryParams, void, void>,
  'path' | 'verb'
>

/**
 * created default monitored service
 */
export const useCreateDefaultMonitoredService = (props: UseCreateDefaultMonitoredServiceProps) =>
  useMutate<RestResponseMonitoredServiceResponse, unknown, CreateDefaultMonitoredServiceQueryParams, void, void>(
    'POST',
    `/monitored-service/create-default`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * created default monitored service
 */
export const createDefaultMonitoredServicePromise = (
  props: MutateUsingFetchProps<
    RestResponseMonitoredServiceResponse,
    unknown,
    CreateDefaultMonitoredServiceQueryParams,
    void,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<RestResponseMonitoredServiceResponse, unknown, CreateDefaultMonitoredServiceQueryParams, void, void>(
    'POST',
    getConfig('cv/api'),
    `/monitored-service/create-default`,
    props,
    signal
  )

export interface GetMonitoredServiceListEnvironmentsQueryParams {
  accountId?: string
  orgIdentifier?: string
  projectIdentifier?: string
}

export type GetMonitoredServiceListEnvironmentsProps = Omit<
  GetProps<ResponseListEnvironmentResponse, unknown, GetMonitoredServiceListEnvironmentsQueryParams, void>,
  'path'
>

/**
 * get monitored service list environments data
 */
export const GetMonitoredServiceListEnvironments = (props: GetMonitoredServiceListEnvironmentsProps) => (
  <Get<ResponseListEnvironmentResponse, unknown, GetMonitoredServiceListEnvironmentsQueryParams, void>
    path={`/monitored-service/environments`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMonitoredServiceListEnvironmentsProps = Omit<
  UseGetProps<ResponseListEnvironmentResponse, unknown, GetMonitoredServiceListEnvironmentsQueryParams, void>,
  'path'
>

/**
 * get monitored service list environments data
 */
export const useGetMonitoredServiceListEnvironments = (props: UseGetMonitoredServiceListEnvironmentsProps) =>
  useGet<ResponseListEnvironmentResponse, unknown, GetMonitoredServiceListEnvironmentsQueryParams, void>(
    `/monitored-service/environments`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get monitored service list environments data
 */
export const getMonitoredServiceListEnvironmentsPromise = (
  props: GetUsingFetchProps<
    ResponseListEnvironmentResponse,
    unknown,
    GetMonitoredServiceListEnvironmentsQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListEnvironmentResponse, unknown, GetMonitoredServiceListEnvironmentsQueryParams, void>(
    getConfig('cv/api'),
    `/monitored-service/environments`,
    props,
    signal
  )

export interface GetAllHealthSourcesForServiceAndEnvironmentQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  serviceIdentifier: string
  environmentIdentifier: string
}

export type GetAllHealthSourcesForServiceAndEnvironmentProps = Omit<
  GetProps<RestResponseListHealthSourceDTO, unknown, GetAllHealthSourcesForServiceAndEnvironmentQueryParams, void>,
  'path'
>

/**
 * get all health sources for service and environment
 */
export const GetAllHealthSourcesForServiceAndEnvironment = (
  props: GetAllHealthSourcesForServiceAndEnvironmentProps
) => (
  <Get<RestResponseListHealthSourceDTO, unknown, GetAllHealthSourcesForServiceAndEnvironmentQueryParams, void>
    path={`/monitored-service/health-sources`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAllHealthSourcesForServiceAndEnvironmentProps = Omit<
  UseGetProps<RestResponseListHealthSourceDTO, unknown, GetAllHealthSourcesForServiceAndEnvironmentQueryParams, void>,
  'path'
>

/**
 * get all health sources for service and environment
 */
export const useGetAllHealthSourcesForServiceAndEnvironment = (
  props: UseGetAllHealthSourcesForServiceAndEnvironmentProps
) =>
  useGet<RestResponseListHealthSourceDTO, unknown, GetAllHealthSourcesForServiceAndEnvironmentQueryParams, void>(
    `/monitored-service/health-sources`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get all health sources for service and environment
 */
export const getAllHealthSourcesForServiceAndEnvironmentPromise = (
  props: GetUsingFetchProps<
    RestResponseListHealthSourceDTO,
    unknown,
    GetAllHealthSourcesForServiceAndEnvironmentQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListHealthSourceDTO, unknown, GetAllHealthSourcesForServiceAndEnvironmentQueryParams, void>(
    getConfig('cv/api'),
    `/monitored-service/health-sources`,
    props,
    signal
  )

export interface GetMonitoredServiceListQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  environmentIdentifier?: string
  environmentIdentifiers?: string[]
  offset?: number
  pageSize?: number
  filter?: string
}

export type GetMonitoredServiceListProps = Omit<
  GetProps<ResponsePageMonitoredServiceResponse, unknown, GetMonitoredServiceListQueryParams, void>,
  'path'
>

/**
 * get list of monitored service data
 */
export const GetMonitoredServiceList = (props: GetMonitoredServiceListProps) => (
  <Get<ResponsePageMonitoredServiceResponse, unknown, GetMonitoredServiceListQueryParams, void>
    path={`/monitored-service/list`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMonitoredServiceListProps = Omit<
  UseGetProps<ResponsePageMonitoredServiceResponse, unknown, GetMonitoredServiceListQueryParams, void>,
  'path'
>

/**
 * get list of monitored service data
 */
export const useGetMonitoredServiceList = (props: UseGetMonitoredServiceListProps) =>
  useGet<ResponsePageMonitoredServiceResponse, unknown, GetMonitoredServiceListQueryParams, void>(
    `/monitored-service/list`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get list of monitored service data
 */
export const getMonitoredServiceListPromise = (
  props: GetUsingFetchProps<ResponsePageMonitoredServiceResponse, unknown, GetMonitoredServiceListQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageMonitoredServiceResponse, unknown, GetMonitoredServiceListQueryParams, void>(
    getConfig('cv/api'),
    `/monitored-service/list`,
    props,
    signal
  )

export interface GetMonitoredServiceFromServiceAndEnvironmentQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  serviceIdentifier?: string
  environmentIdentifier?: string
}

export type GetMonitoredServiceFromServiceAndEnvironmentProps = Omit<
  GetProps<ResponseMonitoredServiceResponse, unknown, GetMonitoredServiceFromServiceAndEnvironmentQueryParams, void>,
  'path'
>

/**
 * get monitored service data from service and env ref
 */
export const GetMonitoredServiceFromServiceAndEnvironment = (
  props: GetMonitoredServiceFromServiceAndEnvironmentProps
) => (
  <Get<ResponseMonitoredServiceResponse, unknown, GetMonitoredServiceFromServiceAndEnvironmentQueryParams, void>
    path={`/monitored-service/service-environment`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMonitoredServiceFromServiceAndEnvironmentProps = Omit<
  UseGetProps<ResponseMonitoredServiceResponse, unknown, GetMonitoredServiceFromServiceAndEnvironmentQueryParams, void>,
  'path'
>

/**
 * get monitored service data from service and env ref
 */
export const useGetMonitoredServiceFromServiceAndEnvironment = (
  props: UseGetMonitoredServiceFromServiceAndEnvironmentProps
) =>
  useGet<ResponseMonitoredServiceResponse, unknown, GetMonitoredServiceFromServiceAndEnvironmentQueryParams, void>(
    `/monitored-service/service-environment`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get monitored service data from service and env ref
 */
export const getMonitoredServiceFromServiceAndEnvironmentPromise = (
  props: GetUsingFetchProps<
    ResponseMonitoredServiceResponse,
    unknown,
    GetMonitoredServiceFromServiceAndEnvironmentQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    ResponseMonitoredServiceResponse,
    unknown,
    GetMonitoredServiceFromServiceAndEnvironmentQueryParams,
    void
  >(getConfig('cv/api'), `/monitored-service/service-environment`, props, signal)

export interface GetMonitoredServiceYamlTemplateQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  type?: 'Application' | 'Infrastructure'
}

export type GetMonitoredServiceYamlTemplateProps = Omit<
  GetProps<RestResponseString, unknown, GetMonitoredServiceYamlTemplateQueryParams, void>,
  'path'
>

/**
 * yaml template for monitored service
 */
export const GetMonitoredServiceYamlTemplate = (props: GetMonitoredServiceYamlTemplateProps) => (
  <Get<RestResponseString, unknown, GetMonitoredServiceYamlTemplateQueryParams, void>
    path={`/monitored-service/yaml-template`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMonitoredServiceYamlTemplateProps = Omit<
  UseGetProps<RestResponseString, unknown, GetMonitoredServiceYamlTemplateQueryParams, void>,
  'path'
>

/**
 * yaml template for monitored service
 */
export const useGetMonitoredServiceYamlTemplate = (props: UseGetMonitoredServiceYamlTemplateProps) =>
  useGet<RestResponseString, unknown, GetMonitoredServiceYamlTemplateQueryParams, void>(
    `/monitored-service/yaml-template`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * yaml template for monitored service
 */
export const getMonitoredServiceYamlTemplatePromise = (
  props: GetUsingFetchProps<RestResponseString, unknown, GetMonitoredServiceYamlTemplateQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseString, unknown, GetMonitoredServiceYamlTemplateQueryParams, void>(
    getConfig('cv/api'),
    `/monitored-service/yaml-template`,
    props,
    signal
  )

export interface DeleteMonitoredServiceQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type DeleteMonitoredServiceProps = Omit<
  MutateProps<RestResponseBoolean, unknown, DeleteMonitoredServiceQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * delete monitored service data
 */
export const DeleteMonitoredService = (props: DeleteMonitoredServiceProps) => (
  <Mutate<RestResponseBoolean, unknown, DeleteMonitoredServiceQueryParams, string, void>
    verb="DELETE"
    path={`/monitored-service`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseDeleteMonitoredServiceProps = Omit<
  UseMutateProps<RestResponseBoolean, unknown, DeleteMonitoredServiceQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * delete monitored service data
 */
export const useDeleteMonitoredService = (props: UseDeleteMonitoredServiceProps) =>
  useMutate<RestResponseBoolean, unknown, DeleteMonitoredServiceQueryParams, string, void>(
    'DELETE',
    `/monitored-service`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * delete monitored service data
 */
export const deleteMonitoredServicePromise = (
  props: MutateUsingFetchProps<RestResponseBoolean, unknown, DeleteMonitoredServiceQueryParams, string, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<RestResponseBoolean, unknown, DeleteMonitoredServiceQueryParams, string, void>(
    'DELETE',
    getConfig('cv/api'),
    `/monitored-service`,
    props,
    signal
  )

export interface GetMonitoredServiceQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export interface GetMonitoredServicePathParams {
  identifier: string
}

export type GetMonitoredServiceProps = Omit<
  GetProps<ResponseMonitoredServiceResponse, unknown, GetMonitoredServiceQueryParams, GetMonitoredServicePathParams>,
  'path'
> &
  GetMonitoredServicePathParams

/**
 * get monitored service data
 */
export const GetMonitoredService = ({ identifier, ...props }: GetMonitoredServiceProps) => (
  <Get<ResponseMonitoredServiceResponse, unknown, GetMonitoredServiceQueryParams, GetMonitoredServicePathParams>
    path={`/monitored-service/${identifier}`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMonitoredServiceProps = Omit<
  UseGetProps<ResponseMonitoredServiceResponse, unknown, GetMonitoredServiceQueryParams, GetMonitoredServicePathParams>,
  'path'
> &
  GetMonitoredServicePathParams

/**
 * get monitored service data
 */
export const useGetMonitoredService = ({ identifier, ...props }: UseGetMonitoredServiceProps) =>
  useGet<ResponseMonitoredServiceResponse, unknown, GetMonitoredServiceQueryParams, GetMonitoredServicePathParams>(
    (paramsInPath: GetMonitoredServicePathParams) => `/monitored-service/${paramsInPath.identifier}`,
    { base: getConfig('cv/api'), pathParams: { identifier }, ...props }
  )

/**
 * get monitored service data
 */
export const getMonitoredServicePromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<
    ResponseMonitoredServiceResponse,
    unknown,
    GetMonitoredServiceQueryParams,
    GetMonitoredServicePathParams
  > & { identifier: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    ResponseMonitoredServiceResponse,
    unknown,
    GetMonitoredServiceQueryParams,
    GetMonitoredServicePathParams
  >(getConfig('cv/api'), `/monitored-service/${identifier}`, props, signal)

export interface UpdateMonitoredServiceQueryParams {
  accountId: string
}

export interface UpdateMonitoredServicePathParams {
  identifier: string
}

export type UpdateMonitoredServiceProps = Omit<
  MutateProps<
    RestResponseMonitoredServiceResponse,
    unknown,
    UpdateMonitoredServiceQueryParams,
    MonitoredServiceDTORequestBody,
    UpdateMonitoredServicePathParams
  >,
  'path' | 'verb'
> &
  UpdateMonitoredServicePathParams

/**
 * updates monitored service data
 */
export const UpdateMonitoredService = ({ identifier, ...props }: UpdateMonitoredServiceProps) => (
  <Mutate<
    RestResponseMonitoredServiceResponse,
    unknown,
    UpdateMonitoredServiceQueryParams,
    MonitoredServiceDTORequestBody,
    UpdateMonitoredServicePathParams
  >
    verb="PUT"
    path={`/monitored-service/${identifier}`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseUpdateMonitoredServiceProps = Omit<
  UseMutateProps<
    RestResponseMonitoredServiceResponse,
    unknown,
    UpdateMonitoredServiceQueryParams,
    MonitoredServiceDTORequestBody,
    UpdateMonitoredServicePathParams
  >,
  'path' | 'verb'
> &
  UpdateMonitoredServicePathParams

/**
 * updates monitored service data
 */
export const useUpdateMonitoredService = ({ identifier, ...props }: UseUpdateMonitoredServiceProps) =>
  useMutate<
    RestResponseMonitoredServiceResponse,
    unknown,
    UpdateMonitoredServiceQueryParams,
    MonitoredServiceDTORequestBody,
    UpdateMonitoredServicePathParams
  >('PUT', (paramsInPath: UpdateMonitoredServicePathParams) => `/monitored-service/${paramsInPath.identifier}`, {
    base: getConfig('cv/api'),
    pathParams: { identifier },
    ...props
  })

/**
 * updates monitored service data
 */
export const updateMonitoredServicePromise = (
  {
    identifier,
    ...props
  }: MutateUsingFetchProps<
    RestResponseMonitoredServiceResponse,
    unknown,
    UpdateMonitoredServiceQueryParams,
    MonitoredServiceDTORequestBody,
    UpdateMonitoredServicePathParams
  > & { identifier: string },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    RestResponseMonitoredServiceResponse,
    unknown,
    UpdateMonitoredServiceQueryParams,
    MonitoredServiceDTORequestBody,
    UpdateMonitoredServicePathParams
  >('PUT', getConfig('cv/api'), `/monitored-service/${identifier}`, props, signal)

export interface GetAnomaliesSummaryQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  startTime: number
  endTime: number
}

export interface GetAnomaliesSummaryPathParams {
  identifier: string
}

export type GetAnomaliesSummaryProps = Omit<
  GetProps<RestResponseAnomaliesSummaryDTO, unknown, GetAnomaliesSummaryQueryParams, GetAnomaliesSummaryPathParams>,
  'path'
> &
  GetAnomaliesSummaryPathParams

/**
 * get anomalies summary details
 */
export const GetAnomaliesSummary = ({ identifier, ...props }: GetAnomaliesSummaryProps) => (
  <Get<RestResponseAnomaliesSummaryDTO, unknown, GetAnomaliesSummaryQueryParams, GetAnomaliesSummaryPathParams>
    path={`/monitored-service/${identifier}/anomaliesCount`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAnomaliesSummaryProps = Omit<
  UseGetProps<RestResponseAnomaliesSummaryDTO, unknown, GetAnomaliesSummaryQueryParams, GetAnomaliesSummaryPathParams>,
  'path'
> &
  GetAnomaliesSummaryPathParams

/**
 * get anomalies summary details
 */
export const useGetAnomaliesSummary = ({ identifier, ...props }: UseGetAnomaliesSummaryProps) =>
  useGet<RestResponseAnomaliesSummaryDTO, unknown, GetAnomaliesSummaryQueryParams, GetAnomaliesSummaryPathParams>(
    (paramsInPath: GetAnomaliesSummaryPathParams) => `/monitored-service/${paramsInPath.identifier}/anomaliesCount`,
    { base: getConfig('cv/api'), pathParams: { identifier }, ...props }
  )

/**
 * get anomalies summary details
 */
export const getAnomaliesSummaryPromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<
    RestResponseAnomaliesSummaryDTO,
    unknown,
    GetAnomaliesSummaryQueryParams,
    GetAnomaliesSummaryPathParams
  > & { identifier: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseAnomaliesSummaryDTO,
    unknown,
    GetAnomaliesSummaryQueryParams,
    GetAnomaliesSummaryPathParams
  >(getConfig('cv/api'), `/monitored-service/${identifier}/anomaliesCount`, props, signal)

export interface SetHealthMonitoringFlagQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  enable?: boolean
}

export interface SetHealthMonitoringFlagPathParams {
  identifier: string
}

export type SetHealthMonitoringFlagProps = Omit<
  MutateProps<
    RestResponseHealthMonitoringFlagResponse,
    unknown,
    SetHealthMonitoringFlagQueryParams,
    void,
    SetHealthMonitoringFlagPathParams
  >,
  'path' | 'verb'
> &
  SetHealthMonitoringFlagPathParams

/**
 * updates monitored service data
 */
export const SetHealthMonitoringFlag = ({ identifier, ...props }: SetHealthMonitoringFlagProps) => (
  <Mutate<
    RestResponseHealthMonitoringFlagResponse,
    unknown,
    SetHealthMonitoringFlagQueryParams,
    void,
    SetHealthMonitoringFlagPathParams
  >
    verb="PUT"
    path={`/monitored-service/${identifier}/health-monitoring-flag`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseSetHealthMonitoringFlagProps = Omit<
  UseMutateProps<
    RestResponseHealthMonitoringFlagResponse,
    unknown,
    SetHealthMonitoringFlagQueryParams,
    void,
    SetHealthMonitoringFlagPathParams
  >,
  'path' | 'verb'
> &
  SetHealthMonitoringFlagPathParams

/**
 * updates monitored service data
 */
export const useSetHealthMonitoringFlag = ({ identifier, ...props }: UseSetHealthMonitoringFlagProps) =>
  useMutate<
    RestResponseHealthMonitoringFlagResponse,
    unknown,
    SetHealthMonitoringFlagQueryParams,
    void,
    SetHealthMonitoringFlagPathParams
  >(
    'PUT',
    (paramsInPath: SetHealthMonitoringFlagPathParams) =>
      `/monitored-service/${paramsInPath.identifier}/health-monitoring-flag`,
    { base: getConfig('cv/api'), pathParams: { identifier }, ...props }
  )

/**
 * updates monitored service data
 */
export const setHealthMonitoringFlagPromise = (
  {
    identifier,
    ...props
  }: MutateUsingFetchProps<
    RestResponseHealthMonitoringFlagResponse,
    unknown,
    SetHealthMonitoringFlagQueryParams,
    void,
    SetHealthMonitoringFlagPathParams
  > & { identifier: string },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    RestResponseHealthMonitoringFlagResponse,
    unknown,
    SetHealthMonitoringFlagQueryParams,
    void,
    SetHealthMonitoringFlagPathParams
  >('PUT', getConfig('cv/api'), `/monitored-service/${identifier}/health-monitoring-flag`, props, signal)

export interface GetMonitoredServiceOverAllHealthScoreQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  duration?: 'FOUR_HOURS' | 'TWENTY_FOUR_HOURS' | 'THREE_DAYS' | 'SEVEN_DAYS' | 'THIRTY_DAYS'
  endTime?: number
}

export interface GetMonitoredServiceOverAllHealthScorePathParams {
  identifier: string
}

export type GetMonitoredServiceOverAllHealthScoreProps = Omit<
  GetProps<
    ResponseHistoricalTrend,
    unknown,
    GetMonitoredServiceOverAllHealthScoreQueryParams,
    GetMonitoredServiceOverAllHealthScorePathParams
  >,
  'path'
> &
  GetMonitoredServiceOverAllHealthScorePathParams

/**
 * get monitored service overall health score data
 */
export const GetMonitoredServiceOverAllHealthScore = ({
  identifier,
  ...props
}: GetMonitoredServiceOverAllHealthScoreProps) => (
  <Get<
    ResponseHistoricalTrend,
    unknown,
    GetMonitoredServiceOverAllHealthScoreQueryParams,
    GetMonitoredServiceOverAllHealthScorePathParams
  >
    path={`/monitored-service/${identifier}/overall-health-score`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMonitoredServiceOverAllHealthScoreProps = Omit<
  UseGetProps<
    ResponseHistoricalTrend,
    unknown,
    GetMonitoredServiceOverAllHealthScoreQueryParams,
    GetMonitoredServiceOverAllHealthScorePathParams
  >,
  'path'
> &
  GetMonitoredServiceOverAllHealthScorePathParams

/**
 * get monitored service overall health score data
 */
export const useGetMonitoredServiceOverAllHealthScore = ({
  identifier,
  ...props
}: UseGetMonitoredServiceOverAllHealthScoreProps) =>
  useGet<
    ResponseHistoricalTrend,
    unknown,
    GetMonitoredServiceOverAllHealthScoreQueryParams,
    GetMonitoredServiceOverAllHealthScorePathParams
  >(
    (paramsInPath: GetMonitoredServiceOverAllHealthScorePathParams) =>
      `/monitored-service/${paramsInPath.identifier}/overall-health-score`,
    { base: getConfig('cv/api'), pathParams: { identifier }, ...props }
  )

/**
 * get monitored service overall health score data
 */
export const getMonitoredServiceOverAllHealthScorePromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<
    ResponseHistoricalTrend,
    unknown,
    GetMonitoredServiceOverAllHealthScoreQueryParams,
    GetMonitoredServiceOverAllHealthScorePathParams
  > & { identifier: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    ResponseHistoricalTrend,
    unknown,
    GetMonitoredServiceOverAllHealthScoreQueryParams,
    GetMonitoredServiceOverAllHealthScorePathParams
  >(getConfig('cv/api'), `/monitored-service/${identifier}/overall-health-score`, props, signal)

export interface GetMonitoredServiceScoresQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export interface GetMonitoredServiceScoresPathParams {
  identifier: string
}

export type GetMonitoredServiceScoresProps = Omit<
  GetProps<ResponseHealthScoreDTO, unknown, GetMonitoredServiceScoresQueryParams, GetMonitoredServiceScoresPathParams>,
  'path'
> &
  GetMonitoredServiceScoresPathParams

/**
 * get monitored service scores
 */
export const GetMonitoredServiceScores = ({ identifier, ...props }: GetMonitoredServiceScoresProps) => (
  <Get<ResponseHealthScoreDTO, unknown, GetMonitoredServiceScoresQueryParams, GetMonitoredServiceScoresPathParams>
    path={`/monitored-service/${identifier}/scores`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMonitoredServiceScoresProps = Omit<
  UseGetProps<
    ResponseHealthScoreDTO,
    unknown,
    GetMonitoredServiceScoresQueryParams,
    GetMonitoredServiceScoresPathParams
  >,
  'path'
> &
  GetMonitoredServiceScoresPathParams

/**
 * get monitored service scores
 */
export const useGetMonitoredServiceScores = ({ identifier, ...props }: UseGetMonitoredServiceScoresProps) =>
  useGet<ResponseHealthScoreDTO, unknown, GetMonitoredServiceScoresQueryParams, GetMonitoredServiceScoresPathParams>(
    (paramsInPath: GetMonitoredServiceScoresPathParams) => `/monitored-service/${paramsInPath.identifier}/scores`,
    { base: getConfig('cv/api'), pathParams: { identifier }, ...props }
  )

/**
 * get monitored service scores
 */
export const getMonitoredServiceScoresPromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<
    ResponseHealthScoreDTO,
    unknown,
    GetMonitoredServiceScoresQueryParams,
    GetMonitoredServiceScoresPathParams
  > & { identifier: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    ResponseHealthScoreDTO,
    unknown,
    GetMonitoredServiceScoresQueryParams,
    GetMonitoredServiceScoresPathParams
  >(getConfig('cv/api'), `/monitored-service/${identifier}/scores`, props, signal)

export interface GetSloMetricsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export interface GetSloMetricsPathParams {
  monitoredServiceIdentifier: string
  healthSourceIdentifier: string
}

export type GetSloMetricsProps = Omit<
  GetProps<RestResponseListMetricDTO, unknown, GetSloMetricsQueryParams, GetSloMetricsPathParams>,
  'path'
> &
  GetSloMetricsPathParams

/**
 * get slo metrics in a healthSource
 */
export const GetSloMetrics = ({ monitoredServiceIdentifier, healthSourceIdentifier, ...props }: GetSloMetricsProps) => (
  <Get<RestResponseListMetricDTO, unknown, GetSloMetricsQueryParams, GetSloMetricsPathParams>
    path={`/monitored-service/${monitoredServiceIdentifier}/health-source/${healthSourceIdentifier}/slo-metrics`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetSloMetricsProps = Omit<
  UseGetProps<RestResponseListMetricDTO, unknown, GetSloMetricsQueryParams, GetSloMetricsPathParams>,
  'path'
> &
  GetSloMetricsPathParams

/**
 * get slo metrics in a healthSource
 */
export const useGetSloMetrics = ({
  monitoredServiceIdentifier,
  healthSourceIdentifier,
  ...props
}: UseGetSloMetricsProps) =>
  useGet<RestResponseListMetricDTO, unknown, GetSloMetricsQueryParams, GetSloMetricsPathParams>(
    (paramsInPath: GetSloMetricsPathParams) =>
      `/monitored-service/${paramsInPath.monitoredServiceIdentifier}/health-source/${paramsInPath.healthSourceIdentifier}/slo-metrics`,
    { base: getConfig('cv/api'), pathParams: { monitoredServiceIdentifier, healthSourceIdentifier }, ...props }
  )

/**
 * get slo metrics in a healthSource
 */
export const getSloMetricsPromise = (
  {
    monitoredServiceIdentifier,
    healthSourceIdentifier,
    ...props
  }: GetUsingFetchProps<RestResponseListMetricDTO, unknown, GetSloMetricsQueryParams, GetSloMetricsPathParams> & {
    monitoredServiceIdentifier: string
    healthSourceIdentifier: string
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListMetricDTO, unknown, GetSloMetricsQueryParams, GetSloMetricsPathParams>(
    getConfig('cv/api'),
    `/monitored-service/${monitoredServiceIdentifier}/health-source/${healthSourceIdentifier}/slo-metrics`,
    props,
    signal
  )

export interface GetAllHealthSourcesForMonitoredServiceIdentifierQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export interface GetAllHealthSourcesForMonitoredServiceIdentifierPathParams {
  monitoredServiceIdentifier: string
}

export type GetAllHealthSourcesForMonitoredServiceIdentifierProps = Omit<
  GetProps<
    RestResponseListHealthSourceDTO,
    unknown,
    GetAllHealthSourcesForMonitoredServiceIdentifierQueryParams,
    GetAllHealthSourcesForMonitoredServiceIdentifierPathParams
  >,
  'path'
> &
  GetAllHealthSourcesForMonitoredServiceIdentifierPathParams

/**
 * get all health sources for service and environment
 */
export const GetAllHealthSourcesForMonitoredServiceIdentifier = ({
  monitoredServiceIdentifier,
  ...props
}: GetAllHealthSourcesForMonitoredServiceIdentifierProps) => (
  <Get<
    RestResponseListHealthSourceDTO,
    unknown,
    GetAllHealthSourcesForMonitoredServiceIdentifierQueryParams,
    GetAllHealthSourcesForMonitoredServiceIdentifierPathParams
  >
    path={`/monitored-service/${monitoredServiceIdentifier}/health-sources`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAllHealthSourcesForMonitoredServiceIdentifierProps = Omit<
  UseGetProps<
    RestResponseListHealthSourceDTO,
    unknown,
    GetAllHealthSourcesForMonitoredServiceIdentifierQueryParams,
    GetAllHealthSourcesForMonitoredServiceIdentifierPathParams
  >,
  'path'
> &
  GetAllHealthSourcesForMonitoredServiceIdentifierPathParams

/**
 * get all health sources for service and environment
 */
export const useGetAllHealthSourcesForMonitoredServiceIdentifier = ({
  monitoredServiceIdentifier,
  ...props
}: UseGetAllHealthSourcesForMonitoredServiceIdentifierProps) =>
  useGet<
    RestResponseListHealthSourceDTO,
    unknown,
    GetAllHealthSourcesForMonitoredServiceIdentifierQueryParams,
    GetAllHealthSourcesForMonitoredServiceIdentifierPathParams
  >(
    (paramsInPath: GetAllHealthSourcesForMonitoredServiceIdentifierPathParams) =>
      `/monitored-service/${paramsInPath.monitoredServiceIdentifier}/health-sources`,
    { base: getConfig('cv/api'), pathParams: { monitoredServiceIdentifier }, ...props }
  )

/**
 * get all health sources for service and environment
 */
export const getAllHealthSourcesForMonitoredServiceIdentifierPromise = (
  {
    monitoredServiceIdentifier,
    ...props
  }: GetUsingFetchProps<
    RestResponseListHealthSourceDTO,
    unknown,
    GetAllHealthSourcesForMonitoredServiceIdentifierQueryParams,
    GetAllHealthSourcesForMonitoredServiceIdentifierPathParams
  > & { monitoredServiceIdentifier: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseListHealthSourceDTO,
    unknown,
    GetAllHealthSourcesForMonitoredServiceIdentifierQueryParams,
    GetAllHealthSourcesForMonitoredServiceIdentifierPathParams
  >(getConfig('cv/api'), `/monitored-service/${monitoredServiceIdentifier}/health-sources`, props, signal)

export interface GetMonitoredServiceLogsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  logType: 'ApiCallLog' | 'ExecutionLog'
  errorLogsOnly?: boolean
  startTime: number
  endTime: number
  healthSources?: string[]
  pageNumber?: number
  pageSize?: number
}

export interface GetMonitoredServiceLogsPathParams {
  monitoredServiceIdentifier: string
}

export type GetMonitoredServiceLogsProps = Omit<
  GetProps<RestResponsePageCVNGLogDTO, unknown, GetMonitoredServiceLogsQueryParams, GetMonitoredServiceLogsPathParams>,
  'path'
> &
  GetMonitoredServiceLogsPathParams

/**
 * get monitored service logs
 */
export const GetMonitoredServiceLogs = ({ monitoredServiceIdentifier, ...props }: GetMonitoredServiceLogsProps) => (
  <Get<RestResponsePageCVNGLogDTO, unknown, GetMonitoredServiceLogsQueryParams, GetMonitoredServiceLogsPathParams>
    path={`/monitored-service/${monitoredServiceIdentifier}/logs`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMonitoredServiceLogsProps = Omit<
  UseGetProps<
    RestResponsePageCVNGLogDTO,
    unknown,
    GetMonitoredServiceLogsQueryParams,
    GetMonitoredServiceLogsPathParams
  >,
  'path'
> &
  GetMonitoredServiceLogsPathParams

/**
 * get monitored service logs
 */
export const useGetMonitoredServiceLogs = ({ monitoredServiceIdentifier, ...props }: UseGetMonitoredServiceLogsProps) =>
  useGet<RestResponsePageCVNGLogDTO, unknown, GetMonitoredServiceLogsQueryParams, GetMonitoredServiceLogsPathParams>(
    (paramsInPath: GetMonitoredServiceLogsPathParams) =>
      `/monitored-service/${paramsInPath.monitoredServiceIdentifier}/logs`,
    { base: getConfig('cv/api'), pathParams: { monitoredServiceIdentifier }, ...props }
  )

/**
 * get monitored service logs
 */
export const getMonitoredServiceLogsPromise = (
  {
    monitoredServiceIdentifier,
    ...props
  }: GetUsingFetchProps<
    RestResponsePageCVNGLogDTO,
    unknown,
    GetMonitoredServiceLogsQueryParams,
    GetMonitoredServiceLogsPathParams
  > & { monitoredServiceIdentifier: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponsePageCVNGLogDTO,
    unknown,
    GetMonitoredServiceLogsQueryParams,
    GetMonitoredServiceLogsPathParams
  >(getConfig('cv/api'), `/monitored-service/${monitoredServiceIdentifier}/logs`, props, signal)

export interface GetMonitoredServiceDetailsWithServiceIdQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export interface GetMonitoredServiceDetailsWithServiceIdPathParams {
  monitoredServiceIdentifier: string
}

export type GetMonitoredServiceDetailsWithServiceIdProps = Omit<
  GetProps<
    MonitoredServiceListItemDTO,
    unknown,
    GetMonitoredServiceDetailsWithServiceIdQueryParams,
    GetMonitoredServiceDetailsWithServiceIdPathParams
  >,
  'path'
> &
  GetMonitoredServiceDetailsWithServiceIdPathParams

/**
 * get details of a monitored service present in the Service Dependency Graph
 */
export const GetMonitoredServiceDetailsWithServiceId = ({
  monitoredServiceIdentifier,
  ...props
}: GetMonitoredServiceDetailsWithServiceIdProps) => (
  <Get<
    MonitoredServiceListItemDTO,
    unknown,
    GetMonitoredServiceDetailsWithServiceIdQueryParams,
    GetMonitoredServiceDetailsWithServiceIdPathParams
  >
    path={`/monitored-service/${monitoredServiceIdentifier}/service-details`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMonitoredServiceDetailsWithServiceIdProps = Omit<
  UseGetProps<
    MonitoredServiceListItemDTO,
    unknown,
    GetMonitoredServiceDetailsWithServiceIdQueryParams,
    GetMonitoredServiceDetailsWithServiceIdPathParams
  >,
  'path'
> &
  GetMonitoredServiceDetailsWithServiceIdPathParams

/**
 * get details of a monitored service present in the Service Dependency Graph
 */
export const useGetMonitoredServiceDetailsWithServiceId = ({
  monitoredServiceIdentifier,
  ...props
}: UseGetMonitoredServiceDetailsWithServiceIdProps) =>
  useGet<
    MonitoredServiceListItemDTO,
    unknown,
    GetMonitoredServiceDetailsWithServiceIdQueryParams,
    GetMonitoredServiceDetailsWithServiceIdPathParams
  >(
    (paramsInPath: GetMonitoredServiceDetailsWithServiceIdPathParams) =>
      `/monitored-service/${paramsInPath.monitoredServiceIdentifier}/service-details`,
    { base: getConfig('cv/api'), pathParams: { monitoredServiceIdentifier }, ...props }
  )

/**
 * get details of a monitored service present in the Service Dependency Graph
 */
export const getMonitoredServiceDetailsWithServiceIdPromise = (
  {
    monitoredServiceIdentifier,
    ...props
  }: GetUsingFetchProps<
    MonitoredServiceListItemDTO,
    unknown,
    GetMonitoredServiceDetailsWithServiceIdQueryParams,
    GetMonitoredServiceDetailsWithServiceIdPathParams
  > & { monitoredServiceIdentifier: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    MonitoredServiceListItemDTO,
    unknown,
    GetMonitoredServiceDetailsWithServiceIdQueryParams,
    GetMonitoredServiceDetailsWithServiceIdPathParams
  >(getConfig('cv/api'), `/monitored-service/${monitoredServiceIdentifier}/service-details`, props, signal)

export interface GetSliGraphQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export interface GetSliGraphPathParams {
  monitoredServiceIdentifier: string
}

export type GetSliGraphProps = Omit<
  MutateProps<
    RestResponseTimeGraphResponse,
    unknown,
    GetSliGraphQueryParams,
    ServiceLevelIndicatorDTORequestBody,
    GetSliGraphPathParams
  >,
  'path' | 'verb'
> &
  GetSliGraphPathParams

/**
 * get Sli graph for onboarding UI
 */
export const GetSliGraph = ({ monitoredServiceIdentifier, ...props }: GetSliGraphProps) => (
  <Mutate<
    RestResponseTimeGraphResponse,
    unknown,
    GetSliGraphQueryParams,
    ServiceLevelIndicatorDTORequestBody,
    GetSliGraphPathParams
  >
    verb="POST"
    path={`/monitored-service/${monitoredServiceIdentifier}/sli/onboarding-graph`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetSliGraphProps = Omit<
  UseMutateProps<
    RestResponseTimeGraphResponse,
    unknown,
    GetSliGraphQueryParams,
    ServiceLevelIndicatorDTORequestBody,
    GetSliGraphPathParams
  >,
  'path' | 'verb'
> &
  GetSliGraphPathParams

/**
 * get Sli graph for onboarding UI
 */
export const useGetSliGraph = ({ monitoredServiceIdentifier, ...props }: UseGetSliGraphProps) =>
  useMutate<
    RestResponseTimeGraphResponse,
    unknown,
    GetSliGraphQueryParams,
    ServiceLevelIndicatorDTORequestBody,
    GetSliGraphPathParams
  >(
    'POST',
    (paramsInPath: GetSliGraphPathParams) =>
      `/monitored-service/${paramsInPath.monitoredServiceIdentifier}/sli/onboarding-graph`,
    { base: getConfig('cv/api'), pathParams: { monitoredServiceIdentifier }, ...props }
  )

/**
 * get Sli graph for onboarding UI
 */
export const getSliGraphPromise = (
  {
    monitoredServiceIdentifier,
    ...props
  }: MutateUsingFetchProps<
    RestResponseTimeGraphResponse,
    unknown,
    GetSliGraphQueryParams,
    ServiceLevelIndicatorDTORequestBody,
    GetSliGraphPathParams
  > & { monitoredServiceIdentifier: string },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    RestResponseTimeGraphResponse,
    unknown,
    GetSliGraphQueryParams,
    ServiceLevelIndicatorDTORequestBody,
    GetSliGraphPathParams
  >('POST', getConfig('cv/api'), `/monitored-service/${monitoredServiceIdentifier}/sli/onboarding-graph`, props, signal)

export interface GetNewRelicApplicationsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  pageSize: number
  offset: number
  filter?: string
  tracingId: string
}

export type GetNewRelicApplicationsProps = Omit<
  GetProps<ResponseListNewRelicApplication, Failure | Error, GetNewRelicApplicationsQueryParams, void>,
  'path'
>

/**
 * get all newrelic applications
 */
export const GetNewRelicApplications = (props: GetNewRelicApplicationsProps) => (
  <Get<ResponseListNewRelicApplication, Failure | Error, GetNewRelicApplicationsQueryParams, void>
    path={`/newrelic/applications`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetNewRelicApplicationsProps = Omit<
  UseGetProps<ResponseListNewRelicApplication, Failure | Error, GetNewRelicApplicationsQueryParams, void>,
  'path'
>

/**
 * get all newrelic applications
 */
export const useGetNewRelicApplications = (props: UseGetNewRelicApplicationsProps) =>
  useGet<ResponseListNewRelicApplication, Failure | Error, GetNewRelicApplicationsQueryParams, void>(
    `/newrelic/applications`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get all newrelic applications
 */
export const getNewRelicApplicationsPromise = (
  props: GetUsingFetchProps<ResponseListNewRelicApplication, Failure | Error, GetNewRelicApplicationsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListNewRelicApplication, Failure | Error, GetNewRelicApplicationsQueryParams, void>(
    getConfig('cv/api'),
    `/newrelic/applications`,
    props,
    signal
  )

export type GetNewRelicEndPointsProps = Omit<GetProps<ResponseListString, Failure | Error, void, void>, 'path'>

/**
 * get all newrelic endpoints
 */
export const GetNewRelicEndPoints = (props: GetNewRelicEndPointsProps) => (
  <Get<ResponseListString, Failure | Error, void, void>
    path={`/newrelic/endpoints`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetNewRelicEndPointsProps = Omit<UseGetProps<ResponseListString, Failure | Error, void, void>, 'path'>

/**
 * get all newrelic endpoints
 */
export const useGetNewRelicEndPoints = (props: UseGetNewRelicEndPointsProps) =>
  useGet<ResponseListString, Failure | Error, void, void>(`/newrelic/endpoints`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get all newrelic endpoints
 */
export const getNewRelicEndPointsPromise = (
  props: GetUsingFetchProps<ResponseListString, Failure | Error, void, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListString, Failure | Error, void, void>(
    getConfig('cv/api'),
    `/newrelic/endpoints`,
    props,
    signal
  )

export interface GetSampleDataForNRQLQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  requestGuid: string
  nrql: string
}

export type GetSampleDataForNRQLProps = Omit<
  GetProps<ResponseLinkedHashMap, Failure | Error, GetSampleDataForNRQLQueryParams, void>,
  'path'
>

/**
 * get sample data for given nrql
 */
export const GetSampleDataForNRQL = (props: GetSampleDataForNRQLProps) => (
  <Get<ResponseLinkedHashMap, Failure | Error, GetSampleDataForNRQLQueryParams, void>
    path={`/newrelic/fetch-sample-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetSampleDataForNRQLProps = Omit<
  UseGetProps<ResponseLinkedHashMap, Failure | Error, GetSampleDataForNRQLQueryParams, void>,
  'path'
>

/**
 * get sample data for given nrql
 */
export const useGetSampleDataForNRQL = (props: UseGetSampleDataForNRQLProps) =>
  useGet<ResponseLinkedHashMap, Failure | Error, GetSampleDataForNRQLQueryParams, void>(`/newrelic/fetch-sample-data`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get sample data for given nrql
 */
export const getSampleDataForNRQLPromise = (
  props: GetUsingFetchProps<ResponseLinkedHashMap, Failure | Error, GetSampleDataForNRQLQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseLinkedHashMap, Failure | Error, GetSampleDataForNRQLQueryParams, void>(
    getConfig('cv/api'),
    `/newrelic/fetch-sample-data`,
    props,
    signal
  )

export interface GetNewRelicMetricDataQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  appName: string
  appId: string
  requestGuid: string
}

export type GetNewRelicMetricDataProps = Omit<
  MutateProps<
    ResponseMetricPackValidationResponse,
    Failure | Error,
    GetNewRelicMetricDataQueryParams,
    MetricPackDTOArrayRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * get metric data for given metric packs
 */
export const GetNewRelicMetricData = (props: GetNewRelicMetricDataProps) => (
  <Mutate<
    ResponseMetricPackValidationResponse,
    Failure | Error,
    GetNewRelicMetricDataQueryParams,
    MetricPackDTOArrayRequestBody,
    void
  >
    verb="POST"
    path={`/newrelic/metric-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetNewRelicMetricDataProps = Omit<
  UseMutateProps<
    ResponseMetricPackValidationResponse,
    Failure | Error,
    GetNewRelicMetricDataQueryParams,
    MetricPackDTOArrayRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * get metric data for given metric packs
 */
export const useGetNewRelicMetricData = (props: UseGetNewRelicMetricDataProps) =>
  useMutate<
    ResponseMetricPackValidationResponse,
    Failure | Error,
    GetNewRelicMetricDataQueryParams,
    MetricPackDTOArrayRequestBody,
    void
  >('POST', `/newrelic/metric-data`, { base: getConfig('cv/api'), ...props })

/**
 * get metric data for given metric packs
 */
export const getNewRelicMetricDataPromise = (
  props: MutateUsingFetchProps<
    ResponseMetricPackValidationResponse,
    Failure | Error,
    GetNewRelicMetricDataQueryParams,
    MetricPackDTOArrayRequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseMetricPackValidationResponse,
    Failure | Error,
    GetNewRelicMetricDataQueryParams,
    MetricPackDTOArrayRequestBody,
    void
  >('POST', getConfig('cv/api'), `/newrelic/metric-data`, props, signal)

export interface GetServicesFromPagerDutyQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier?: string
  requestGuid: string
}

export type GetServicesFromPagerDutyProps = Omit<
  GetProps<RestResponseListPagerDutyServiceDetail, Failure | Error, GetServicesFromPagerDutyQueryParams, void>,
  'path'
>

/**
 * gets services from PagerDuty
 */
export const GetServicesFromPagerDuty = (props: GetServicesFromPagerDutyProps) => (
  <Get<RestResponseListPagerDutyServiceDetail, Failure | Error, GetServicesFromPagerDutyQueryParams, void>
    path={`/pagerduty/services`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetServicesFromPagerDutyProps = Omit<
  UseGetProps<RestResponseListPagerDutyServiceDetail, Failure | Error, GetServicesFromPagerDutyQueryParams, void>,
  'path'
>

/**
 * gets services from PagerDuty
 */
export const useGetServicesFromPagerDuty = (props: UseGetServicesFromPagerDutyProps) =>
  useGet<RestResponseListPagerDutyServiceDetail, Failure | Error, GetServicesFromPagerDutyQueryParams, void>(
    `/pagerduty/services`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * gets services from PagerDuty
 */
export const getServicesFromPagerDutyPromise = (
  props: GetUsingFetchProps<
    RestResponseListPagerDutyServiceDetail,
    Failure | Error,
    GetServicesFromPagerDutyQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListPagerDutyServiceDetail, Failure | Error, GetServicesFromPagerDutyQueryParams, void>(
    getConfig('cv/api'),
    `/pagerduty/services`,
    props,
    signal
  )

export interface FetchParsedSampleDataQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type FetchParsedSampleDataProps = Omit<
  MutateProps<ResponseListTimeSeriesSampleDTO, Failure | Error, FetchParsedSampleDataQueryParams, SampleDataDTO, void>,
  'path' | 'verb'
>

/**
 * parse sample data for given json response
 */
export const FetchParsedSampleData = (props: FetchParsedSampleDataProps) => (
  <Mutate<ResponseListTimeSeriesSampleDTO, Failure | Error, FetchParsedSampleDataQueryParams, SampleDataDTO, void>
    verb="POST"
    path={`/parse-sample-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseFetchParsedSampleDataProps = Omit<
  UseMutateProps<
    ResponseListTimeSeriesSampleDTO,
    Failure | Error,
    FetchParsedSampleDataQueryParams,
    SampleDataDTO,
    void
  >,
  'path' | 'verb'
>

/**
 * parse sample data for given json response
 */
export const useFetchParsedSampleData = (props: UseFetchParsedSampleDataProps) =>
  useMutate<ResponseListTimeSeriesSampleDTO, Failure | Error, FetchParsedSampleDataQueryParams, SampleDataDTO, void>(
    'POST',
    `/parse-sample-data`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * parse sample data for given json response
 */
export const fetchParsedSampleDataPromise = (
  props: MutateUsingFetchProps<
    ResponseListTimeSeriesSampleDTO,
    Failure | Error,
    FetchParsedSampleDataQueryParams,
    SampleDataDTO,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseListTimeSeriesSampleDTO,
    Failure | Error,
    FetchParsedSampleDataQueryParams,
    SampleDataDTO,
    void
  >('POST', getConfig('cv/api'), `/parse-sample-data`, props, signal)

export interface GetLabelNamesQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  tracingId: string
}

export type GetLabelNamesProps = Omit<
  GetProps<ResponseListString, Failure | Error, GetLabelNamesQueryParams, void>,
  'path'
>

/**
 * get all label names
 */
export const GetLabelNames = (props: GetLabelNamesProps) => (
  <Get<ResponseListString, Failure | Error, GetLabelNamesQueryParams, void>
    path={`/prometheus/label-names`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetLabelNamesProps = Omit<
  UseGetProps<ResponseListString, Failure | Error, GetLabelNamesQueryParams, void>,
  'path'
>

/**
 * get all label names
 */
export const useGetLabelNames = (props: UseGetLabelNamesProps) =>
  useGet<ResponseListString, Failure | Error, GetLabelNamesQueryParams, void>(`/prometheus/label-names`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get all label names
 */
export const getLabelNamesPromise = (
  props: GetUsingFetchProps<ResponseListString, Failure | Error, GetLabelNamesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListString, Failure | Error, GetLabelNamesQueryParams, void>(
    getConfig('cv/api'),
    `/prometheus/label-names`,
    props,
    signal
  )

export interface GetLabeValuesQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  labelName: string
  tracingId: string
}

export type GetLabeValuesProps = Omit<
  GetProps<ResponseListString, Failure | Error, GetLabeValuesQueryParams, void>,
  'path'
>

/**
 * get all label values
 */
export const GetLabeValues = (props: GetLabeValuesProps) => (
  <Get<ResponseListString, Failure | Error, GetLabeValuesQueryParams, void>
    path={`/prometheus/label-values`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetLabeValuesProps = Omit<
  UseGetProps<ResponseListString, Failure | Error, GetLabeValuesQueryParams, void>,
  'path'
>

/**
 * get all label values
 */
export const useGetLabeValues = (props: UseGetLabeValuesProps) =>
  useGet<ResponseListString, Failure | Error, GetLabeValuesQueryParams, void>(`/prometheus/label-values`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get all label values
 */
export const getLabeValuesPromise = (
  props: GetUsingFetchProps<ResponseListString, Failure | Error, GetLabeValuesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListString, Failure | Error, GetLabeValuesQueryParams, void>(
    getConfig('cv/api'),
    `/prometheus/label-values`,
    props,
    signal
  )

export interface GetMetricNamesQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  filter?: string
  tracingId: string
}

export type GetMetricNamesProps = Omit<
  GetProps<ResponseListString, Failure | Error, GetMetricNamesQueryParams, void>,
  'path'
>

/**
 * get all metric names
 */
export const GetMetricNames = (props: GetMetricNamesProps) => (
  <Get<ResponseListString, Failure | Error, GetMetricNamesQueryParams, void>
    path={`/prometheus/metric-list`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMetricNamesProps = Omit<
  UseGetProps<ResponseListString, Failure | Error, GetMetricNamesQueryParams, void>,
  'path'
>

/**
 * get all metric names
 */
export const useGetMetricNames = (props: UseGetMetricNamesProps) =>
  useGet<ResponseListString, Failure | Error, GetMetricNamesQueryParams, void>(`/prometheus/metric-list`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get all metric names
 */
export const getMetricNamesPromise = (
  props: GetUsingFetchProps<ResponseListString, Failure | Error, GetMetricNamesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListString, Failure | Error, GetMetricNamesQueryParams, void>(
    getConfig('cv/api'),
    `/prometheus/metric-list`,
    props,
    signal
  )

export interface GetSampleDataQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  query: string
  tracingId: string
}

export type GetSampleDataProps = Omit<
  GetProps<ResponseListPrometheusSampleData, Failure | Error, GetSampleDataQueryParams, void>,
  'path'
>

/**
 * get sample data
 */
export const GetSampleData = (props: GetSampleDataProps) => (
  <Get<ResponseListPrometheusSampleData, Failure | Error, GetSampleDataQueryParams, void>
    path={`/prometheus/sample-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetSampleDataProps = Omit<
  UseGetProps<ResponseListPrometheusSampleData, Failure | Error, GetSampleDataQueryParams, void>,
  'path'
>

/**
 * get sample data
 */
export const useGetSampleData = (props: UseGetSampleDataProps) =>
  useGet<ResponseListPrometheusSampleData, Failure | Error, GetSampleDataQueryParams, void>(`/prometheus/sample-data`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get sample data
 */
export const getSampleDataPromise = (
  props: GetUsingFetchProps<ResponseListPrometheusSampleData, Failure | Error, GetSampleDataQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListPrometheusSampleData, Failure | Error, GetSampleDataQueryParams, void>(
    getConfig('cv/api'),
    `/prometheus/sample-data`,
    props,
    signal
  )

export interface GetServiceDependencyGraphQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  environmentIdentifier?: string
  serviceIdentifier?: string
  monitoredServiceIdentifier?: string
  servicesAtRiskFilter: boolean
}

export type GetServiceDependencyGraphProps = Omit<
  GetProps<RestResponseServiceDependencyGraphDTO, unknown, GetServiceDependencyGraphQueryParams, void>,
  'path'
>

/**
 * get service dependency graph
 */
export const GetServiceDependencyGraph = (props: GetServiceDependencyGraphProps) => (
  <Get<RestResponseServiceDependencyGraphDTO, unknown, GetServiceDependencyGraphQueryParams, void>
    path={`/service-dependency-graph`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetServiceDependencyGraphProps = Omit<
  UseGetProps<RestResponseServiceDependencyGraphDTO, unknown, GetServiceDependencyGraphQueryParams, void>,
  'path'
>

/**
 * get service dependency graph
 */
export const useGetServiceDependencyGraph = (props: UseGetServiceDependencyGraphProps) =>
  useGet<RestResponseServiceDependencyGraphDTO, unknown, GetServiceDependencyGraphQueryParams, void>(
    `/service-dependency-graph`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get service dependency graph
 */
export const getServiceDependencyGraphPromise = (
  props: GetUsingFetchProps<RestResponseServiceDependencyGraphDTO, unknown, GetServiceDependencyGraphQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseServiceDependencyGraphDTO, unknown, GetServiceDependencyGraphQueryParams, void>(
    getConfig('cv/api'),
    `/service-dependency-graph`,
    props,
    signal
  )

export interface GetServiceLevelObjectivesQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  offset: number
  pageSize: number
  userJourneys?: string[]
  identifiers?: string[]
  sliTypes?: ('Availability' | 'Latency')[]
  targetTypes?: ('Rolling' | 'Calender')[]
  errorBudgetRisks?: ('EXHAUSTED' | 'UNHEALTHY' | 'NEED_ATTENTION' | 'OBSERVE' | 'HEALTHY')[]
}

export type GetServiceLevelObjectivesProps = Omit<
  GetProps<ResponsePageServiceLevelObjectiveResponse, unknown, GetServiceLevelObjectivesQueryParams, void>,
  'path'
>

/**
 * get all service level objectives
 */
export const GetServiceLevelObjectives = (props: GetServiceLevelObjectivesProps) => (
  <Get<ResponsePageServiceLevelObjectiveResponse, unknown, GetServiceLevelObjectivesQueryParams, void>
    path={`/slo`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetServiceLevelObjectivesProps = Omit<
  UseGetProps<ResponsePageServiceLevelObjectiveResponse, unknown, GetServiceLevelObjectivesQueryParams, void>,
  'path'
>

/**
 * get all service level objectives
 */
export const useGetServiceLevelObjectives = (props: UseGetServiceLevelObjectivesProps) =>
  useGet<ResponsePageServiceLevelObjectiveResponse, unknown, GetServiceLevelObjectivesQueryParams, void>(`/slo`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get all service level objectives
 */
export const getServiceLevelObjectivesPromise = (
  props: GetUsingFetchProps<
    ResponsePageServiceLevelObjectiveResponse,
    unknown,
    GetServiceLevelObjectivesQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageServiceLevelObjectiveResponse, unknown, GetServiceLevelObjectivesQueryParams, void>(
    getConfig('cv/api'),
    `/slo`,
    props,
    signal
  )

export interface SaveSLODataQueryParams {
  accountId: string
}

export type SaveSLODataProps = Omit<
  MutateProps<
    RestResponseServiceLevelObjectiveResponse,
    unknown,
    SaveSLODataQueryParams,
    ServiceLevelObjectiveDTORequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * saves slo data
 */
export const SaveSLOData = (props: SaveSLODataProps) => (
  <Mutate<
    RestResponseServiceLevelObjectiveResponse,
    unknown,
    SaveSLODataQueryParams,
    ServiceLevelObjectiveDTORequestBody,
    void
  >
    verb="POST"
    path={`/slo`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseSaveSLODataProps = Omit<
  UseMutateProps<
    RestResponseServiceLevelObjectiveResponse,
    unknown,
    SaveSLODataQueryParams,
    ServiceLevelObjectiveDTORequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * saves slo data
 */
export const useSaveSLOData = (props: UseSaveSLODataProps) =>
  useMutate<
    RestResponseServiceLevelObjectiveResponse,
    unknown,
    SaveSLODataQueryParams,
    ServiceLevelObjectiveDTORequestBody,
    void
  >('POST', `/slo`, { base: getConfig('cv/api'), ...props })

/**
 * saves slo data
 */
export const saveSLODataPromise = (
  props: MutateUsingFetchProps<
    RestResponseServiceLevelObjectiveResponse,
    unknown,
    SaveSLODataQueryParams,
    ServiceLevelObjectiveDTORequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    RestResponseServiceLevelObjectiveResponse,
    unknown,
    SaveSLODataQueryParams,
    ServiceLevelObjectiveDTORequestBody,
    void
  >('POST', getConfig('cv/api'), `/slo`, props, signal)

export interface GetServiceLevelObjectivesRiskCountQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  userJourneyIdentifiers?: string[]
  monitoredServiceIdentifier?: string
  sliTypes?: ('Availability' | 'Latency')[]
  targetTypes?: ('Rolling' | 'Calender')[]
  errorBudgetRisks?: ('EXHAUSTED' | 'UNHEALTHY' | 'NEED_ATTENTION' | 'OBSERVE' | 'HEALTHY')[]
}

export type GetServiceLevelObjectivesRiskCountProps = Omit<
  GetProps<ResponseSLORiskCountResponse, unknown, GetServiceLevelObjectivesRiskCountQueryParams, void>,
  'path'
>

/**
 * get all service level objectives count by risk
 */
export const GetServiceLevelObjectivesRiskCount = (props: GetServiceLevelObjectivesRiskCountProps) => (
  <Get<ResponseSLORiskCountResponse, unknown, GetServiceLevelObjectivesRiskCountQueryParams, void>
    path={`/slo-dashboard/risk-count`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetServiceLevelObjectivesRiskCountProps = Omit<
  UseGetProps<ResponseSLORiskCountResponse, unknown, GetServiceLevelObjectivesRiskCountQueryParams, void>,
  'path'
>

/**
 * get all service level objectives count by risk
 */
export const useGetServiceLevelObjectivesRiskCount = (props: UseGetServiceLevelObjectivesRiskCountProps) =>
  useGet<ResponseSLORiskCountResponse, unknown, GetServiceLevelObjectivesRiskCountQueryParams, void>(
    `/slo-dashboard/risk-count`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get all service level objectives count by risk
 */
export const getServiceLevelObjectivesRiskCountPromise = (
  props: GetUsingFetchProps<ResponseSLORiskCountResponse, unknown, GetServiceLevelObjectivesRiskCountQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseSLORiskCountResponse, unknown, GetServiceLevelObjectivesRiskCountQueryParams, void>(
    getConfig('cv/api'),
    `/slo-dashboard/risk-count`,
    props,
    signal
  )

export interface GetSLODetailsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export interface GetSLODetailsPathParams {
  identifier: string
}

export type GetSLODetailsProps = Omit<
  GetProps<ResponseSLODashboardDetail, unknown, GetSLODetailsQueryParams, GetSLODetailsPathParams>,
  'path'
> &
  GetSLODetailsPathParams

/**
 * get SLO Dashboard Detail
 */
export const GetSLODetails = ({ identifier, ...props }: GetSLODetailsProps) => (
  <Get<ResponseSLODashboardDetail, unknown, GetSLODetailsQueryParams, GetSLODetailsPathParams>
    path={`/slo-dashboard/widget/${identifier}`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetSLODetailsProps = Omit<
  UseGetProps<ResponseSLODashboardDetail, unknown, GetSLODetailsQueryParams, GetSLODetailsPathParams>,
  'path'
> &
  GetSLODetailsPathParams

/**
 * get SLO Dashboard Detail
 */
export const useGetSLODetails = ({ identifier, ...props }: UseGetSLODetailsProps) =>
  useGet<ResponseSLODashboardDetail, unknown, GetSLODetailsQueryParams, GetSLODetailsPathParams>(
    (paramsInPath: GetSLODetailsPathParams) => `/slo-dashboard/widget/${paramsInPath.identifier}`,
    { base: getConfig('cv/api'), pathParams: { identifier }, ...props }
  )

/**
 * get SLO Dashboard Detail
 */
export const getSLODetailsPromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<ResponseSLODashboardDetail, unknown, GetSLODetailsQueryParams, GetSLODetailsPathParams> & {
    identifier: string
  },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseSLODashboardDetail, unknown, GetSLODetailsQueryParams, GetSLODetailsPathParams>(
    getConfig('cv/api'),
    `/slo-dashboard/widget/${identifier}`,
    props,
    signal
  )

export interface GetSLODashboardWidgetsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  userJourneyIdentifiers?: string[]
  monitoredServiceIdentifier?: string
  sliTypes?: ('Availability' | 'Latency')[]
  targetTypes?: ('Rolling' | 'Calender')[]
  errorBudgetRisks?: ('EXHAUSTED' | 'UNHEALTHY' | 'NEED_ATTENTION' | 'OBSERVE' | 'HEALTHY')[]
  pageNumber?: number
  pageSize?: number
}

export type GetSLODashboardWidgetsProps = Omit<
  GetProps<ResponsePageSLODashboardWidget, unknown, GetSLODashboardWidgetsQueryParams, void>,
  'path'
>

/**
 * get widget list
 */
export const GetSLODashboardWidgets = (props: GetSLODashboardWidgetsProps) => (
  <Get<ResponsePageSLODashboardWidget, unknown, GetSLODashboardWidgetsQueryParams, void>
    path={`/slo-dashboard/widgets`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetSLODashboardWidgetsProps = Omit<
  UseGetProps<ResponsePageSLODashboardWidget, unknown, GetSLODashboardWidgetsQueryParams, void>,
  'path'
>

/**
 * get widget list
 */
export const useGetSLODashboardWidgets = (props: UseGetSLODashboardWidgetsProps) =>
  useGet<ResponsePageSLODashboardWidget, unknown, GetSLODashboardWidgetsQueryParams, void>(`/slo-dashboard/widgets`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get widget list
 */
export const getSLODashboardWidgetsPromise = (
  props: GetUsingFetchProps<ResponsePageSLODashboardWidget, unknown, GetSLODashboardWidgetsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageSLODashboardWidget, unknown, GetSLODashboardWidgetsQueryParams, void>(
    getConfig('cv/api'),
    `/slo-dashboard/widgets`,
    props,
    signal
  )

export interface DeleteSLODataQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type DeleteSLODataProps = Omit<
  MutateProps<RestResponseBoolean, unknown, DeleteSLODataQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * delete slo data
 */
export const DeleteSLOData = (props: DeleteSLODataProps) => (
  <Mutate<RestResponseBoolean, unknown, DeleteSLODataQueryParams, string, void>
    verb="DELETE"
    path={`/slo`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseDeleteSLODataProps = Omit<
  UseMutateProps<RestResponseBoolean, unknown, DeleteSLODataQueryParams, string, void>,
  'path' | 'verb'
>

/**
 * delete slo data
 */
export const useDeleteSLOData = (props: UseDeleteSLODataProps) =>
  useMutate<RestResponseBoolean, unknown, DeleteSLODataQueryParams, string, void>('DELETE', `/slo`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * delete slo data
 */
export const deleteSLODataPromise = (
  props: MutateUsingFetchProps<RestResponseBoolean, unknown, DeleteSLODataQueryParams, string, void>,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<RestResponseBoolean, unknown, DeleteSLODataQueryParams, string, void>(
    'DELETE',
    getConfig('cv/api'),
    `/slo`,
    props,
    signal
  )

export interface GetServiceLevelObjectiveQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export interface GetServiceLevelObjectivePathParams {
  identifier: string
}

export type GetServiceLevelObjectiveProps = Omit<
  GetProps<
    RestResponseServiceLevelObjectiveResponse,
    unknown,
    GetServiceLevelObjectiveQueryParams,
    GetServiceLevelObjectivePathParams
  >,
  'path'
> &
  GetServiceLevelObjectivePathParams

/**
 * get service level objective data
 */
export const GetServiceLevelObjective = ({ identifier, ...props }: GetServiceLevelObjectiveProps) => (
  <Get<
    RestResponseServiceLevelObjectiveResponse,
    unknown,
    GetServiceLevelObjectiveQueryParams,
    GetServiceLevelObjectivePathParams
  >
    path={`/slo/${identifier}`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetServiceLevelObjectiveProps = Omit<
  UseGetProps<
    RestResponseServiceLevelObjectiveResponse,
    unknown,
    GetServiceLevelObjectiveQueryParams,
    GetServiceLevelObjectivePathParams
  >,
  'path'
> &
  GetServiceLevelObjectivePathParams

/**
 * get service level objective data
 */
export const useGetServiceLevelObjective = ({ identifier, ...props }: UseGetServiceLevelObjectiveProps) =>
  useGet<
    RestResponseServiceLevelObjectiveResponse,
    unknown,
    GetServiceLevelObjectiveQueryParams,
    GetServiceLevelObjectivePathParams
  >((paramsInPath: GetServiceLevelObjectivePathParams) => `/slo/${paramsInPath.identifier}`, {
    base: getConfig('cv/api'),
    pathParams: { identifier },
    ...props
  })

/**
 * get service level objective data
 */
export const getServiceLevelObjectivePromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<
    RestResponseServiceLevelObjectiveResponse,
    unknown,
    GetServiceLevelObjectiveQueryParams,
    GetServiceLevelObjectivePathParams
  > & { identifier: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseServiceLevelObjectiveResponse,
    unknown,
    GetServiceLevelObjectiveQueryParams,
    GetServiceLevelObjectivePathParams
  >(getConfig('cv/api'), `/slo/${identifier}`, props, signal)

export interface UpdateSLODataQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export interface UpdateSLODataPathParams {
  identifier: string
}

export type UpdateSLODataProps = Omit<
  MutateProps<
    RestResponseServiceLevelObjectiveResponse,
    unknown,
    UpdateSLODataQueryParams,
    ServiceLevelObjectiveDTORequestBody,
    UpdateSLODataPathParams
  >,
  'path' | 'verb'
> &
  UpdateSLODataPathParams

/**
 * update slo data
 */
export const UpdateSLOData = ({ identifier, ...props }: UpdateSLODataProps) => (
  <Mutate<
    RestResponseServiceLevelObjectiveResponse,
    unknown,
    UpdateSLODataQueryParams,
    ServiceLevelObjectiveDTORequestBody,
    UpdateSLODataPathParams
  >
    verb="PUT"
    path={`/slo/${identifier}`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseUpdateSLODataProps = Omit<
  UseMutateProps<
    RestResponseServiceLevelObjectiveResponse,
    unknown,
    UpdateSLODataQueryParams,
    ServiceLevelObjectiveDTORequestBody,
    UpdateSLODataPathParams
  >,
  'path' | 'verb'
> &
  UpdateSLODataPathParams

/**
 * update slo data
 */
export const useUpdateSLOData = ({ identifier, ...props }: UseUpdateSLODataProps) =>
  useMutate<
    RestResponseServiceLevelObjectiveResponse,
    unknown,
    UpdateSLODataQueryParams,
    ServiceLevelObjectiveDTORequestBody,
    UpdateSLODataPathParams
  >('PUT', (paramsInPath: UpdateSLODataPathParams) => `/slo/${paramsInPath.identifier}`, {
    base: getConfig('cv/api'),
    pathParams: { identifier },
    ...props
  })

/**
 * update slo data
 */
export const updateSLODataPromise = (
  {
    identifier,
    ...props
  }: MutateUsingFetchProps<
    RestResponseServiceLevelObjectiveResponse,
    unknown,
    UpdateSLODataQueryParams,
    ServiceLevelObjectiveDTORequestBody,
    UpdateSLODataPathParams
  > & { identifier: string },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    RestResponseServiceLevelObjectiveResponse,
    unknown,
    UpdateSLODataQueryParams,
    ServiceLevelObjectiveDTORequestBody,
    UpdateSLODataPathParams
  >('PUT', getConfig('cv/api'), `/slo/${identifier}`, props, signal)

export interface GetErrorBudgetResetHistoryQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export interface GetErrorBudgetResetHistoryPathParams {
  identifier: string
}

export type GetErrorBudgetResetHistoryProps = Omit<
  GetProps<
    RestResponseListSLOErrorBudgetResetDTO,
    unknown,
    GetErrorBudgetResetHistoryQueryParams,
    GetErrorBudgetResetHistoryPathParams
  >,
  'path'
> &
  GetErrorBudgetResetHistoryPathParams

/**
 * get error budget reset History
 */
export const GetErrorBudgetResetHistory = ({ identifier, ...props }: GetErrorBudgetResetHistoryProps) => (
  <Get<
    RestResponseListSLOErrorBudgetResetDTO,
    unknown,
    GetErrorBudgetResetHistoryQueryParams,
    GetErrorBudgetResetHistoryPathParams
  >
    path={`/slo/${identifier}/errorBudgetResetHistory`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetErrorBudgetResetHistoryProps = Omit<
  UseGetProps<
    RestResponseListSLOErrorBudgetResetDTO,
    unknown,
    GetErrorBudgetResetHistoryQueryParams,
    GetErrorBudgetResetHistoryPathParams
  >,
  'path'
> &
  GetErrorBudgetResetHistoryPathParams

/**
 * get error budget reset History
 */
export const useGetErrorBudgetResetHistory = ({ identifier, ...props }: UseGetErrorBudgetResetHistoryProps) =>
  useGet<
    RestResponseListSLOErrorBudgetResetDTO,
    unknown,
    GetErrorBudgetResetHistoryQueryParams,
    GetErrorBudgetResetHistoryPathParams
  >((paramsInPath: GetErrorBudgetResetHistoryPathParams) => `/slo/${paramsInPath.identifier}/errorBudgetResetHistory`, {
    base: getConfig('cv/api'),
    pathParams: { identifier },
    ...props
  })

/**
 * get error budget reset History
 */
export const getErrorBudgetResetHistoryPromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<
    RestResponseListSLOErrorBudgetResetDTO,
    unknown,
    GetErrorBudgetResetHistoryQueryParams,
    GetErrorBudgetResetHistoryPathParams
  > & { identifier: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseListSLOErrorBudgetResetDTO,
    unknown,
    GetErrorBudgetResetHistoryQueryParams,
    GetErrorBudgetResetHistoryPathParams
  >(getConfig('cv/api'), `/slo/${identifier}/errorBudgetResetHistory`, props, signal)

export interface GetServiceLevelObjectiveLogsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  logType: 'ApiCallLog' | 'ExecutionLog'
  errorLogsOnly?: boolean
  startTime: number
  endTime: number
  pageNumber?: number
  pageSize?: number
}

export interface GetServiceLevelObjectiveLogsPathParams {
  identifier: string
}

export type GetServiceLevelObjectiveLogsProps = Omit<
  GetProps<
    RestResponsePageCVNGLogDTO,
    unknown,
    GetServiceLevelObjectiveLogsQueryParams,
    GetServiceLevelObjectiveLogsPathParams
  >,
  'path'
> &
  GetServiceLevelObjectiveLogsPathParams

/**
 * get service level objective logs
 */
export const GetServiceLevelObjectiveLogs = ({ identifier, ...props }: GetServiceLevelObjectiveLogsProps) => (
  <Get<
    RestResponsePageCVNGLogDTO,
    unknown,
    GetServiceLevelObjectiveLogsQueryParams,
    GetServiceLevelObjectiveLogsPathParams
  >
    path={`/slo/${identifier}/logs`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetServiceLevelObjectiveLogsProps = Omit<
  UseGetProps<
    RestResponsePageCVNGLogDTO,
    unknown,
    GetServiceLevelObjectiveLogsQueryParams,
    GetServiceLevelObjectiveLogsPathParams
  >,
  'path'
> &
  GetServiceLevelObjectiveLogsPathParams

/**
 * get service level objective logs
 */
export const useGetServiceLevelObjectiveLogs = ({ identifier, ...props }: UseGetServiceLevelObjectiveLogsProps) =>
  useGet<
    RestResponsePageCVNGLogDTO,
    unknown,
    GetServiceLevelObjectiveLogsQueryParams,
    GetServiceLevelObjectiveLogsPathParams
  >((paramsInPath: GetServiceLevelObjectiveLogsPathParams) => `/slo/${paramsInPath.identifier}/logs`, {
    base: getConfig('cv/api'),
    pathParams: { identifier },
    ...props
  })

/**
 * get service level objective logs
 */
export const getServiceLevelObjectiveLogsPromise = (
  {
    identifier,
    ...props
  }: GetUsingFetchProps<
    RestResponsePageCVNGLogDTO,
    unknown,
    GetServiceLevelObjectiveLogsQueryParams,
    GetServiceLevelObjectiveLogsPathParams
  > & { identifier: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponsePageCVNGLogDTO,
    unknown,
    GetServiceLevelObjectiveLogsQueryParams,
    GetServiceLevelObjectiveLogsPathParams
  >(getConfig('cv/api'), `/slo/${identifier}/logs`, props, signal)

export interface ResetErrorBudgetQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export interface ResetErrorBudgetPathParams {
  identifier: string
}

export type ResetErrorBudgetProps = Omit<
  MutateProps<
    RestResponseSLOErrorBudgetResetDTO,
    unknown,
    ResetErrorBudgetQueryParams,
    SLOErrorBudgetResetDTO,
    ResetErrorBudgetPathParams
  >,
  'path' | 'verb'
> &
  ResetErrorBudgetPathParams

/**
 * reset Error budget history
 */
export const ResetErrorBudget = ({ identifier, ...props }: ResetErrorBudgetProps) => (
  <Mutate<
    RestResponseSLOErrorBudgetResetDTO,
    unknown,
    ResetErrorBudgetQueryParams,
    SLOErrorBudgetResetDTO,
    ResetErrorBudgetPathParams
  >
    verb="POST"
    path={`/slo/${identifier}/resetErrorBudget`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseResetErrorBudgetProps = Omit<
  UseMutateProps<
    RestResponseSLOErrorBudgetResetDTO,
    unknown,
    ResetErrorBudgetQueryParams,
    SLOErrorBudgetResetDTO,
    ResetErrorBudgetPathParams
  >,
  'path' | 'verb'
> &
  ResetErrorBudgetPathParams

/**
 * reset Error budget history
 */
export const useResetErrorBudget = ({ identifier, ...props }: UseResetErrorBudgetProps) =>
  useMutate<
    RestResponseSLOErrorBudgetResetDTO,
    unknown,
    ResetErrorBudgetQueryParams,
    SLOErrorBudgetResetDTO,
    ResetErrorBudgetPathParams
  >('POST', (paramsInPath: ResetErrorBudgetPathParams) => `/slo/${paramsInPath.identifier}/resetErrorBudget`, {
    base: getConfig('cv/api'),
    pathParams: { identifier },
    ...props
  })

/**
 * reset Error budget history
 */
export const resetErrorBudgetPromise = (
  {
    identifier,
    ...props
  }: MutateUsingFetchProps<
    RestResponseSLOErrorBudgetResetDTO,
    unknown,
    ResetErrorBudgetQueryParams,
    SLOErrorBudgetResetDTO,
    ResetErrorBudgetPathParams
  > & { identifier: string },
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    RestResponseSLOErrorBudgetResetDTO,
    unknown,
    ResetErrorBudgetQueryParams,
    SLOErrorBudgetResetDTO,
    ResetErrorBudgetPathParams
  >('POST', getConfig('cv/api'), `/slo/${identifier}/resetErrorBudget`, props, signal)

export interface GetSplunkSampleDataQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  query: string
  requestGuid: string
}

export type GetSplunkSampleDataProps = Omit<
  GetProps<RestResponseListLinkedHashMap, unknown, GetSplunkSampleDataQueryParams, void>,
  'path'
>

/**
 * validates given setting for splunk data source
 */
export const GetSplunkSampleData = (props: GetSplunkSampleDataProps) => (
  <Get<RestResponseListLinkedHashMap, unknown, GetSplunkSampleDataQueryParams, void>
    path={`/splunk/sample-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetSplunkSampleDataProps = Omit<
  UseGetProps<RestResponseListLinkedHashMap, unknown, GetSplunkSampleDataQueryParams, void>,
  'path'
>

/**
 * validates given setting for splunk data source
 */
export const useGetSplunkSampleData = (props: UseGetSplunkSampleDataProps) =>
  useGet<RestResponseListLinkedHashMap, unknown, GetSplunkSampleDataQueryParams, void>(`/splunk/sample-data`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * validates given setting for splunk data source
 */
export const getSplunkSampleDataPromise = (
  props: GetUsingFetchProps<RestResponseListLinkedHashMap, unknown, GetSplunkSampleDataQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListLinkedHashMap, unknown, GetSplunkSampleDataQueryParams, void>(
    getConfig('cv/api'),
    `/splunk/sample-data`,
    props,
    signal
  )

export interface GetSplunkSavedSearchesQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier?: string
  requestGuid: string
}

export type GetSplunkSavedSearchesProps = Omit<
  GetProps<RestResponseListSplunkSavedSearch, unknown, GetSplunkSavedSearchesQueryParams, void>,
  'path'
>

/**
 * gets saved searches in splunk
 */
export const GetSplunkSavedSearches = (props: GetSplunkSavedSearchesProps) => (
  <Get<RestResponseListSplunkSavedSearch, unknown, GetSplunkSavedSearchesQueryParams, void>
    path={`/splunk/saved-searches`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetSplunkSavedSearchesProps = Omit<
  UseGetProps<RestResponseListSplunkSavedSearch, unknown, GetSplunkSavedSearchesQueryParams, void>,
  'path'
>

/**
 * gets saved searches in splunk
 */
export const useGetSplunkSavedSearches = (props: UseGetSplunkSavedSearchesProps) =>
  useGet<RestResponseListSplunkSavedSearch, unknown, GetSplunkSavedSearchesQueryParams, void>(
    `/splunk/saved-searches`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * gets saved searches in splunk
 */
export const getSplunkSavedSearchesPromise = (
  props: GetUsingFetchProps<RestResponseListSplunkSavedSearch, unknown, GetSplunkSavedSearchesQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListSplunkSavedSearch, unknown, GetSplunkSavedSearchesQueryParams, void>(
    getConfig('cv/api'),
    `/splunk/saved-searches`,
    props,
    signal
  )

export interface GetStackdriverLogSampleDataQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  tracingId: string
}

export type GetStackdriverLogSampleDataProps = Omit<
  MutateProps<
    ResponseListLinkedHashMap,
    Failure | Error,
    GetStackdriverLogSampleDataQueryParams,
    LogSampleRequestDTORequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * get sample data for a query
 */
export const GetStackdriverLogSampleData = (props: GetStackdriverLogSampleDataProps) => (
  <Mutate<
    ResponseListLinkedHashMap,
    Failure | Error,
    GetStackdriverLogSampleDataQueryParams,
    LogSampleRequestDTORequestBody,
    void
  >
    verb="POST"
    path={`/stackdriver-log/sample-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetStackdriverLogSampleDataProps = Omit<
  UseMutateProps<
    ResponseListLinkedHashMap,
    Failure | Error,
    GetStackdriverLogSampleDataQueryParams,
    LogSampleRequestDTORequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * get sample data for a query
 */
export const useGetStackdriverLogSampleData = (props: UseGetStackdriverLogSampleDataProps) =>
  useMutate<
    ResponseListLinkedHashMap,
    Failure | Error,
    GetStackdriverLogSampleDataQueryParams,
    LogSampleRequestDTORequestBody,
    void
  >('POST', `/stackdriver-log/sample-data`, { base: getConfig('cv/api'), ...props })

/**
 * get sample data for a query
 */
export const getStackdriverLogSampleDataPromise = (
  props: MutateUsingFetchProps<
    ResponseListLinkedHashMap,
    Failure | Error,
    GetStackdriverLogSampleDataQueryParams,
    LogSampleRequestDTORequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseListLinkedHashMap,
    Failure | Error,
    GetStackdriverLogSampleDataQueryParams,
    LogSampleRequestDTORequestBody,
    void
  >('POST', getConfig('cv/api'), `/stackdriver-log/sample-data`, props, signal)

export interface GetStackdriverDashboardDetailQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  path: string
  tracingId: string
}

export type GetStackdriverDashboardDetailProps = Omit<
  GetProps<ResponseListStackdriverDashboardDetail, Failure | Error, GetStackdriverDashboardDetailQueryParams, void>,
  'path'
>

/**
 * get details about one dashboard
 */
export const GetStackdriverDashboardDetail = (props: GetStackdriverDashboardDetailProps) => (
  <Get<ResponseListStackdriverDashboardDetail, Failure | Error, GetStackdriverDashboardDetailQueryParams, void>
    path={`/stackdriver/dashboard-detail`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetStackdriverDashboardDetailProps = Omit<
  UseGetProps<ResponseListStackdriverDashboardDetail, Failure | Error, GetStackdriverDashboardDetailQueryParams, void>,
  'path'
>

/**
 * get details about one dashboard
 */
export const useGetStackdriverDashboardDetail = (props: UseGetStackdriverDashboardDetailProps) =>
  useGet<ResponseListStackdriverDashboardDetail, Failure | Error, GetStackdriverDashboardDetailQueryParams, void>(
    `/stackdriver/dashboard-detail`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get details about one dashboard
 */
export const getStackdriverDashboardDetailPromise = (
  props: GetUsingFetchProps<
    ResponseListStackdriverDashboardDetail,
    Failure | Error,
    GetStackdriverDashboardDetailQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    ResponseListStackdriverDashboardDetail,
    Failure | Error,
    GetStackdriverDashboardDetailQueryParams,
    void
  >(getConfig('cv/api'), `/stackdriver/dashboard-detail`, props, signal)

export interface GetStackdriverDashboardsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  pageSize: number
  offset: number
  filter?: string
  tracingId: string
}

export type GetStackdriverDashboardsProps = Omit<
  GetProps<ResponsePageStackdriverDashboardDTO, Failure | Error, GetStackdriverDashboardsQueryParams, void>,
  'path'
>

/**
 * get all stackdriver dashboards
 */
export const GetStackdriverDashboards = (props: GetStackdriverDashboardsProps) => (
  <Get<ResponsePageStackdriverDashboardDTO, Failure | Error, GetStackdriverDashboardsQueryParams, void>
    path={`/stackdriver/dashboards`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetStackdriverDashboardsProps = Omit<
  UseGetProps<ResponsePageStackdriverDashboardDTO, Failure | Error, GetStackdriverDashboardsQueryParams, void>,
  'path'
>

/**
 * get all stackdriver dashboards
 */
export const useGetStackdriverDashboards = (props: UseGetStackdriverDashboardsProps) =>
  useGet<ResponsePageStackdriverDashboardDTO, Failure | Error, GetStackdriverDashboardsQueryParams, void>(
    `/stackdriver/dashboards`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get all stackdriver dashboards
 */
export const getStackdriverDashboardsPromise = (
  props: GetUsingFetchProps<
    ResponsePageStackdriverDashboardDTO,
    Failure | Error,
    GetStackdriverDashboardsQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageStackdriverDashboardDTO, Failure | Error, GetStackdriverDashboardsQueryParams, void>(
    getConfig('cv/api'),
    `/stackdriver/dashboards`,
    props,
    signal
  )

export interface GetStackdriverSampleDataQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  connectorIdentifier: string
  tracingId: string
}

export interface GetStackdriverSampleDataRequestBody {
  [key: string]: any
}

export type GetStackdriverSampleDataProps = Omit<
  MutateProps<
    ResponseSetTimeSeriesSampleDTO,
    Failure | Error,
    GetStackdriverSampleDataQueryParams,
    GetStackdriverSampleDataRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * get sample data for one metric
 */
export const GetStackdriverSampleData = (props: GetStackdriverSampleDataProps) => (
  <Mutate<
    ResponseSetTimeSeriesSampleDTO,
    Failure | Error,
    GetStackdriverSampleDataQueryParams,
    GetStackdriverSampleDataRequestBody,
    void
  >
    verb="POST"
    path={`/stackdriver/sample-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetStackdriverSampleDataProps = Omit<
  UseMutateProps<
    ResponseSetTimeSeriesSampleDTO,
    Failure | Error,
    GetStackdriverSampleDataQueryParams,
    GetStackdriverSampleDataRequestBody,
    void
  >,
  'path' | 'verb'
>

/**
 * get sample data for one metric
 */
export const useGetStackdriverSampleData = (props: UseGetStackdriverSampleDataProps) =>
  useMutate<
    ResponseSetTimeSeriesSampleDTO,
    Failure | Error,
    GetStackdriverSampleDataQueryParams,
    GetStackdriverSampleDataRequestBody,
    void
  >('POST', `/stackdriver/sample-data`, { base: getConfig('cv/api'), ...props })

/**
 * get sample data for one metric
 */
export const getStackdriverSampleDataPromise = (
  props: MutateUsingFetchProps<
    ResponseSetTimeSeriesSampleDTO,
    Failure | Error,
    GetStackdriverSampleDataQueryParams,
    GetStackdriverSampleDataRequestBody,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseSetTimeSeriesSampleDTO,
    Failure | Error,
    GetStackdriverSampleDataQueryParams,
    GetStackdriverSampleDataRequestBody,
    void
  >('POST', getConfig('cv/api'), `/stackdriver/sample-data`, props, signal)

export type GetSumoLogicEndPointsProps = Omit<GetProps<ResponseListString, Failure | Error, void, void>, 'path'>

/**
 * get all sumologic endpoints
 */
export const GetSumoLogicEndPoints = (props: GetSumoLogicEndPointsProps) => (
  <Get<ResponseListString, Failure | Error, void, void>
    path={`/sumologic/endpoints`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetSumoLogicEndPointsProps = Omit<UseGetProps<ResponseListString, Failure | Error, void, void>, 'path'>

/**
 * get all sumologic endpoints
 */
export const useGetSumoLogicEndPoints = (props: UseGetSumoLogicEndPointsProps) =>
  useGet<ResponseListString, Failure | Error, void, void>(`/sumologic/endpoints`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get all sumologic endpoints
 */
export const getSumoLogicEndPointsPromise = (
  props: GetUsingFetchProps<ResponseListString, Failure | Error, void, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponseListString, Failure | Error, void, void>(
    getConfig('cv/api'),
    `/sumologic/endpoints`,
    props,
    signal
  )

export interface GetTimeSeriesMetricDataQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  monitoredServiceIdentifier?: string
  startTime: number
  endTime: number
  anomalous?: boolean
  filter?: string
  healthSources?: string[]
  page?: number
  size?: number
}

export type GetTimeSeriesMetricDataProps = Omit<
  GetProps<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetTimeSeriesMetricDataQueryParams, void>,
  'path'
>

/**
 * get all time series data in a given time range
 */
export const GetTimeSeriesMetricData = (props: GetTimeSeriesMetricDataProps) => (
  <Get<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetTimeSeriesMetricDataQueryParams, void>
    path={`/timeseries-dashboard/metrics`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetTimeSeriesMetricDataProps = Omit<
  UseGetProps<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetTimeSeriesMetricDataQueryParams, void>,
  'path'
>

/**
 * get all time series data in a given time range
 */
export const useGetTimeSeriesMetricData = (props: UseGetTimeSeriesMetricDataProps) =>
  useGet<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetTimeSeriesMetricDataQueryParams, void>(
    `/timeseries-dashboard/metrics`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get all time series data in a given time range
 */
export const getTimeSeriesMetricDataPromise = (
  props: GetUsingFetchProps<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetTimeSeriesMetricDataQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponsePageTimeSeriesMetricDataDTO, unknown, GetTimeSeriesMetricDataQueryParams, void>(
    getConfig('cv/api'),
    `/timeseries-dashboard/metrics`,
    props,
    signal
  )

export interface GetTimeSeriesDataQueryParams {
  accountId: string
  cvConfigId: string
  startTimeEpochMillis: number
  endTimeEpochMillis: number
  metricName: string
  groupNameList: string[]
}

export type GetTimeSeriesDataProps = Omit<
  GetProps<RestResponseTimeSeriesTestDataDTO, unknown, GetTimeSeriesDataQueryParams, void>,
  'path'
>

/**
 * get time series data for a given data source config
 */
export const GetTimeSeriesData = (props: GetTimeSeriesDataProps) => (
  <Get<RestResponseTimeSeriesTestDataDTO, unknown, GetTimeSeriesDataQueryParams, void>
    path={`/timeseries/metric-group-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetTimeSeriesDataProps = Omit<
  UseGetProps<RestResponseTimeSeriesTestDataDTO, unknown, GetTimeSeriesDataQueryParams, void>,
  'path'
>

/**
 * get time series data for a given data source config
 */
export const useGetTimeSeriesData = (props: UseGetTimeSeriesDataProps) =>
  useGet<RestResponseTimeSeriesTestDataDTO, unknown, GetTimeSeriesDataQueryParams, void>(
    `/timeseries/metric-group-data`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get time series data for a given data source config
 */
export const getTimeSeriesDataPromise = (
  props: GetUsingFetchProps<RestResponseTimeSeriesTestDataDTO, unknown, GetTimeSeriesDataQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseTimeSeriesTestDataDTO, unknown, GetTimeSeriesDataQueryParams, void>(
    getConfig('cv/api'),
    `/timeseries/metric-group-data`,
    props,
    signal
  )

export interface GetMetricDefinitionsQueryParams {
  accountId: string
  cvConfigId: string
}

export type GetMetricDefinitionsProps = Omit<
  GetProps<RestResponseListTimeSeriesMetricDefinition, unknown, GetMetricDefinitionsQueryParams, void>,
  'path'
>

/**
 * get metric definition for a given data source config
 */
export const GetMetricDefinitions = (props: GetMetricDefinitionsProps) => (
  <Get<RestResponseListTimeSeriesMetricDefinition, unknown, GetMetricDefinitionsQueryParams, void>
    path={`/timeseries/metric-template`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetMetricDefinitionsProps = Omit<
  UseGetProps<RestResponseListTimeSeriesMetricDefinition, unknown, GetMetricDefinitionsQueryParams, void>,
  'path'
>

/**
 * get metric definition for a given data source config
 */
export const useGetMetricDefinitions = (props: UseGetMetricDefinitionsProps) =>
  useGet<RestResponseListTimeSeriesMetricDefinition, unknown, GetMetricDefinitionsQueryParams, void>(
    `/timeseries/metric-template`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * get metric definition for a given data source config
 */
export const getMetricDefinitionsPromise = (
  props: GetUsingFetchProps<RestResponseListTimeSeriesMetricDefinition, unknown, GetMetricDefinitionsQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListTimeSeriesMetricDefinition, unknown, GetMetricDefinitionsQueryParams, void>(
    getConfig('cv/api'),
    `/timeseries/metric-template`,
    props,
    signal
  )

export interface GetAllJourneysQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  offset: number
  pageSize: number
}

export type GetAllJourneysProps = Omit<
  GetProps<ResponsePageUserJourneyResponse, unknown, GetAllJourneysQueryParams, void>,
  'path'
>

/**
 * get all user journeys
 */
export const GetAllJourneys = (props: GetAllJourneysProps) => (
  <Get<ResponsePageUserJourneyResponse, unknown, GetAllJourneysQueryParams, void>
    path={`/user-journey`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetAllJourneysProps = Omit<
  UseGetProps<ResponsePageUserJourneyResponse, unknown, GetAllJourneysQueryParams, void>,
  'path'
>

/**
 * get all user journeys
 */
export const useGetAllJourneys = (props: UseGetAllJourneysProps) =>
  useGet<ResponsePageUserJourneyResponse, unknown, GetAllJourneysQueryParams, void>(`/user-journey`, {
    base: getConfig('cv/api'),
    ...props
  })

/**
 * get all user journeys
 */
export const getAllJourneysPromise = (
  props: GetUsingFetchProps<ResponsePageUserJourneyResponse, unknown, GetAllJourneysQueryParams, void>,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<ResponsePageUserJourneyResponse, unknown, GetAllJourneysQueryParams, void>(
    getConfig('cv/api'),
    `/user-journey`,
    props,
    signal
  )

export interface SaveUserJourneyQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
}

export type SaveUserJourneyProps = Omit<
  MutateProps<RestResponseUserJourneyResponse, unknown, SaveUserJourneyQueryParams, UserJourneyDTO, void>,
  'path' | 'verb'
>

/**
 * saves user journey
 */
export const SaveUserJourney = (props: SaveUserJourneyProps) => (
  <Mutate<RestResponseUserJourneyResponse, unknown, SaveUserJourneyQueryParams, UserJourneyDTO, void>
    verb="POST"
    path={`/user-journey/create`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseSaveUserJourneyProps = Omit<
  UseMutateProps<RestResponseUserJourneyResponse, unknown, SaveUserJourneyQueryParams, UserJourneyDTO, void>,
  'path' | 'verb'
>

/**
 * saves user journey
 */
export const useSaveUserJourney = (props: UseSaveUserJourneyProps) =>
  useMutate<RestResponseUserJourneyResponse, unknown, SaveUserJourneyQueryParams, UserJourneyDTO, void>(
    'POST',
    `/user-journey/create`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * saves user journey
 */
export const saveUserJourneyPromise = (
  props: MutateUsingFetchProps<
    RestResponseUserJourneyResponse,
    unknown,
    SaveUserJourneyQueryParams,
    UserJourneyDTO,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<RestResponseUserJourneyResponse, unknown, SaveUserJourneyQueryParams, UserJourneyDTO, void>(
    'POST',
    getConfig('cv/api'),
    `/user-journey/create`,
    props,
    signal
  )

export interface ListBaselineExecutionsQueryParams {
  accountId: string
  orgIdentifier: string
  projectIdentifier: string
  verificationJobIdentifier?: string
}

export type ListBaselineExecutionsProps = Omit<
  GetProps<RestResponseListTestVerificationBaselineExecutionDTO, unknown, ListBaselineExecutionsQueryParams, void>,
  'path'
>

/**
 * list of last 5 successful baseline executions
 */
export const ListBaselineExecutions = (props: ListBaselineExecutionsProps) => (
  <Get<RestResponseListTestVerificationBaselineExecutionDTO, unknown, ListBaselineExecutionsQueryParams, void>
    path={`/verification-job-instance/baseline-executions`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseListBaselineExecutionsProps = Omit<
  UseGetProps<RestResponseListTestVerificationBaselineExecutionDTO, unknown, ListBaselineExecutionsQueryParams, void>,
  'path'
>

/**
 * list of last 5 successful baseline executions
 */
export const useListBaselineExecutions = (props: UseListBaselineExecutionsProps) =>
  useGet<RestResponseListTestVerificationBaselineExecutionDTO, unknown, ListBaselineExecutionsQueryParams, void>(
    `/verification-job-instance/baseline-executions`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * list of last 5 successful baseline executions
 */
export const listBaselineExecutionsPromise = (
  props: GetUsingFetchProps<
    RestResponseListTestVerificationBaselineExecutionDTO,
    unknown,
    ListBaselineExecutionsQueryParams,
    void
  >,
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseListTestVerificationBaselineExecutionDTO, unknown, ListBaselineExecutionsQueryParams, void>(
    getConfig('cv/api'),
    `/verification-job-instance/baseline-executions`,
    props,
    signal
  )

export interface InputSetTemplateQueryParams {
  accountId: string
}

export type InputSetTemplateProps = Omit<
  MutateProps<ResponseInputSetTemplateResponse, unknown, InputSetTemplateQueryParams, InputSetTemplateRequest, void>,
  'path' | 'verb'
>

/**
 * Given a template Add verify step to it if required
 */
export const InputSetTemplate = (props: InputSetTemplateProps) => (
  <Mutate<ResponseInputSetTemplateResponse, unknown, InputSetTemplateQueryParams, InputSetTemplateRequest, void>
    verb="POST"
    path={`/verify-step/input-set-template`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseInputSetTemplateProps = Omit<
  UseMutateProps<ResponseInputSetTemplateResponse, unknown, InputSetTemplateQueryParams, InputSetTemplateRequest, void>,
  'path' | 'verb'
>

/**
 * Given a template Add verify step to it if required
 */
export const useInputSetTemplate = (props: UseInputSetTemplateProps) =>
  useMutate<ResponseInputSetTemplateResponse, unknown, InputSetTemplateQueryParams, InputSetTemplateRequest, void>(
    'POST',
    `/verify-step/input-set-template`,
    { base: getConfig('cv/api'), ...props }
  )

/**
 * Given a template Add verify step to it if required
 */
export const inputSetTemplatePromise = (
  props: MutateUsingFetchProps<
    ResponseInputSetTemplateResponse,
    unknown,
    InputSetTemplateQueryParams,
    InputSetTemplateRequest,
    void
  >,
  signal?: RequestInit['signal']
) =>
  mutateUsingFetch<
    ResponseInputSetTemplateResponse,
    unknown,
    InputSetTemplateQueryParams,
    InputSetTemplateRequest,
    void
  >('POST', getConfig('cv/api'), `/verify-step/input-set-template`, props, signal)

export interface GetVerifyStepNodeNamesQueryParams {
  accountId: string
}

export interface GetVerifyStepNodeNamesPathParams {
  verifyStepExecutionId: string
}

export type GetVerifyStepNodeNamesProps = Omit<
  GetProps<RestResponseSetString, unknown, GetVerifyStepNodeNamesQueryParams, GetVerifyStepNodeNamesPathParams>,
  'path'
> &
  GetVerifyStepNodeNamesPathParams

/**
 * get all the Node names
 */
export const GetVerifyStepNodeNames = ({ verifyStepExecutionId, ...props }: GetVerifyStepNodeNamesProps) => (
  <Get<RestResponseSetString, unknown, GetVerifyStepNodeNamesQueryParams, GetVerifyStepNodeNamesPathParams>
    path={`/verify-step/${verifyStepExecutionId}/all-node-names`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetVerifyStepNodeNamesProps = Omit<
  UseGetProps<RestResponseSetString, unknown, GetVerifyStepNodeNamesQueryParams, GetVerifyStepNodeNamesPathParams>,
  'path'
> &
  GetVerifyStepNodeNamesPathParams

/**
 * get all the Node names
 */
export const useGetVerifyStepNodeNames = ({ verifyStepExecutionId, ...props }: UseGetVerifyStepNodeNamesProps) =>
  useGet<RestResponseSetString, unknown, GetVerifyStepNodeNamesQueryParams, GetVerifyStepNodeNamesPathParams>(
    (paramsInPath: GetVerifyStepNodeNamesPathParams) =>
      `/verify-step/${paramsInPath.verifyStepExecutionId}/all-node-names`,
    { base: getConfig('cv/api'), pathParams: { verifyStepExecutionId }, ...props }
  )

/**
 * get all the Node names
 */
export const getVerifyStepNodeNamesPromise = (
  {
    verifyStepExecutionId,
    ...props
  }: GetUsingFetchProps<
    RestResponseSetString,
    unknown,
    GetVerifyStepNodeNamesQueryParams,
    GetVerifyStepNodeNamesPathParams
  > & { verifyStepExecutionId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponseSetString, unknown, GetVerifyStepNodeNamesQueryParams, GetVerifyStepNodeNamesPathParams>(
    getConfig('cv/api'),
    `/verify-step/${verifyStepExecutionId}/all-node-names`,
    props,
    signal
  )

export interface GetVerifyStepTransactionNamesQueryParams {
  accountId: string
}

export interface GetVerifyStepTransactionNamesPathParams {
  verifyStepExecutionId: string
}

export type GetVerifyStepTransactionNamesProps = Omit<
  GetProps<
    RestResponseListString,
    unknown,
    GetVerifyStepTransactionNamesQueryParams,
    GetVerifyStepTransactionNamesPathParams
  >,
  'path'
> &
  GetVerifyStepTransactionNamesPathParams

/**
 * get all the transaction names
 */
export const GetVerifyStepTransactionNames = ({
  verifyStepExecutionId,
  ...props
}: GetVerifyStepTransactionNamesProps) => (
  <Get<
    RestResponseListString,
    unknown,
    GetVerifyStepTransactionNamesQueryParams,
    GetVerifyStepTransactionNamesPathParams
  >
    path={`/verify-step/${verifyStepExecutionId}/all-transaction-names`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetVerifyStepTransactionNamesProps = Omit<
  UseGetProps<
    RestResponseListString,
    unknown,
    GetVerifyStepTransactionNamesQueryParams,
    GetVerifyStepTransactionNamesPathParams
  >,
  'path'
> &
  GetVerifyStepTransactionNamesPathParams

/**
 * get all the transaction names
 */
export const useGetVerifyStepTransactionNames = ({
  verifyStepExecutionId,
  ...props
}: UseGetVerifyStepTransactionNamesProps) =>
  useGet<
    RestResponseListString,
    unknown,
    GetVerifyStepTransactionNamesQueryParams,
    GetVerifyStepTransactionNamesPathParams
  >(
    (paramsInPath: GetVerifyStepTransactionNamesPathParams) =>
      `/verify-step/${paramsInPath.verifyStepExecutionId}/all-transaction-names`,
    { base: getConfig('cv/api'), pathParams: { verifyStepExecutionId }, ...props }
  )

/**
 * get all the transaction names
 */
export const getVerifyStepTransactionNamesPromise = (
  {
    verifyStepExecutionId,
    ...props
  }: GetUsingFetchProps<
    RestResponseListString,
    unknown,
    GetVerifyStepTransactionNamesQueryParams,
    GetVerifyStepTransactionNamesPathParams
  > & { verifyStepExecutionId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseListString,
    unknown,
    GetVerifyStepTransactionNamesQueryParams,
    GetVerifyStepTransactionNamesPathParams
  >(getConfig('cv/api'), `/verify-step/${verifyStepExecutionId}/all-transaction-names`, props, signal)

export interface GetVerifyStepDeploymentActivitySummaryQueryParams {
  accountId: string
}

export interface GetVerifyStepDeploymentActivitySummaryPathParams {
  verifyStepExecutionId: string
}

export type GetVerifyStepDeploymentActivitySummaryProps = Omit<
  GetProps<
    RestResponseDeploymentActivitySummaryDTO,
    unknown,
    GetVerifyStepDeploymentActivitySummaryQueryParams,
    GetVerifyStepDeploymentActivitySummaryPathParams
  >,
  'path'
> &
  GetVerifyStepDeploymentActivitySummaryPathParams

/**
 * get summary of deployment activity
 */
export const GetVerifyStepDeploymentActivitySummary = ({
  verifyStepExecutionId,
  ...props
}: GetVerifyStepDeploymentActivitySummaryProps) => (
  <Get<
    RestResponseDeploymentActivitySummaryDTO,
    unknown,
    GetVerifyStepDeploymentActivitySummaryQueryParams,
    GetVerifyStepDeploymentActivitySummaryPathParams
  >
    path={`/verify-step/${verifyStepExecutionId}/deployment-activity-summary`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetVerifyStepDeploymentActivitySummaryProps = Omit<
  UseGetProps<
    RestResponseDeploymentActivitySummaryDTO,
    unknown,
    GetVerifyStepDeploymentActivitySummaryQueryParams,
    GetVerifyStepDeploymentActivitySummaryPathParams
  >,
  'path'
> &
  GetVerifyStepDeploymentActivitySummaryPathParams

/**
 * get summary of deployment activity
 */
export const useGetVerifyStepDeploymentActivitySummary = ({
  verifyStepExecutionId,
  ...props
}: UseGetVerifyStepDeploymentActivitySummaryProps) =>
  useGet<
    RestResponseDeploymentActivitySummaryDTO,
    unknown,
    GetVerifyStepDeploymentActivitySummaryQueryParams,
    GetVerifyStepDeploymentActivitySummaryPathParams
  >(
    (paramsInPath: GetVerifyStepDeploymentActivitySummaryPathParams) =>
      `/verify-step/${paramsInPath.verifyStepExecutionId}/deployment-activity-summary`,
    { base: getConfig('cv/api'), pathParams: { verifyStepExecutionId }, ...props }
  )

/**
 * get summary of deployment activity
 */
export const getVerifyStepDeploymentActivitySummaryPromise = (
  {
    verifyStepExecutionId,
    ...props
  }: GetUsingFetchProps<
    RestResponseDeploymentActivitySummaryDTO,
    unknown,
    GetVerifyStepDeploymentActivitySummaryQueryParams,
    GetVerifyStepDeploymentActivitySummaryPathParams
  > & { verifyStepExecutionId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseDeploymentActivitySummaryDTO,
    unknown,
    GetVerifyStepDeploymentActivitySummaryQueryParams,
    GetVerifyStepDeploymentActivitySummaryPathParams
  >(getConfig('cv/api'), `/verify-step/${verifyStepExecutionId}/deployment-activity-summary`, props, signal)

export interface GetVerifyStepDeploymentLogAnalysisResultV2QueryParams {
  accountId: string
  label?: number
  filter?: string
  healthSources?: string[]
  clusterTypes?: ('BASELINE' | 'KNOWN_EVENT' | 'UNEXPECTED_FREQUENCY' | 'UNKNOWN_EVENT')[]
  hostName?: string
  minAngle?: number
  maxAngle?: number
  hostNames?: string[]
  clusterId?: string
  pageNumber?: number
  pageSize?: number
}

export interface GetVerifyStepDeploymentLogAnalysisResultV2PathParams {
  verifyStepExecutionId: string
}

export type GetVerifyStepDeploymentLogAnalysisResultV2Props = Omit<
  GetProps<
    RestResponseLogAnalysisClusterWithCountDTO,
    unknown,
    GetVerifyStepDeploymentLogAnalysisResultV2QueryParams,
    GetVerifyStepDeploymentLogAnalysisResultV2PathParams
  >,
  'path'
> &
  GetVerifyStepDeploymentLogAnalysisResultV2PathParams

/**
 * get logs for given activity
 */
export const GetVerifyStepDeploymentLogAnalysisResultV2 = ({
  verifyStepExecutionId,
  ...props
}: GetVerifyStepDeploymentLogAnalysisResultV2Props) => (
  <Get<
    RestResponseLogAnalysisClusterWithCountDTO,
    unknown,
    GetVerifyStepDeploymentLogAnalysisResultV2QueryParams,
    GetVerifyStepDeploymentLogAnalysisResultV2PathParams
  >
    path={`/verify-step/${verifyStepExecutionId}/deployment-log-analysis-data-v2`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetVerifyStepDeploymentLogAnalysisResultV2Props = Omit<
  UseGetProps<
    RestResponseLogAnalysisClusterWithCountDTO,
    unknown,
    GetVerifyStepDeploymentLogAnalysisResultV2QueryParams,
    GetVerifyStepDeploymentLogAnalysisResultV2PathParams
  >,
  'path'
> &
  GetVerifyStepDeploymentLogAnalysisResultV2PathParams

/**
 * get logs for given activity
 */
export const useGetVerifyStepDeploymentLogAnalysisResultV2 = ({
  verifyStepExecutionId,
  ...props
}: UseGetVerifyStepDeploymentLogAnalysisResultV2Props) =>
  useGet<
    RestResponseLogAnalysisClusterWithCountDTO,
    unknown,
    GetVerifyStepDeploymentLogAnalysisResultV2QueryParams,
    GetVerifyStepDeploymentLogAnalysisResultV2PathParams
  >(
    (paramsInPath: GetVerifyStepDeploymentLogAnalysisResultV2PathParams) =>
      `/verify-step/${paramsInPath.verifyStepExecutionId}/deployment-log-analysis-data-v2`,
    { base: getConfig('cv/api'), pathParams: { verifyStepExecutionId }, ...props }
  )

/**
 * get logs for given activity
 */
export const getVerifyStepDeploymentLogAnalysisResultV2Promise = (
  {
    verifyStepExecutionId,
    ...props
  }: GetUsingFetchProps<
    RestResponseLogAnalysisClusterWithCountDTO,
    unknown,
    GetVerifyStepDeploymentLogAnalysisResultV2QueryParams,
    GetVerifyStepDeploymentLogAnalysisResultV2PathParams
  > & { verifyStepExecutionId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseLogAnalysisClusterWithCountDTO,
    unknown,
    GetVerifyStepDeploymentLogAnalysisResultV2QueryParams,
    GetVerifyStepDeploymentLogAnalysisResultV2PathParams
  >(getConfig('cv/api'), `/verify-step/${verifyStepExecutionId}/deployment-log-analysis-data-v2`, props, signal)

export interface GetVerifyStepDeploymentRadarChartLogAnalysisClustersQueryParams {
  accountId: string
  filter?: string
  healthSources?: string[]
  clusterTypes?: ('BASELINE' | 'KNOWN_EVENT' | 'UNEXPECTED_FREQUENCY' | 'UNKNOWN_EVENT')[]
  hostName?: string
  minAngle?: number
  maxAngle?: number
  hostNames?: string[]
  clusterId?: string
}

export interface GetVerifyStepDeploymentRadarChartLogAnalysisClustersPathParams {
  verifyStepExecutionId: string
}

export type GetVerifyStepDeploymentRadarChartLogAnalysisClustersProps = Omit<
  GetProps<
    RestResponseListLogAnalysisRadarChartClusterDTO,
    unknown,
    GetVerifyStepDeploymentRadarChartLogAnalysisClustersQueryParams,
    GetVerifyStepDeploymentRadarChartLogAnalysisClustersPathParams
  >,
  'path'
> &
  GetVerifyStepDeploymentRadarChartLogAnalysisClustersPathParams

/**
 * get radar chart logs for given verify step
 */
export const GetVerifyStepDeploymentRadarChartLogAnalysisClusters = ({
  verifyStepExecutionId,
  ...props
}: GetVerifyStepDeploymentRadarChartLogAnalysisClustersProps) => (
  <Get<
    RestResponseListLogAnalysisRadarChartClusterDTO,
    unknown,
    GetVerifyStepDeploymentRadarChartLogAnalysisClustersQueryParams,
    GetVerifyStepDeploymentRadarChartLogAnalysisClustersPathParams
  >
    path={`/verify-step/${verifyStepExecutionId}/deployment-log-analysis-radar-chart-clusters`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetVerifyStepDeploymentRadarChartLogAnalysisClustersProps = Omit<
  UseGetProps<
    RestResponseListLogAnalysisRadarChartClusterDTO,
    unknown,
    GetVerifyStepDeploymentRadarChartLogAnalysisClustersQueryParams,
    GetVerifyStepDeploymentRadarChartLogAnalysisClustersPathParams
  >,
  'path'
> &
  GetVerifyStepDeploymentRadarChartLogAnalysisClustersPathParams

/**
 * get radar chart logs for given verify step
 */
export const useGetVerifyStepDeploymentRadarChartLogAnalysisClusters = ({
  verifyStepExecutionId,
  ...props
}: UseGetVerifyStepDeploymentRadarChartLogAnalysisClustersProps) =>
  useGet<
    RestResponseListLogAnalysisRadarChartClusterDTO,
    unknown,
    GetVerifyStepDeploymentRadarChartLogAnalysisClustersQueryParams,
    GetVerifyStepDeploymentRadarChartLogAnalysisClustersPathParams
  >(
    (paramsInPath: GetVerifyStepDeploymentRadarChartLogAnalysisClustersPathParams) =>
      `/verify-step/${paramsInPath.verifyStepExecutionId}/deployment-log-analysis-radar-chart-clusters`,
    { base: getConfig('cv/api'), pathParams: { verifyStepExecutionId }, ...props }
  )

/**
 * get radar chart logs for given verify step
 */
export const getVerifyStepDeploymentRadarChartLogAnalysisClustersPromise = (
  {
    verifyStepExecutionId,
    ...props
  }: GetUsingFetchProps<
    RestResponseListLogAnalysisRadarChartClusterDTO,
    unknown,
    GetVerifyStepDeploymentRadarChartLogAnalysisClustersQueryParams,
    GetVerifyStepDeploymentRadarChartLogAnalysisClustersPathParams
  > & { verifyStepExecutionId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseListLogAnalysisRadarChartClusterDTO,
    unknown,
    GetVerifyStepDeploymentRadarChartLogAnalysisClustersQueryParams,
    GetVerifyStepDeploymentRadarChartLogAnalysisClustersPathParams
  >(
    getConfig('cv/api'),
    `/verify-step/${verifyStepExecutionId}/deployment-log-analysis-radar-chart-clusters`,
    props,
    signal
  )

export interface GetVerifyStepDeploymentLogAnalysisRadarChartResultQueryParams {
  accountId: string
  filter?: string
  healthSources?: string[]
  clusterTypes?: ('BASELINE' | 'KNOWN_EVENT' | 'UNEXPECTED_FREQUENCY' | 'UNKNOWN_EVENT')[]
  hostName?: string
  minAngle?: number
  maxAngle?: number
  hostNames?: string[]
  clusterId?: string
  pageNumber?: number
  pageSize?: number
}

export interface GetVerifyStepDeploymentLogAnalysisRadarChartResultPathParams {
  verifyStepExecutionId: string
}

export type GetVerifyStepDeploymentLogAnalysisRadarChartResultProps = Omit<
  GetProps<
    RestResponseLogAnalysisRadarChartListWithCountDTO,
    unknown,
    GetVerifyStepDeploymentLogAnalysisRadarChartResultQueryParams,
    GetVerifyStepDeploymentLogAnalysisRadarChartResultPathParams
  >,
  'path'
> &
  GetVerifyStepDeploymentLogAnalysisRadarChartResultPathParams

/**
 * get radar chart logs list for given verify step
 */
export const GetVerifyStepDeploymentLogAnalysisRadarChartResult = ({
  verifyStepExecutionId,
  ...props
}: GetVerifyStepDeploymentLogAnalysisRadarChartResultProps) => (
  <Get<
    RestResponseLogAnalysisRadarChartListWithCountDTO,
    unknown,
    GetVerifyStepDeploymentLogAnalysisRadarChartResultQueryParams,
    GetVerifyStepDeploymentLogAnalysisRadarChartResultPathParams
  >
    path={`/verify-step/${verifyStepExecutionId}/deployment-log-analysis-radar-chart-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetVerifyStepDeploymentLogAnalysisRadarChartResultProps = Omit<
  UseGetProps<
    RestResponseLogAnalysisRadarChartListWithCountDTO,
    unknown,
    GetVerifyStepDeploymentLogAnalysisRadarChartResultQueryParams,
    GetVerifyStepDeploymentLogAnalysisRadarChartResultPathParams
  >,
  'path'
> &
  GetVerifyStepDeploymentLogAnalysisRadarChartResultPathParams

/**
 * get radar chart logs list for given verify step
 */
export const useGetVerifyStepDeploymentLogAnalysisRadarChartResult = ({
  verifyStepExecutionId,
  ...props
}: UseGetVerifyStepDeploymentLogAnalysisRadarChartResultProps) =>
  useGet<
    RestResponseLogAnalysisRadarChartListWithCountDTO,
    unknown,
    GetVerifyStepDeploymentLogAnalysisRadarChartResultQueryParams,
    GetVerifyStepDeploymentLogAnalysisRadarChartResultPathParams
  >(
    (paramsInPath: GetVerifyStepDeploymentLogAnalysisRadarChartResultPathParams) =>
      `/verify-step/${paramsInPath.verifyStepExecutionId}/deployment-log-analysis-radar-chart-data`,
    { base: getConfig('cv/api'), pathParams: { verifyStepExecutionId }, ...props }
  )

/**
 * get radar chart logs list for given verify step
 */
export const getVerifyStepDeploymentLogAnalysisRadarChartResultPromise = (
  {
    verifyStepExecutionId,
    ...props
  }: GetUsingFetchProps<
    RestResponseLogAnalysisRadarChartListWithCountDTO,
    unknown,
    GetVerifyStepDeploymentLogAnalysisRadarChartResultQueryParams,
    GetVerifyStepDeploymentLogAnalysisRadarChartResultPathParams
  > & { verifyStepExecutionId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseLogAnalysisRadarChartListWithCountDTO,
    unknown,
    GetVerifyStepDeploymentLogAnalysisRadarChartResultQueryParams,
    GetVerifyStepDeploymentLogAnalysisRadarChartResultPathParams
  >(
    getConfig('cv/api'),
    `/verify-step/${verifyStepExecutionId}/deployment-log-analysis-radar-chart-data`,
    props,
    signal
  )

export interface GetVerifyStepDeploymentMetricsQueryParams {
  accountId: string
  filter?: string
  healthSources?: string[]
  anomalousMetricsOnly?: boolean
  hostNames?: string[]
  transactionNames?: string[]
  anomalousNodesOnly?: boolean
  pageNumber?: number
  pageSize?: number
}

export interface GetVerifyStepDeploymentMetricsPathParams {
  verifyStepExecutionId: string
}

export type GetVerifyStepDeploymentMetricsProps = Omit<
  GetProps<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetVerifyStepDeploymentMetricsQueryParams,
    GetVerifyStepDeploymentMetricsPathParams
  >,
  'path'
> &
  GetVerifyStepDeploymentMetricsPathParams

/**
 * get metrics for given activity
 */
export const GetVerifyStepDeploymentMetrics = ({
  verifyStepExecutionId,
  ...props
}: GetVerifyStepDeploymentMetricsProps) => (
  <Get<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetVerifyStepDeploymentMetricsQueryParams,
    GetVerifyStepDeploymentMetricsPathParams
  >
    path={`/verify-step/${verifyStepExecutionId}/deployment-timeseries-data`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetVerifyStepDeploymentMetricsProps = Omit<
  UseGetProps<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetVerifyStepDeploymentMetricsQueryParams,
    GetVerifyStepDeploymentMetricsPathParams
  >,
  'path'
> &
  GetVerifyStepDeploymentMetricsPathParams

/**
 * get metrics for given activity
 */
export const useGetVerifyStepDeploymentMetrics = ({
  verifyStepExecutionId,
  ...props
}: UseGetVerifyStepDeploymentMetricsProps) =>
  useGet<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetVerifyStepDeploymentMetricsQueryParams,
    GetVerifyStepDeploymentMetricsPathParams
  >(
    (paramsInPath: GetVerifyStepDeploymentMetricsPathParams) =>
      `/verify-step/${paramsInPath.verifyStepExecutionId}/deployment-timeseries-data`,
    { base: getConfig('cv/api'), pathParams: { verifyStepExecutionId }, ...props }
  )

/**
 * get metrics for given activity
 */
export const getVerifyStepDeploymentMetricsPromise = (
  {
    verifyStepExecutionId,
    ...props
  }: GetUsingFetchProps<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetVerifyStepDeploymentMetricsQueryParams,
    GetVerifyStepDeploymentMetricsPathParams
  > & { verifyStepExecutionId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseTransactionMetricInfoSummaryPageDTO,
    unknown,
    GetVerifyStepDeploymentMetricsQueryParams,
    GetVerifyStepDeploymentMetricsPathParams
  >(getConfig('cv/api'), `/verify-step/${verifyStepExecutionId}/deployment-timeseries-data`, props, signal)

export interface GetVerifyStepHealthSourcesQueryParams {
  accountId: string
}

export interface GetVerifyStepHealthSourcesPathParams {
  verifyStepExecutionId: string
}

export type GetVerifyStepHealthSourcesProps = Omit<
  GetProps<
    RestResponseSetHealthSourceDTO,
    unknown,
    GetVerifyStepHealthSourcesQueryParams,
    GetVerifyStepHealthSourcesPathParams
  >,
  'path'
> &
  GetVerifyStepHealthSourcesPathParams

/**
 * get health sources  for an activity
 */
export const GetVerifyStepHealthSources = ({ verifyStepExecutionId, ...props }: GetVerifyStepHealthSourcesProps) => (
  <Get<
    RestResponseSetHealthSourceDTO,
    unknown,
    GetVerifyStepHealthSourcesQueryParams,
    GetVerifyStepHealthSourcesPathParams
  >
    path={`/verify-step/${verifyStepExecutionId}/healthSources`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetVerifyStepHealthSourcesProps = Omit<
  UseGetProps<
    RestResponseSetHealthSourceDTO,
    unknown,
    GetVerifyStepHealthSourcesQueryParams,
    GetVerifyStepHealthSourcesPathParams
  >,
  'path'
> &
  GetVerifyStepHealthSourcesPathParams

/**
 * get health sources  for an activity
 */
export const useGetVerifyStepHealthSources = ({
  verifyStepExecutionId,
  ...props
}: UseGetVerifyStepHealthSourcesProps) =>
  useGet<
    RestResponseSetHealthSourceDTO,
    unknown,
    GetVerifyStepHealthSourcesQueryParams,
    GetVerifyStepHealthSourcesPathParams
  >(
    (paramsInPath: GetVerifyStepHealthSourcesPathParams) =>
      `/verify-step/${paramsInPath.verifyStepExecutionId}/healthSources`,
    { base: getConfig('cv/api'), pathParams: { verifyStepExecutionId }, ...props }
  )

/**
 * get health sources  for an activity
 */
export const getVerifyStepHealthSourcesPromise = (
  {
    verifyStepExecutionId,
    ...props
  }: GetUsingFetchProps<
    RestResponseSetHealthSourceDTO,
    unknown,
    GetVerifyStepHealthSourcesQueryParams,
    GetVerifyStepHealthSourcesPathParams
  > & { verifyStepExecutionId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<
    RestResponseSetHealthSourceDTO,
    unknown,
    GetVerifyStepHealthSourcesQueryParams,
    GetVerifyStepHealthSourcesPathParams
  >(getConfig('cv/api'), `/verify-step/${verifyStepExecutionId}/healthSources`, props, signal)

export interface GetVerifyStepLogsQueryParams {
  accountId: string
  logType: 'ApiCallLog' | 'ExecutionLog'
  errorLogsOnly?: boolean
  healthSources?: string[]
  pageNumber?: number
  pageSize?: number
}

export interface GetVerifyStepLogsPathParams {
  verifyStepExecutionId: string
}

export type GetVerifyStepLogsProps = Omit<
  GetProps<RestResponsePageCVNGLogDTO, unknown, GetVerifyStepLogsQueryParams, GetVerifyStepLogsPathParams>,
  'path'
> &
  GetVerifyStepLogsPathParams

/**
 * get verify step logs
 */
export const GetVerifyStepLogs = ({ verifyStepExecutionId, ...props }: GetVerifyStepLogsProps) => (
  <Get<RestResponsePageCVNGLogDTO, unknown, GetVerifyStepLogsQueryParams, GetVerifyStepLogsPathParams>
    path={`/verify-step/${verifyStepExecutionId}/logs`}
    base={getConfig('cv/api')}
    {...props}
  />
)

export type UseGetVerifyStepLogsProps = Omit<
  UseGetProps<RestResponsePageCVNGLogDTO, unknown, GetVerifyStepLogsQueryParams, GetVerifyStepLogsPathParams>,
  'path'
> &
  GetVerifyStepLogsPathParams

/**
 * get verify step logs
 */
export const useGetVerifyStepLogs = ({ verifyStepExecutionId, ...props }: UseGetVerifyStepLogsProps) =>
  useGet<RestResponsePageCVNGLogDTO, unknown, GetVerifyStepLogsQueryParams, GetVerifyStepLogsPathParams>(
    (paramsInPath: GetVerifyStepLogsPathParams) => `/verify-step/${paramsInPath.verifyStepExecutionId}/logs`,
    { base: getConfig('cv/api'), pathParams: { verifyStepExecutionId }, ...props }
  )

/**
 * get verify step logs
 */
export const getVerifyStepLogsPromise = (
  {
    verifyStepExecutionId,
    ...props
  }: GetUsingFetchProps<
    RestResponsePageCVNGLogDTO,
    unknown,
    GetVerifyStepLogsQueryParams,
    GetVerifyStepLogsPathParams
  > & { verifyStepExecutionId: string },
  signal?: RequestInit['signal']
) =>
  getUsingFetch<RestResponsePageCVNGLogDTO, unknown, GetVerifyStepLogsQueryParams, GetVerifyStepLogsPathParams>(
    getConfig('cv/api'),
    `/verify-step/${verifyStepExecutionId}/logs`,
    props,
    signal
  )
