/*
 * Copyright 2022 Harness Inc. All rights reserved.
 * Use of this source code is governed by the PolyForm Shield 1.0.0 license
 * that can be found in the licenses directory at the root of this repository, also available at
 * https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt.
 */

/* Generated by restful-react */

import React from 'react'
import { Get, GetProps, useGet, UseGetProps } from 'restful-react'

import { getConfig } from '../config'
export const SPEC_VERSION = '0.8.0'
export interface SeriesDetails {
  category?: string
  instanceTypes?: string[]
  series?: string
}

/**
 * SeriesDetailsResponse Api object to be mapped to series/families available for a cloud provider in a particular region
 */
export interface SeriesDetailsResponse {
  categoryDetails?: {
    [key: string]: {
      [key: string]: string[]
    }
  }
  scrapingTime?: string
  seriesDetails?: SeriesDetails[]
}

export interface GetSeriesPathParams {
  provider: string
  service: string
  region: string
}

export type GetSeriesProps = Omit<GetProps<SeriesDetailsResponse, unknown, void, GetSeriesPathParams>, 'path'> &
  GetSeriesPathParams

/**
 * Provides a list of available series/families on a given provider in a specific region.
 */
export const GetSeries = ({ provider, service, region, ...props }: GetSeriesProps) => (
  <Get<SeriesDetailsResponse, unknown, void, GetSeriesPathParams>
    path={`/providers/${provider}/services/${service}/regions/${region}/series`}
    base={getConfig('ccm/public-pricing/api/v1')}
    {...props}
  />
)

export type UseGetSeriesProps = Omit<UseGetProps<SeriesDetailsResponse, unknown, void, GetSeriesPathParams>, 'path'> &
  GetSeriesPathParams

/**
 * Provides a list of available series/families on a given provider in a specific region.
 */
export const useGetSeries = ({ provider, service, region, ...props }: UseGetSeriesProps) =>
  useGet<SeriesDetailsResponse, unknown, void, GetSeriesPathParams>(
    (paramsInPath: GetSeriesPathParams) =>
      `/providers/${paramsInPath.provider}/services/${paramsInPath.service}/regions/${paramsInPath.region}/series`,
    { base: getConfig('ccm/public-pricing/api/v1'), pathParams: { provider, service, region }, ...props }
  )
